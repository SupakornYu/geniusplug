CCS PCM C Compiler, Version 4.141, 64203               03-¡.¾.-14 01:01

               Filename:   C:\Users\pump\Documents\geniusplug\GeniusPlugPIC\Microcontroller\project1.lst

               ROM used:   5440 words (66%)
                           Largest free fragment is 2048
               RAM used:   28 (8%) at main() level
                           142 (39%) worst case
               Stack:     6 worst case (5 in main + 1 for interrupts)

0000:  MOVLW  11
0001:  MOVWF  0A
0002:  GOTO   1F8
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   0B9
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
*
*
*
*
*
*
.................... #list 
....................  
.................... #device adc=10  // use 10-bit ADC 
.................... #device PASS_STRINGS=IN_RAM 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
0495:  BSF    03.5
0496:  BCF    33.0
....................    y = x; 
0497:  MOVF   27,W
0498:  MOVWF  2C
0499:  MOVF   26,W
049A:  MOVWF  2B
049B:  MOVF   25,W
049C:  MOVWF  2A
049D:  MOVF   24,W
049E:  MOVWF  29
....................  
....................    if (x < 0) 
049F:  MOVF   27,W
04A0:  MOVWF  37
04A1:  MOVF   26,W
04A2:  MOVWF  36
04A3:  MOVF   25,W
04A4:  MOVWF  35
04A5:  MOVF   24,W
04A6:  MOVWF  34
04A7:  CLRF   3B
04A8:  CLRF   3A
04A9:  CLRF   39
04AA:  CLRF   38
04AB:  BCF    03.5
04AC:  CALL   1AA
04AD:  BTFSS  03.0
04AE:  GOTO   4B5
....................    { 
....................       s = 1; 
04AF:  BSF    03.5
04B0:  BSF    33.0
....................       y = -y; 
04B1:  MOVF   2A,W
04B2:  XORLW  80
04B3:  MOVWF  2A
04B4:  BCF    03.5
....................    } 
....................  
....................    if (y <= 32768.0) 
04B5:  BSF    03.5
04B6:  MOVF   2C,W
04B7:  MOVWF  37
04B8:  MOVF   2B,W
04B9:  MOVWF  36
04BA:  MOVF   2A,W
04BB:  MOVWF  35
04BC:  MOVF   29,W
04BD:  MOVWF  34
04BE:  CLRF   3B
04BF:  CLRF   3A
04C0:  CLRF   39
04C1:  MOVLW  8E
04C2:  MOVWF  38
04C3:  BCF    03.5
04C4:  CALL   1AA
04C5:  BTFSC  03.0
04C6:  GOTO   4C9
04C7:  BTFSS  03.2
04C8:  GOTO   4E6
....................       res = (float32)(unsigned int16)y; 
04C9:  BSF    03.5
04CA:  MOVF   2C,W
04CB:  MOVWF  37
04CC:  MOVF   2B,W
04CD:  MOVWF  36
04CE:  MOVF   2A,W
04CF:  MOVWF  35
04D0:  MOVF   29,W
04D1:  MOVWF  34
04D2:  BCF    03.5
04D3:  CALL   2B7
04D4:  MOVF   79,W
04D5:  BSF    03.5
04D6:  MOVWF  39
04D7:  MOVF   78,W
04D8:  MOVWF  38
04D9:  BCF    03.5
04DA:  CALL   18B
04DB:  MOVF   7A,W
04DC:  BSF    03.5
04DD:  MOVWF  30
04DE:  MOVF   79,W
04DF:  MOVWF  2F
04E0:  MOVF   78,W
04E1:  MOVWF  2E
04E2:  MOVF   77,W
04E3:  MOVWF  2D
....................  
....................  else if (y < 10000000.0) 
04E4:  GOTO   5BE
04E5:  BCF    03.5
04E6:  BSF    03.5
04E7:  MOVF   2C,W
04E8:  MOVWF  37
04E9:  MOVF   2B,W
04EA:  MOVWF  36
04EB:  MOVF   2A,W
04EC:  MOVWF  35
04ED:  MOVF   29,W
04EE:  MOVWF  34
04EF:  MOVLW  80
04F0:  MOVWF  3B
04F1:  MOVLW  96
04F2:  MOVWF  3A
04F3:  MOVLW  18
04F4:  MOVWF  39
04F5:  MOVLW  96
04F6:  MOVWF  38
04F7:  BCF    03.5
04F8:  CALL   1AA
04F9:  BTFSS  03.0
04FA:  GOTO   5B5
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
04FB:  BSF    03.5
04FC:  MOVF   2C,W
04FD:  MOVWF  37
04FE:  MOVF   2B,W
04FF:  MOVWF  36
0500:  MOVF   2A,W
0501:  MOVWF  35
0502:  MOVF   29,W
0503:  MOVWF  34
0504:  CLRF   3B
0505:  CLRF   3A
0506:  CLRF   39
0507:  MOVLW  70
0508:  MOVWF  38
0509:  BCF    03.5
050A:  CALL   2D8
050B:  MOVF   7A,W
050C:  BSF    03.5
050D:  MOVWF  37
050E:  MOVF   79,W
050F:  MOVWF  36
0510:  MOVF   78,W
0511:  MOVWF  35
0512:  MOVF   77,W
0513:  MOVWF  34
0514:  BCF    03.5
0515:  CALL   2B7
0516:  MOVF   79,W
0517:  BSF    03.5
0518:  MOVWF  32
0519:  MOVF   78,W
051A:  MOVWF  31
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
051B:  MOVF   2C,W
051C:  MOVWF  37
051D:  MOVF   2B,W
051E:  MOVWF  36
051F:  MOVF   2A,W
0520:  MOVWF  35
0521:  MOVF   29,W
0522:  MOVWF  34
0523:  CLRF   3B
0524:  CLRF   3A
0525:  CLRF   39
0526:  MOVLW  70
0527:  MOVWF  38
0528:  BCF    03.5
0529:  CALL   2D8
052A:  MOVF   7A,W
052B:  BSF    03.5
052C:  MOVWF  37
052D:  MOVF   79,W
052E:  MOVWF  36
052F:  MOVF   78,W
0530:  MOVWF  35
0531:  MOVF   77,W
0532:  MOVWF  34
0533:  MOVF   32,W
0534:  MOVWF  39
0535:  MOVF   31,W
0536:  MOVWF  38
0537:  BCF    03.5
0538:  CALL   18B
0539:  BSF    03.1
053A:  BSF    03.5
053B:  MOVF   37,W
053C:  MOVWF  3B
053D:  MOVF   36,W
053E:  MOVWF  3A
053F:  MOVF   35,W
0540:  MOVWF  39
0541:  MOVF   34,W
0542:  MOVWF  38
0543:  MOVF   7A,W
0544:  MOVWF  3F
0545:  MOVF   79,W
0546:  MOVWF  3E
0547:  MOVF   78,W
0548:  MOVWF  3D
0549:  MOVF   77,W
054A:  MOVWF  3C
054B:  BCF    03.5
054C:  CALL   34F
054D:  BSF    03.5
054E:  CLRF   37
054F:  CLRF   36
0550:  CLRF   35
0551:  MOVLW  8E
0552:  MOVWF  34
0553:  MOVF   7A,W
0554:  MOVWF  3B
0555:  MOVF   79,W
0556:  MOVWF  3A
0557:  MOVF   78,W
0558:  MOVWF  39
0559:  MOVF   77,W
055A:  MOVWF  38
055B:  BCF    03.5
055C:  CALL   2D8
055D:  MOVF   7A,W
055E:  BSF    03.5
055F:  MOVWF  2C
0560:  MOVF   79,W
0561:  MOVWF  2B
0562:  MOVF   78,W
0563:  MOVWF  2A
0564:  MOVF   77,W
0565:  MOVWF  29
....................       res = 32768.0*(float32)l; 
0566:  MOVF   32,W
0567:  MOVWF  39
0568:  MOVF   31,W
0569:  MOVWF  38
056A:  BCF    03.5
056B:  CALL   18B
056C:  BSF    03.5
056D:  CLRF   37
056E:  CLRF   36
056F:  CLRF   35
0570:  MOVLW  8E
0571:  MOVWF  34
0572:  MOVF   7A,W
0573:  MOVWF  3B
0574:  MOVF   79,W
0575:  MOVWF  3A
0576:  MOVF   78,W
0577:  MOVWF  39
0578:  MOVF   77,W
0579:  MOVWF  38
057A:  BCF    03.5
057B:  CALL   2D8
057C:  MOVF   7A,W
057D:  BSF    03.5
057E:  MOVWF  30
057F:  MOVF   79,W
0580:  MOVWF  2F
0581:  MOVF   78,W
0582:  MOVWF  2E
0583:  MOVF   77,W
0584:  MOVWF  2D
....................       res += (float32)(unsigned int16)y; 
0585:  MOVF   2C,W
0586:  MOVWF  37
0587:  MOVF   2B,W
0588:  MOVWF  36
0589:  MOVF   2A,W
058A:  MOVWF  35
058B:  MOVF   29,W
058C:  MOVWF  34
058D:  BCF    03.5
058E:  CALL   2B7
058F:  MOVF   79,W
0590:  BSF    03.5
0591:  MOVWF  39
0592:  MOVF   78,W
0593:  MOVWF  38
0594:  BCF    03.5
0595:  CALL   18B
0596:  BCF    03.1
0597:  BSF    03.5
0598:  MOVF   30,W
0599:  MOVWF  3B
059A:  MOVF   2F,W
059B:  MOVWF  3A
059C:  MOVF   2E,W
059D:  MOVWF  39
059E:  MOVF   2D,W
059F:  MOVWF  38
05A0:  MOVF   7A,W
05A1:  MOVWF  3F
05A2:  MOVF   79,W
05A3:  MOVWF  3E
05A4:  MOVF   78,W
05A5:  MOVWF  3D
05A6:  MOVF   77,W
05A7:  MOVWF  3C
05A8:  BCF    03.5
05A9:  CALL   34F
05AA:  MOVF   7A,W
05AB:  BSF    03.5
05AC:  MOVWF  30
05AD:  MOVF   79,W
05AE:  MOVWF  2F
05AF:  MOVF   78,W
05B0:  MOVWF  2E
05B1:  MOVF   77,W
05B2:  MOVWF  2D
....................    } 
....................  
....................  else 
05B3:  GOTO   5BE
05B4:  BCF    03.5
....................   res = y; 
05B5:  BSF    03.5
05B6:  MOVF   2C,W
05B7:  MOVWF  30
05B8:  MOVF   2B,W
05B9:  MOVWF  2F
05BA:  MOVF   2A,W
05BB:  MOVWF  2E
05BC:  MOVF   29,W
05BD:  MOVWF  2D
....................  
....................  y = y - (float32)(unsigned int16)y; 
05BE:  MOVF   2C,W
05BF:  MOVWF  37
05C0:  MOVF   2B,W
05C1:  MOVWF  36
05C2:  MOVF   2A,W
05C3:  MOVWF  35
05C4:  MOVF   29,W
05C5:  MOVWF  34
05C6:  BCF    03.5
05C7:  CALL   2B7
05C8:  MOVF   79,W
05C9:  BSF    03.5
05CA:  MOVWF  39
05CB:  MOVF   78,W
05CC:  MOVWF  38
05CD:  BCF    03.5
05CE:  CALL   18B
05CF:  BSF    03.1
05D0:  BSF    03.5
05D1:  MOVF   2C,W
05D2:  MOVWF  3B
05D3:  MOVF   2B,W
05D4:  MOVWF  3A
05D5:  MOVF   2A,W
05D6:  MOVWF  39
05D7:  MOVF   29,W
05D8:  MOVWF  38
05D9:  MOVF   7A,W
05DA:  MOVWF  3F
05DB:  MOVF   79,W
05DC:  MOVWF  3E
05DD:  MOVF   78,W
05DE:  MOVWF  3D
05DF:  MOVF   77,W
05E0:  MOVWF  3C
05E1:  BCF    03.5
05E2:  CALL   34F
05E3:  MOVF   7A,W
05E4:  BSF    03.5
05E5:  MOVWF  2C
05E6:  MOVF   79,W
05E7:  MOVWF  2B
05E8:  MOVF   78,W
05E9:  MOVWF  2A
05EA:  MOVF   77,W
05EB:  MOVWF  29
....................  
....................  if (s) 
05EC:  BTFSS  33.0
05ED:  GOTO   5F1
....................   res = -res; 
05EE:  MOVF   2E,W
05EF:  XORLW  80
05F0:  MOVWF  2E
....................  
....................  if (y != 0) 
05F1:  MOVF   2C,W
05F2:  MOVWF  37
05F3:  MOVF   2B,W
05F4:  MOVWF  36
05F5:  MOVF   2A,W
05F6:  MOVWF  35
05F7:  MOVF   29,W
05F8:  MOVWF  34
05F9:  CLRF   3B
05FA:  CLRF   3A
05FB:  CLRF   39
05FC:  CLRF   38
05FD:  BCF    03.5
05FE:  CALL   1AA
05FF:  BTFSC  03.2
0600:  GOTO   63E
....................  { 
....................   if (s == 1 && n == 0) 
0601:  BSF    03.5
0602:  BTFSS  33.0
0603:  GOTO   620
0604:  MOVF   28,F
0605:  BTFSS  03.2
0606:  GOTO   620
....................    res -= 1.0; 
0607:  BSF    03.1
0608:  MOVF   30,W
0609:  MOVWF  3B
060A:  MOVF   2F,W
060B:  MOVWF  3A
060C:  MOVF   2E,W
060D:  MOVWF  39
060E:  MOVF   2D,W
060F:  MOVWF  38
0610:  CLRF   3F
0611:  CLRF   3E
0612:  CLRF   3D
0613:  MOVLW  7F
0614:  MOVWF  3C
0615:  BCF    03.5
0616:  CALL   34F
0617:  MOVF   7A,W
0618:  BSF    03.5
0619:  MOVWF  30
061A:  MOVF   79,W
061B:  MOVWF  2F
061C:  MOVF   78,W
061D:  MOVWF  2E
061E:  MOVF   77,W
061F:  MOVWF  2D
....................  
....................   if (s == 0 && n == 1) 
0620:  BTFSC  33.0
0621:  GOTO   63D
0622:  DECFSZ 28,W
0623:  GOTO   63D
....................    res += 1.0; 
0624:  BCF    03.1
0625:  MOVF   30,W
0626:  MOVWF  3B
0627:  MOVF   2F,W
0628:  MOVWF  3A
0629:  MOVF   2E,W
062A:  MOVWF  39
062B:  MOVF   2D,W
062C:  MOVWF  38
062D:  CLRF   3F
062E:  CLRF   3E
062F:  CLRF   3D
0630:  MOVLW  7F
0631:  MOVWF  3C
0632:  BCF    03.5
0633:  CALL   34F
0634:  MOVF   7A,W
0635:  BSF    03.5
0636:  MOVWF  30
0637:  MOVF   79,W
0638:  MOVWF  2F
0639:  MOVF   78,W
063A:  MOVWF  2E
063B:  MOVF   77,W
063C:  MOVWF  2D
063D:  BCF    03.5
....................  } 
....................  if (x == 0) 
063E:  BSF    03.5
063F:  MOVF   27,W
0640:  MOVWF  37
0641:  MOVF   26,W
0642:  MOVWF  36
0643:  MOVF   25,W
0644:  MOVWF  35
0645:  MOVF   24,W
0646:  MOVWF  34
0647:  CLRF   3B
0648:  CLRF   3A
0649:  CLRF   39
064A:  CLRF   38
064B:  BCF    03.5
064C:  CALL   1AA
064D:  BTFSS  03.2
064E:  GOTO   655
....................     res = 0; 
064F:  BSF    03.5
0650:  CLRF   30
0651:  CLRF   2F
0652:  CLRF   2E
0653:  CLRF   2D
0654:  BCF    03.5
....................  
....................  return (res); 
0655:  BSF    03.5
0656:  MOVF   2D,W
0657:  MOVWF  77
0658:  MOVF   2E,W
0659:  MOVWF  78
065A:  MOVF   2F,W
065B:  MOVWF  79
065C:  MOVF   30,W
065D:  MOVWF  7A
.................... } 
065E:  BCF    03.5
065F:  RETURN
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
071C:  MOVF   23,W
071D:  MOVWF  27
071E:  MOVF   22,W
071F:  MOVWF  26
0720:  MOVF   21,W
0721:  MOVWF  25
0722:  MOVF   20,W
0723:  MOVWF  24
0724:  CLRF   28
0725:  BCF    03.5
0726:  CALL   495
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
06DF:  MOVF   23,W
06E0:  MOVWF  27
06E1:  MOVF   22,W
06E2:  MOVWF  26
06E3:  MOVF   21,W
06E4:  MOVWF  25
06E5:  MOVF   20,W
06E6:  MOVWF  24
06E7:  MOVLW  01
06E8:  MOVWF  28
06E9:  BCF    03.5
06EA:  CALL   495
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
0660:  MOVF   70,W
0661:  BSF    03.5
0662:  MOVWF  37
0663:  BCF    03.5
0664:  MOVF   6F,W
0665:  BSF    03.5
0666:  MOVWF  36
0667:  BCF    03.5
0668:  MOVF   6E,W
0669:  BSF    03.5
066A:  MOVWF  35
066B:  BCF    03.5
066C:  MOVF   6D,W
066D:  BSF    03.5
066E:  MOVWF  34
066F:  CLRF   3B
0670:  CLRF   3A
0671:  CLRF   39
0672:  CLRF   38
0673:  BCF    03.5
0674:  CALL   1AA
0675:  BTFSC  03.2
0676:  GOTO   763
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
0677:  MOVF   6C,W
0678:  BSF    03.5
0679:  MOVWF  30
067A:  BCF    03.5
067B:  MOVF   6B,W
067C:  BSF    03.5
067D:  MOVWF  2F
067E:  BCF    03.5
067F:  MOVF   6A,W
0680:  BSF    03.5
0681:  MOVWF  2E
0682:  BCF    03.5
0683:  MOVF   69,W
0684:  BSF    03.5
0685:  MOVWF  2D
0686:  MOVF   70,W
0687:  MOVWF  34
0688:  BCF    03.5
0689:  MOVF   6F,W
068A:  BSF    03.5
068B:  MOVWF  33
068C:  BCF    03.5
068D:  MOVF   6E,W
068E:  BSF    03.5
068F:  MOVWF  32
0690:  BCF    03.5
0691:  MOVF   6D,W
0692:  BSF    03.5
0693:  MOVWF  31
0694:  BCF    03.5
0695:  CALL   1EB
0696:  MOVF   7A,W
0697:  MOVWF  7E
0698:  MOVF   79,W
0699:  MOVWF  7D
069A:  MOVF   78,W
069B:  MOVWF  7C
069C:  MOVF   77,W
069D:  MOVWF  7B
069E:  MOVF   7E,W
069F:  BSF    03.5
06A0:  MOVWF  37
06A1:  MOVF   7D,W
06A2:  MOVWF  36
06A3:  MOVF   7C,W
06A4:  MOVWF  35
06A5:  MOVF   7B,W
06A6:  MOVWF  34
06A7:  CLRF   3B
06A8:  CLRF   3A
06A9:  CLRF   39
06AA:  CLRF   38
06AB:  BCF    03.5
06AC:  CALL   1AA
06AD:  BTFSS  03.0
06AE:  GOTO   6EC
06AF:  MOVF   6C,W
06B0:  BSF    03.5
06B1:  MOVWF  30
06B2:  BCF    03.5
06B3:  MOVF   6B,W
06B4:  BSF    03.5
06B5:  MOVWF  2F
06B6:  BCF    03.5
06B7:  MOVF   6A,W
06B8:  BSF    03.5
06B9:  MOVWF  2E
06BA:  BCF    03.5
06BB:  MOVF   69,W
06BC:  BSF    03.5
06BD:  MOVWF  2D
06BE:  MOVF   70,W
06BF:  MOVWF  34
06C0:  BCF    03.5
06C1:  MOVF   6F,W
06C2:  BSF    03.5
06C3:  MOVWF  33
06C4:  BCF    03.5
06C5:  MOVF   6E,W
06C6:  BSF    03.5
06C7:  MOVWF  32
06C8:  BCF    03.5
06C9:  MOVF   6D,W
06CA:  BSF    03.5
06CB:  MOVWF  31
06CC:  BCF    03.5
06CD:  CALL   1EB
06CE:  MOVF   7A,W
06CF:  MOVWF  7E
06D0:  MOVF   79,W
06D1:  MOVWF  7D
06D2:  MOVF   78,W
06D3:  MOVWF  7C
06D4:  MOVF   77,W
06D5:  MOVWF  7B
06D6:  MOVF   7E,W
06D7:  BSF    03.5
06D8:  MOVWF  23
06D9:  MOVF   7D,W
06DA:  MOVWF  22
06DB:  MOVF   7C,W
06DC:  MOVWF  21
06DD:  MOVF   7B,W
06DE:  MOVWF  20
06EB:  GOTO   727
06EC:  MOVF   6C,W
06ED:  BSF    03.5
06EE:  MOVWF  30
06EF:  BCF    03.5
06F0:  MOVF   6B,W
06F1:  BSF    03.5
06F2:  MOVWF  2F
06F3:  BCF    03.5
06F4:  MOVF   6A,W
06F5:  BSF    03.5
06F6:  MOVWF  2E
06F7:  BCF    03.5
06F8:  MOVF   69,W
06F9:  BSF    03.5
06FA:  MOVWF  2D
06FB:  MOVF   70,W
06FC:  MOVWF  34
06FD:  BCF    03.5
06FE:  MOVF   6F,W
06FF:  BSF    03.5
0700:  MOVWF  33
0701:  BCF    03.5
0702:  MOVF   6E,W
0703:  BSF    03.5
0704:  MOVWF  32
0705:  BCF    03.5
0706:  MOVF   6D,W
0707:  BSF    03.5
0708:  MOVWF  31
0709:  BCF    03.5
070A:  CALL   1EB
070B:  MOVF   7A,W
070C:  MOVWF  7E
070D:  MOVF   79,W
070E:  MOVWF  7D
070F:  MOVF   78,W
0710:  MOVWF  7C
0711:  MOVF   77,W
0712:  MOVWF  7B
0713:  MOVF   7E,W
0714:  BSF    03.5
0715:  MOVWF  23
0716:  MOVF   7D,W
0717:  MOVWF  22
0718:  MOVF   7C,W
0719:  MOVWF  21
071A:  MOVF   7B,W
071B:  MOVWF  20
0727:  MOVF   7A,W
0728:  MOVWF  74
0729:  MOVF   79,W
072A:  MOVWF  73
072B:  MOVF   78,W
072C:  MOVWF  72
072D:  MOVF   77,W
072E:  MOVWF  71
....................       return(x-(i*y)); 
072F:  MOVF   74,W
0730:  BSF    03.5
0731:  MOVWF  37
0732:  MOVF   73,W
0733:  MOVWF  36
0734:  MOVF   72,W
0735:  MOVWF  35
0736:  MOVF   71,W
0737:  MOVWF  34
0738:  MOVF   70,W
0739:  MOVWF  3B
073A:  BCF    03.5
073B:  MOVF   6F,W
073C:  BSF    03.5
073D:  MOVWF  3A
073E:  BCF    03.5
073F:  MOVF   6E,W
0740:  BSF    03.5
0741:  MOVWF  39
0742:  BCF    03.5
0743:  MOVF   6D,W
0744:  BSF    03.5
0745:  MOVWF  38
0746:  BCF    03.5
0747:  CALL   2D8
0748:  BSF    03.1
0749:  MOVF   6C,W
074A:  BSF    03.5
074B:  MOVWF  3B
074C:  BCF    03.5
074D:  MOVF   6B,W
074E:  BSF    03.5
074F:  MOVWF  3A
0750:  BCF    03.5
0751:  MOVF   6A,W
0752:  BSF    03.5
0753:  MOVWF  39
0754:  BCF    03.5
0755:  MOVF   69,W
0756:  BSF    03.5
0757:  MOVWF  38
0758:  MOVF   7A,W
0759:  MOVWF  3F
075A:  MOVF   79,W
075B:  MOVWF  3E
075C:  MOVF   78,W
075D:  MOVWF  3D
075E:  MOVF   77,W
075F:  MOVWF  3C
0760:  BCF    03.5
0761:  CALL   34F
0762:  GOTO   763
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
0763:  RETURN
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
09E8:  MOVF   70,W
09E9:  BSF    03.5
09EA:  MOVWF  37
09EB:  BCF    03.5
09EC:  MOVF   6F,W
09ED:  BSF    03.5
09EE:  MOVWF  36
09EF:  BCF    03.5
09F0:  MOVF   6E,W
09F1:  BSF    03.5
09F2:  MOVWF  35
09F3:  BCF    03.5
09F4:  MOVF   6D,W
09F5:  BSF    03.5
09F6:  MOVWF  34
09F7:  MOVLW  3B
09F8:  MOVWF  3B
09F9:  MOVLW  AA
09FA:  MOVWF  3A
09FB:  MOVLW  38
09FC:  MOVWF  39
09FD:  MOVLW  7F
09FE:  MOVWF  38
09FF:  BCF    0A.3
0A00:  BCF    03.5
0A01:  CALL   2D8
0A02:  BSF    0A.3
0A03:  MOVF   7A,W
0A04:  BSF    03.5
0A05:  MOVWF  37
0A06:  MOVF   79,W
0A07:  MOVWF  36
0A08:  MOVF   78,W
0A09:  MOVWF  35
0A0A:  MOVF   77,W
0A0B:  MOVWF  34
0A0C:  BCF    0A.3
0A0D:  BCF    03.5
0A0E:  CALL   2B7
0A0F:  BSF    0A.3
0A10:  MOVF   78,W
0A11:  MOVWF  75
....................    s = 0; 
0A12:  BCF    76.0
....................    y = x; 
0A13:  MOVF   70,W
0A14:  MOVWF  74
0A15:  MOVF   6F,W
0A16:  MOVWF  73
0A17:  MOVF   6E,W
0A18:  MOVWF  72
0A19:  MOVF   6D,W
0A1A:  MOVWF  71
....................  
....................    if (x < 0) 
0A1B:  MOVF   70,W
0A1C:  BSF    03.5
0A1D:  MOVWF  37
0A1E:  BCF    03.5
0A1F:  MOVF   6F,W
0A20:  BSF    03.5
0A21:  MOVWF  36
0A22:  BCF    03.5
0A23:  MOVF   6E,W
0A24:  BSF    03.5
0A25:  MOVWF  35
0A26:  BCF    03.5
0A27:  MOVF   6D,W
0A28:  BSF    03.5
0A29:  MOVWF  34
0A2A:  CLRF   3B
0A2B:  CLRF   3A
0A2C:  CLRF   39
0A2D:  CLRF   38
0A2E:  BCF    0A.3
0A2F:  BCF    03.5
0A30:  CALL   1AA
0A31:  BSF    0A.3
0A32:  BTFSS  03.0
0A33:  GOTO   23A
....................    { 
....................       s = 1; 
0A34:  BSF    76.0
....................       n = -n; 
0A35:  COMF   75,F
0A36:  INCF   75,F
....................       y = -y; 
0A37:  MOVF   72,W
0A38:  XORLW  80
0A39:  MOVWF  72
....................    } 
....................  
....................    res = 0.0; 
0A3A:  CLRF   7E
0A3B:  CLRF   7D
0A3C:  CLRF   7C
0A3D:  CLRF   7B
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
0A3E:  BSF    03.5
0A3F:  CLRF   25
0A40:  MOVLW  7B
0A41:  MOVWF  24
0A42:  MOVF   24,W
0A43:  MOVWF  04
0A44:  BCF    03.7
0A45:  BTFSC  25.0
0A46:  BSF    03.7
0A47:  MOVLW  7F
0A48:  ADDWF  75,W
0A49:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
0A4A:  MOVF   74,W
0A4B:  MOVWF  37
0A4C:  MOVF   73,W
0A4D:  MOVWF  36
0A4E:  MOVF   72,W
0A4F:  MOVWF  35
0A50:  MOVF   71,W
0A51:  MOVWF  34
0A52:  MOVLW  3B
0A53:  MOVWF  3B
0A54:  MOVLW  AA
0A55:  MOVWF  3A
0A56:  MOVLW  38
0A57:  MOVWF  39
0A58:  MOVLW  7F
0A59:  MOVWF  38
0A5A:  BCF    0A.3
0A5B:  BCF    03.5
0A5C:  CALL   2D8
0A5D:  BSF    0A.3
0A5E:  MOVF   7A,W
0A5F:  BSF    03.5
0A60:  MOVWF  27
0A61:  MOVF   79,W
0A62:  MOVWF  26
0A63:  MOVF   78,W
0A64:  MOVWF  25
0A65:  MOVF   77,W
0A66:  MOVWF  24
0A67:  CLRF   2B
0A68:  MOVF   75,W
0A69:  MOVWF  2A
0A6A:  BTFSC  2A.7
0A6B:  DECF   2B,F
0A6C:  BCF    0A.3
0A6D:  BCF    03.5
0A6E:  CALL   764
0A6F:  BSF    0A.3
0A70:  BSF    03.1
0A71:  BSF    03.5
0A72:  MOVF   27,W
0A73:  MOVWF  3B
0A74:  MOVF   26,W
0A75:  MOVWF  3A
0A76:  MOVF   25,W
0A77:  MOVWF  39
0A78:  MOVF   24,W
0A79:  MOVWF  38
0A7A:  MOVF   7A,W
0A7B:  MOVWF  3F
0A7C:  MOVF   79,W
0A7D:  MOVWF  3E
0A7E:  MOVF   78,W
0A7F:  MOVWF  3D
0A80:  MOVF   77,W
0A81:  MOVWF  3C
0A82:  BCF    0A.3
0A83:  BCF    03.5
0A84:  CALL   34F
0A85:  BSF    0A.3
0A86:  MOVF   7A,W
0A87:  MOVWF  74
0A88:  MOVF   79,W
0A89:  MOVWF  73
0A8A:  MOVF   78,W
0A8B:  MOVWF  72
0A8C:  MOVF   77,W
0A8D:  MOVWF  71
....................  
....................    r = pe[0]*y + pe[1]; 
0A8E:  MOVLW  7C
0A8F:  BSF    03.5
0A90:  MOVWF  37
0A91:  MOVLW  88
0A92:  MOVWF  36
0A93:  MOVLW  59
0A94:  MOVWF  35
0A95:  MOVLW  72
0A96:  MOVWF  34
0A97:  MOVF   74,W
0A98:  MOVWF  3B
0A99:  MOVF   73,W
0A9A:  MOVWF  3A
0A9B:  MOVF   72,W
0A9C:  MOVWF  39
0A9D:  MOVF   71,W
0A9E:  MOVWF  38
0A9F:  BCF    0A.3
0AA0:  BCF    03.5
0AA1:  CALL   2D8
0AA2:  BSF    0A.3
0AA3:  MOVF   7A,W
0AA4:  BSF    03.5
0AA5:  MOVWF  27
0AA6:  MOVF   79,W
0AA7:  MOVWF  26
0AA8:  MOVF   78,W
0AA9:  MOVWF  25
0AAA:  MOVF   77,W
0AAB:  MOVWF  24
0AAC:  BCF    03.1
0AAD:  MOVF   27,W
0AAE:  MOVWF  3B
0AAF:  MOVF   26,W
0AB0:  MOVWF  3A
0AB1:  MOVF   25,W
0AB2:  MOVWF  39
0AB3:  MOVF   24,W
0AB4:  MOVWF  38
0AB5:  MOVLW  E0
0AB6:  MOVWF  3F
0AB7:  MOVLW  97
0AB8:  MOVWF  3E
0AB9:  MOVLW  26
0ABA:  MOVWF  3D
0ABB:  MOVLW  75
0ABC:  MOVWF  3C
0ABD:  BCF    0A.3
0ABE:  BCF    03.5
0ABF:  CALL   34F
0AC0:  BSF    0A.3
0AC1:  MOVF   7A,W
0AC2:  BSF    03.5
0AC3:  MOVWF  23
0AC4:  MOVF   79,W
0AC5:  MOVWF  22
0AC6:  MOVF   78,W
0AC7:  MOVWF  21
0AC8:  MOVF   77,W
0AC9:  MOVWF  20
....................    r = r*y + pe[2]; 
0ACA:  MOVF   23,W
0ACB:  MOVWF  37
0ACC:  MOVF   22,W
0ACD:  MOVWF  36
0ACE:  MOVF   21,W
0ACF:  MOVWF  35
0AD0:  MOVF   20,W
0AD1:  MOVWF  34
0AD2:  MOVF   74,W
0AD3:  MOVWF  3B
0AD4:  MOVF   73,W
0AD5:  MOVWF  3A
0AD6:  MOVF   72,W
0AD7:  MOVWF  39
0AD8:  MOVF   71,W
0AD9:  MOVWF  38
0ADA:  BCF    0A.3
0ADB:  BCF    03.5
0ADC:  CALL   2D8
0ADD:  BSF    0A.3
0ADE:  MOVF   7A,W
0ADF:  BSF    03.5
0AE0:  MOVWF  27
0AE1:  MOVF   79,W
0AE2:  MOVWF  26
0AE3:  MOVF   78,W
0AE4:  MOVWF  25
0AE5:  MOVF   77,W
0AE6:  MOVWF  24
0AE7:  BCF    03.1
0AE8:  MOVF   27,W
0AE9:  MOVWF  3B
0AEA:  MOVF   26,W
0AEB:  MOVWF  3A
0AEC:  MOVF   25,W
0AED:  MOVWF  39
0AEE:  MOVF   24,W
0AEF:  MOVWF  38
0AF0:  MOVLW  C4
0AF1:  MOVWF  3F
0AF2:  MOVLW  1D
0AF3:  MOVWF  3E
0AF4:  MOVLW  1E
0AF5:  MOVWF  3D
0AF6:  MOVLW  78
0AF7:  MOVWF  3C
0AF8:  BCF    0A.3
0AF9:  BCF    03.5
0AFA:  CALL   34F
0AFB:  BSF    0A.3
0AFC:  MOVF   7A,W
0AFD:  BSF    03.5
0AFE:  MOVWF  23
0AFF:  MOVF   79,W
0B00:  MOVWF  22
0B01:  MOVF   78,W
0B02:  MOVWF  21
0B03:  MOVF   77,W
0B04:  MOVWF  20
....................    r = r*y + pe[3]; 
0B05:  MOVF   23,W
0B06:  MOVWF  37
0B07:  MOVF   22,W
0B08:  MOVWF  36
0B09:  MOVF   21,W
0B0A:  MOVWF  35
0B0B:  MOVF   20,W
0B0C:  MOVWF  34
0B0D:  MOVF   74,W
0B0E:  MOVWF  3B
0B0F:  MOVF   73,W
0B10:  MOVWF  3A
0B11:  MOVF   72,W
0B12:  MOVWF  39
0B13:  MOVF   71,W
0B14:  MOVWF  38
0B15:  BCF    0A.3
0B16:  BCF    03.5
0B17:  CALL   2D8
0B18:  BSF    0A.3
0B19:  MOVF   7A,W
0B1A:  BSF    03.5
0B1B:  MOVWF  27
0B1C:  MOVF   79,W
0B1D:  MOVWF  26
0B1E:  MOVF   78,W
0B1F:  MOVWF  25
0B20:  MOVF   77,W
0B21:  MOVWF  24
0B22:  BCF    03.1
0B23:  MOVF   27,W
0B24:  MOVWF  3B
0B25:  MOVF   26,W
0B26:  MOVWF  3A
0B27:  MOVF   25,W
0B28:  MOVWF  39
0B29:  MOVF   24,W
0B2A:  MOVWF  38
0B2B:  MOVLW  5E
0B2C:  MOVWF  3F
0B2D:  MOVLW  50
0B2E:  MOVWF  3E
0B2F:  MOVLW  63
0B30:  MOVWF  3D
0B31:  MOVLW  7A
0B32:  MOVWF  3C
0B33:  BCF    0A.3
0B34:  BCF    03.5
0B35:  CALL   34F
0B36:  BSF    0A.3
0B37:  MOVF   7A,W
0B38:  BSF    03.5
0B39:  MOVWF  23
0B3A:  MOVF   79,W
0B3B:  MOVWF  22
0B3C:  MOVF   78,W
0B3D:  MOVWF  21
0B3E:  MOVF   77,W
0B3F:  MOVWF  20
....................    r = r*y + pe[4]; 
0B40:  MOVF   23,W
0B41:  MOVWF  37
0B42:  MOVF   22,W
0B43:  MOVWF  36
0B44:  MOVF   21,W
0B45:  MOVWF  35
0B46:  MOVF   20,W
0B47:  MOVWF  34
0B48:  MOVF   74,W
0B49:  MOVWF  3B
0B4A:  MOVF   73,W
0B4B:  MOVWF  3A
0B4C:  MOVF   72,W
0B4D:  MOVWF  39
0B4E:  MOVF   71,W
0B4F:  MOVWF  38
0B50:  BCF    0A.3
0B51:  BCF    03.5
0B52:  CALL   2D8
0B53:  BSF    0A.3
0B54:  MOVF   7A,W
0B55:  BSF    03.5
0B56:  MOVWF  27
0B57:  MOVF   79,W
0B58:  MOVWF  26
0B59:  MOVF   78,W
0B5A:  MOVWF  25
0B5B:  MOVF   77,W
0B5C:  MOVWF  24
0B5D:  BCF    03.1
0B5E:  MOVF   27,W
0B5F:  MOVWF  3B
0B60:  MOVF   26,W
0B61:  MOVWF  3A
0B62:  MOVF   25,W
0B63:  MOVWF  39
0B64:  MOVF   24,W
0B65:  MOVWF  38
0B66:  MOVLW  1A
0B67:  MOVWF  3F
0B68:  MOVLW  FE
0B69:  MOVWF  3E
0B6A:  MOVLW  75
0B6B:  MOVWF  3D
0B6C:  MOVLW  7C
0B6D:  MOVWF  3C
0B6E:  BCF    0A.3
0B6F:  BCF    03.5
0B70:  CALL   34F
0B71:  BSF    0A.3
0B72:  MOVF   7A,W
0B73:  BSF    03.5
0B74:  MOVWF  23
0B75:  MOVF   79,W
0B76:  MOVWF  22
0B77:  MOVF   78,W
0B78:  MOVWF  21
0B79:  MOVF   77,W
0B7A:  MOVWF  20
....................    r = r*y + pe[5]; 
0B7B:  MOVF   23,W
0B7C:  MOVWF  37
0B7D:  MOVF   22,W
0B7E:  MOVWF  36
0B7F:  MOVF   21,W
0B80:  MOVWF  35
0B81:  MOVF   20,W
0B82:  MOVWF  34
0B83:  MOVF   74,W
0B84:  MOVWF  3B
0B85:  MOVF   73,W
0B86:  MOVWF  3A
0B87:  MOVF   72,W
0B88:  MOVWF  39
0B89:  MOVF   71,W
0B8A:  MOVWF  38
0B8B:  BCF    0A.3
0B8C:  BCF    03.5
0B8D:  CALL   2D8
0B8E:  BSF    0A.3
0B8F:  MOVF   7A,W
0B90:  BSF    03.5
0B91:  MOVWF  27
0B92:  MOVF   79,W
0B93:  MOVWF  26
0B94:  MOVF   78,W
0B95:  MOVWF  25
0B96:  MOVF   77,W
0B97:  MOVWF  24
0B98:  BCF    03.1
0B99:  MOVF   27,W
0B9A:  MOVWF  3B
0B9B:  MOVF   26,W
0B9C:  MOVWF  3A
0B9D:  MOVF   25,W
0B9E:  MOVWF  39
0B9F:  MOVF   24,W
0BA0:  MOVWF  38
0BA1:  MOVLW  18
0BA2:  MOVWF  3F
0BA3:  MOVLW  72
0BA4:  MOVWF  3E
0BA5:  MOVLW  31
0BA6:  MOVWF  3D
0BA7:  MOVLW  7E
0BA8:  MOVWF  3C
0BA9:  BCF    0A.3
0BAA:  BCF    03.5
0BAB:  CALL   34F
0BAC:  BSF    0A.3
0BAD:  MOVF   7A,W
0BAE:  BSF    03.5
0BAF:  MOVWF  23
0BB0:  MOVF   79,W
0BB1:  MOVWF  22
0BB2:  MOVF   78,W
0BB3:  MOVWF  21
0BB4:  MOVF   77,W
0BB5:  MOVWF  20
....................  
....................    res = res*(1.0 + y*r); 
0BB6:  MOVF   74,W
0BB7:  MOVWF  37
0BB8:  MOVF   73,W
0BB9:  MOVWF  36
0BBA:  MOVF   72,W
0BBB:  MOVWF  35
0BBC:  MOVF   71,W
0BBD:  MOVWF  34
0BBE:  MOVF   23,W
0BBF:  MOVWF  3B
0BC0:  MOVF   22,W
0BC1:  MOVWF  3A
0BC2:  MOVF   21,W
0BC3:  MOVWF  39
0BC4:  MOVF   20,W
0BC5:  MOVWF  38
0BC6:  BCF    0A.3
0BC7:  BCF    03.5
0BC8:  CALL   2D8
0BC9:  BSF    0A.3
0BCA:  BCF    03.1
0BCB:  BSF    03.5
0BCC:  CLRF   3B
0BCD:  CLRF   3A
0BCE:  CLRF   39
0BCF:  MOVLW  7F
0BD0:  MOVWF  38
0BD1:  MOVF   7A,W
0BD2:  MOVWF  3F
0BD3:  MOVF   79,W
0BD4:  MOVWF  3E
0BD5:  MOVF   78,W
0BD6:  MOVWF  3D
0BD7:  MOVF   77,W
0BD8:  MOVWF  3C
0BD9:  BCF    0A.3
0BDA:  BCF    03.5
0BDB:  CALL   34F
0BDC:  BSF    0A.3
0BDD:  MOVF   7E,W
0BDE:  BSF    03.5
0BDF:  MOVWF  37
0BE0:  MOVF   7D,W
0BE1:  MOVWF  36
0BE2:  MOVF   7C,W
0BE3:  MOVWF  35
0BE4:  MOVF   7B,W
0BE5:  MOVWF  34
0BE6:  MOVF   7A,W
0BE7:  MOVWF  3B
0BE8:  MOVF   79,W
0BE9:  MOVWF  3A
0BEA:  MOVF   78,W
0BEB:  MOVWF  39
0BEC:  MOVF   77,W
0BED:  MOVWF  38
0BEE:  BCF    0A.3
0BEF:  BCF    03.5
0BF0:  CALL   2D8
0BF1:  BSF    0A.3
0BF2:  MOVF   7A,W
0BF3:  MOVWF  7E
0BF4:  MOVF   79,W
0BF5:  MOVWF  7D
0BF6:  MOVF   78,W
0BF7:  MOVWF  7C
0BF8:  MOVF   77,W
0BF9:  MOVWF  7B
....................  
....................    if (s) 
0BFA:  BTFSS  76.0
0BFB:  GOTO   416
....................       res = 1.0/res; 
0BFC:  BSF    03.5
0BFD:  CLRF   30
0BFE:  CLRF   2F
0BFF:  CLRF   2E
0C00:  MOVLW  7F
0C01:  MOVWF  2D
0C02:  MOVF   7E,W
0C03:  MOVWF  34
0C04:  MOVF   7D,W
0C05:  MOVWF  33
0C06:  MOVF   7C,W
0C07:  MOVWF  32
0C08:  MOVF   7B,W
0C09:  MOVWF  31
0C0A:  BCF    0A.3
0C0B:  BCF    03.5
0C0C:  CALL   1EB
0C0D:  BSF    0A.3
0C0E:  MOVF   7A,W
0C0F:  MOVWF  7E
0C10:  MOVF   79,W
0C11:  MOVWF  7D
0C12:  MOVF   78,W
0C13:  MOVWF  7C
0C14:  MOVF   77,W
0C15:  MOVWF  7B
....................    return(res); 
0C16:  MOVF   7B,W
0C17:  MOVWF  77
0C18:  MOVF   7C,W
0C19:  MOVWF  78
0C1A:  MOVF   7D,W
0C1B:  MOVWF  79
0C1C:  MOVF   7E,W
0C1D:  MOVWF  7A
.................... } 
0C1E:  RETURN
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
0800:  MOVF   70,W
0801:  MOVWF  74
0802:  MOVF   6F,W
0803:  MOVWF  73
0804:  MOVF   6E,W
0805:  MOVWF  72
0806:  MOVF   6D,W
0807:  MOVWF  71
....................  
....................    if (y != 1.0) 
0808:  MOVF   74,W
0809:  BSF    03.5
080A:  MOVWF  37
080B:  MOVF   73,W
080C:  MOVWF  36
080D:  MOVF   72,W
080E:  MOVWF  35
080F:  MOVF   71,W
0810:  MOVWF  34
0811:  CLRF   3B
0812:  CLRF   3A
0813:  CLRF   39
0814:  MOVLW  7F
0815:  MOVWF  38
0816:  BCF    0A.3
0817:  BCF    03.5
0818:  CALL   1AA
0819:  BSF    0A.3
081A:  BTFSC  03.2
081B:  GOTO   1DB
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
081C:  BSF    03.5
081D:  CLRF   29
081E:  MOVLW  71
081F:  MOVWF  28
0820:  MOVF   28,W
0821:  MOVWF  04
0822:  BCF    03.7
0823:  BTFSC  29.0
0824:  BSF    03.7
0825:  MOVLW  7E
0826:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
0827:  BSF    03.1
0828:  MOVF   74,W
0829:  MOVWF  3B
082A:  MOVF   73,W
082B:  MOVWF  3A
082C:  MOVF   72,W
082D:  MOVWF  39
082E:  MOVF   71,W
082F:  MOVWF  38
0830:  CLRF   3F
0831:  CLRF   3E
0832:  CLRF   3D
0833:  MOVLW  7F
0834:  MOVWF  3C
0835:  BCF    0A.3
0836:  BCF    03.5
0837:  CALL   34F
0838:  BSF    0A.3
0839:  MOVF   7A,W
083A:  BSF    03.5
083B:  MOVWF  2B
083C:  MOVF   79,W
083D:  MOVWF  2A
083E:  MOVF   78,W
083F:  MOVWF  29
0840:  MOVF   77,W
0841:  MOVWF  28
0842:  BCF    03.1
0843:  MOVF   74,W
0844:  MOVWF  3B
0845:  MOVF   73,W
0846:  MOVWF  3A
0847:  MOVF   72,W
0848:  MOVWF  39
0849:  MOVF   71,W
084A:  MOVWF  38
084B:  CLRF   3F
084C:  CLRF   3E
084D:  CLRF   3D
084E:  MOVLW  7F
084F:  MOVWF  3C
0850:  BCF    0A.3
0851:  BCF    03.5
0852:  CALL   34F
0853:  BSF    0A.3
0854:  BSF    03.5
0855:  MOVF   2B,W
0856:  MOVWF  30
0857:  MOVF   2A,W
0858:  MOVWF  2F
0859:  MOVF   29,W
085A:  MOVWF  2E
085B:  MOVF   28,W
085C:  MOVWF  2D
085D:  MOVF   7A,W
085E:  MOVWF  34
085F:  MOVF   79,W
0860:  MOVWF  33
0861:  MOVF   78,W
0862:  MOVWF  32
0863:  MOVF   77,W
0864:  MOVWF  31
0865:  BCF    0A.3
0866:  BCF    03.5
0867:  CALL   1EB
0868:  BSF    0A.3
0869:  MOVF   7A,W
086A:  MOVWF  74
086B:  MOVF   79,W
086C:  MOVWF  73
086D:  MOVF   78,W
086E:  MOVWF  72
086F:  MOVF   77,W
0870:  MOVWF  71
....................  
....................       y2=y*y; 
0871:  MOVF   74,W
0872:  BSF    03.5
0873:  MOVWF  37
0874:  MOVF   73,W
0875:  MOVWF  36
0876:  MOVF   72,W
0877:  MOVWF  35
0878:  MOVF   71,W
0879:  MOVWF  34
087A:  MOVF   74,W
087B:  MOVWF  3B
087C:  MOVF   73,W
087D:  MOVWF  3A
087E:  MOVF   72,W
087F:  MOVWF  39
0880:  MOVF   71,W
0881:  MOVWF  38
0882:  BCF    0A.3
0883:  BCF    03.5
0884:  CALL   2D8
0885:  BSF    0A.3
0886:  MOVF   7A,W
0887:  BSF    03.5
0888:  MOVWF  27
0889:  MOVF   79,W
088A:  MOVWF  26
088B:  MOVF   78,W
088C:  MOVWF  25
088D:  MOVF   77,W
088E:  MOVWF  24
....................  
....................       res = pl[0]*y2 + pl[1]; 
088F:  MOVLW  99
0890:  MOVWF  37
0891:  MOVLW  47
0892:  MOVWF  36
0893:  MOVLW  8A
0894:  MOVWF  35
0895:  MOVLW  7F
0896:  MOVWF  34
0897:  MOVF   27,W
0898:  MOVWF  3B
0899:  MOVF   26,W
089A:  MOVWF  3A
089B:  MOVF   25,W
089C:  MOVWF  39
089D:  MOVF   24,W
089E:  MOVWF  38
089F:  BCF    0A.3
08A0:  BCF    03.5
08A1:  CALL   2D8
08A2:  BSF    0A.3
08A3:  MOVF   7A,W
08A4:  BSF    03.5
08A5:  MOVWF  2B
08A6:  MOVF   79,W
08A7:  MOVWF  2A
08A8:  MOVF   78,W
08A9:  MOVWF  29
08AA:  MOVF   77,W
08AB:  MOVWF  28
08AC:  BCF    03.1
08AD:  MOVF   2B,W
08AE:  MOVWF  3B
08AF:  MOVF   2A,W
08B0:  MOVWF  3A
08B1:  MOVF   29,W
08B2:  MOVWF  39
08B3:  MOVF   28,W
08B4:  MOVWF  38
08B5:  CLRF   3F
08B6:  CLRF   3E
08B7:  CLRF   3D
08B8:  MOVLW  80
08B9:  MOVWF  3C
08BA:  BCF    0A.3
08BB:  BCF    03.5
08BC:  CALL   34F
08BD:  BSF    0A.3
08BE:  MOVF   7A,W
08BF:  MOVWF  7E
08C0:  MOVF   79,W
08C1:  MOVWF  7D
08C2:  MOVF   78,W
08C3:  MOVWF  7C
08C4:  MOVF   77,W
08C5:  MOVWF  7B
....................  
....................       r = ql[0]*y2 + ql[1]; 
08C6:  MOVLW  4C
08C7:  BSF    03.5
08C8:  MOVWF  37
08C9:  MOVLW  F3
08CA:  MOVWF  36
08CB:  MOVLW  3A
08CC:  MOVWF  35
08CD:  MOVLW  7B
08CE:  MOVWF  34
08CF:  MOVF   27,W
08D0:  MOVWF  3B
08D1:  MOVF   26,W
08D2:  MOVWF  3A
08D3:  MOVF   25,W
08D4:  MOVWF  39
08D5:  MOVF   24,W
08D6:  MOVWF  38
08D7:  BCF    0A.3
08D8:  BCF    03.5
08D9:  CALL   2D8
08DA:  BSF    0A.3
08DB:  MOVF   7A,W
08DC:  BSF    03.5
08DD:  MOVWF  2B
08DE:  MOVF   79,W
08DF:  MOVWF  2A
08E0:  MOVF   78,W
08E1:  MOVWF  29
08E2:  MOVF   77,W
08E3:  MOVWF  28
08E4:  BCF    03.1
08E5:  MOVF   2B,W
08E6:  MOVWF  3B
08E7:  MOVF   2A,W
08E8:  MOVWF  3A
08E9:  MOVF   29,W
08EA:  MOVWF  39
08EB:  MOVF   28,W
08EC:  MOVWF  38
08ED:  MOVLW  2B
08EE:  MOVWF  3F
08EF:  MOVLW  9D
08F0:  MOVWF  3E
08F1:  MOVLW  DF
08F2:  MOVWF  3D
08F3:  MOVLW  7E
08F4:  MOVWF  3C
08F5:  BCF    0A.3
08F6:  BCF    03.5
08F7:  CALL   34F
08F8:  BSF    0A.3
08F9:  MOVF   7A,W
08FA:  BSF    03.5
08FB:  MOVWF  23
08FC:  MOVF   79,W
08FD:  MOVWF  22
08FE:  MOVF   78,W
08FF:  MOVWF  21
0900:  MOVF   77,W
0901:  MOVWF  20
....................       r = r*y2 + 1.0; 
0902:  MOVF   23,W
0903:  MOVWF  37
0904:  MOVF   22,W
0905:  MOVWF  36
0906:  MOVF   21,W
0907:  MOVWF  35
0908:  MOVF   20,W
0909:  MOVWF  34
090A:  MOVF   27,W
090B:  MOVWF  3B
090C:  MOVF   26,W
090D:  MOVWF  3A
090E:  MOVF   25,W
090F:  MOVWF  39
0910:  MOVF   24,W
0911:  MOVWF  38
0912:  BCF    0A.3
0913:  BCF    03.5
0914:  CALL   2D8
0915:  BSF    0A.3
0916:  MOVF   7A,W
0917:  BSF    03.5
0918:  MOVWF  2B
0919:  MOVF   79,W
091A:  MOVWF  2A
091B:  MOVF   78,W
091C:  MOVWF  29
091D:  MOVF   77,W
091E:  MOVWF  28
091F:  BCF    03.1
0920:  MOVF   2B,W
0921:  MOVWF  3B
0922:  MOVF   2A,W
0923:  MOVWF  3A
0924:  MOVF   29,W
0925:  MOVWF  39
0926:  MOVF   28,W
0927:  MOVWF  38
0928:  CLRF   3F
0929:  CLRF   3E
092A:  CLRF   3D
092B:  MOVLW  7F
092C:  MOVWF  3C
092D:  BCF    0A.3
092E:  BCF    03.5
092F:  CALL   34F
0930:  BSF    0A.3
0931:  MOVF   7A,W
0932:  BSF    03.5
0933:  MOVWF  23
0934:  MOVF   79,W
0935:  MOVWF  22
0936:  MOVF   78,W
0937:  MOVWF  21
0938:  MOVF   77,W
0939:  MOVWF  20
....................  
....................       res = y*res/r; 
093A:  MOVF   74,W
093B:  MOVWF  37
093C:  MOVF   73,W
093D:  MOVWF  36
093E:  MOVF   72,W
093F:  MOVWF  35
0940:  MOVF   71,W
0941:  MOVWF  34
0942:  MOVF   7E,W
0943:  MOVWF  3B
0944:  MOVF   7D,W
0945:  MOVWF  3A
0946:  MOVF   7C,W
0947:  MOVWF  39
0948:  MOVF   7B,W
0949:  MOVWF  38
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  CALL   2D8
094D:  BSF    0A.3
094E:  MOVF   7A,W
094F:  BSF    03.5
0950:  MOVWF  2B
0951:  MOVF   79,W
0952:  MOVWF  2A
0953:  MOVF   78,W
0954:  MOVWF  29
0955:  MOVF   77,W
0956:  MOVWF  28
0957:  MOVF   2B,W
0958:  MOVWF  30
0959:  MOVF   2A,W
095A:  MOVWF  2F
095B:  MOVF   29,W
095C:  MOVWF  2E
095D:  MOVF   28,W
095E:  MOVWF  2D
095F:  MOVF   23,W
0960:  MOVWF  34
0961:  MOVF   22,W
0962:  MOVWF  33
0963:  MOVF   21,W
0964:  MOVWF  32
0965:  MOVF   20,W
0966:  MOVWF  31
0967:  BCF    0A.3
0968:  BCF    03.5
0969:  CALL   1EB
096A:  BSF    0A.3
096B:  MOVF   7A,W
096C:  MOVWF  7E
096D:  MOVF   79,W
096E:  MOVWF  7D
096F:  MOVF   78,W
0970:  MOVWF  7C
0971:  MOVF   77,W
0972:  MOVWF  7B
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
0973:  BSF    03.5
0974:  CLRF   29
0975:  MOVLW  6D
0976:  MOVWF  28
0977:  MOVF   28,W
0978:  MOVWF  04
0979:  BCF    03.7
097A:  BTFSC  29.0
097B:  BSF    03.7
097C:  MOVLW  7E
097D:  SUBWF  00,W
097E:  MOVWF  75
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
097F:  BTFSS  75.7
0980:  GOTO   196
....................          r = -(float32)-n; 
0981:  MOVF   75,W
0982:  SUBLW  00
0983:  CLRF   2B
0984:  MOVWF  2A
0985:  BTFSC  2A.7
0986:  DECF   2B,F
0987:  BCF    0A.3
0988:  BCF    03.5
0989:  CALL   764
098A:  BSF    0A.3
098B:  MOVF   77,W
098C:  BSF    03.5
098D:  MOVWF  20
098E:  MOVF   78,W
098F:  XORLW  80
0990:  MOVWF  21
0991:  MOVF   79,W
0992:  MOVWF  22
0993:  MOVF   7A,W
0994:  MOVWF  23
....................       else 
0995:  GOTO   1A8
....................          r = (float32)n; 
0996:  CLRF   2B
0997:  MOVF   75,W
0998:  MOVWF  2A
0999:  BTFSC  2A.7
099A:  DECF   2B,F
099B:  BCF    0A.3
099C:  BCF    03.5
099D:  CALL   764
099E:  BSF    0A.3
099F:  MOVF   7A,W
09A0:  BSF    03.5
09A1:  MOVWF  23
09A2:  MOVF   79,W
09A3:  MOVWF  22
09A4:  MOVF   78,W
09A5:  MOVWF  21
09A6:  MOVF   77,W
09A7:  MOVWF  20
....................  
....................       res += r*LN2; 
09A8:  MOVF   23,W
09A9:  MOVWF  37
09AA:  MOVF   22,W
09AB:  MOVWF  36
09AC:  MOVF   21,W
09AD:  MOVWF  35
09AE:  MOVF   20,W
09AF:  MOVWF  34
09B0:  MOVLW  18
09B1:  MOVWF  3B
09B2:  MOVLW  72
09B3:  MOVWF  3A
09B4:  MOVLW  31
09B5:  MOVWF  39
09B6:  MOVLW  7E
09B7:  MOVWF  38
09B8:  BCF    0A.3
09B9:  BCF    03.5
09BA:  CALL   2D8
09BB:  BSF    0A.3
09BC:  BCF    03.1
09BD:  MOVF   7E,W
09BE:  BSF    03.5
09BF:  MOVWF  3B
09C0:  MOVF   7D,W
09C1:  MOVWF  3A
09C2:  MOVF   7C,W
09C3:  MOVWF  39
09C4:  MOVF   7B,W
09C5:  MOVWF  38
09C6:  MOVF   7A,W
09C7:  MOVWF  3F
09C8:  MOVF   79,W
09C9:  MOVWF  3E
09CA:  MOVF   78,W
09CB:  MOVWF  3D
09CC:  MOVF   77,W
09CD:  MOVWF  3C
09CE:  BCF    0A.3
09CF:  BCF    03.5
09D0:  CALL   34F
09D1:  BSF    0A.3
09D2:  MOVF   7A,W
09D3:  MOVWF  7E
09D4:  MOVF   79,W
09D5:  MOVWF  7D
09D6:  MOVF   78,W
09D7:  MOVWF  7C
09D8:  MOVF   77,W
09D9:  MOVWF  7B
....................    } 
....................  
....................    else 
09DA:  GOTO   1DF
....................       res = 0.0; 
09DB:  CLRF   7E
09DC:  CLRF   7D
09DD:  CLRF   7C
09DE:  CLRF   7B
....................  
....................    return(res); 
09DF:  MOVF   7B,W
09E0:  MOVWF  77
09E1:  MOVF   7C,W
09E2:  MOVWF  78
09E3:  MOVF   7D,W
09E4:  MOVWF  79
09E5:  MOVF   7E,W
09E6:  MOVWF  7A
.................... } 
09E7:  RETURN
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
0C1F:  MOVF   64,W
0C20:  BSF    03.5
0C21:  MOVWF  37
0C22:  BCF    03.5
0C23:  MOVF   63,W
0C24:  BSF    03.5
0C25:  MOVWF  36
0C26:  BCF    03.5
0C27:  MOVF   62,W
0C28:  BSF    03.5
0C29:  MOVWF  35
0C2A:  BCF    03.5
0C2B:  MOVF   61,W
0C2C:  BSF    03.5
0C2D:  MOVWF  34
0C2E:  CLRF   3B
0C2F:  CLRF   3A
0C30:  CLRF   39
0C31:  CLRF   38
0C32:  BCF    0A.3
0C33:  BCF    03.5
0C34:  CALL   1AA
0C35:  BSF    0A.3
0C36:  BTFSS  03.0
0C37:  GOTO   53A
0C38:  MOVF   68,W
0C39:  MOVWF  6C
0C3A:  MOVF   67,W
0C3B:  MOVWF  6B
0C3C:  MOVF   66,W
0C3D:  MOVWF  6A
0C3E:  MOVF   65,W
0C3F:  MOVWF  69
0C40:  CLRF   70
0C41:  CLRF   6F
0C42:  CLRF   6E
0C43:  MOVLW  7F
0C44:  MOVWF  6D
0C45:  BCF    0A.3
0C46:  CALL   660
0C47:  BSF    0A.3
0C48:  MOVF   7A,W
0C49:  MOVWF  6C
0C4A:  MOVF   79,W
0C4B:  MOVWF  6B
0C4C:  MOVF   78,W
0C4D:  MOVWF  6A
0C4E:  MOVF   77,W
0C4F:  MOVWF  69
0C50:  MOVF   6C,W
0C51:  BSF    03.5
0C52:  MOVWF  37
0C53:  BCF    03.5
0C54:  MOVF   6B,W
0C55:  BSF    03.5
0C56:  MOVWF  36
0C57:  BCF    03.5
0C58:  MOVF   6A,W
0C59:  BSF    03.5
0C5A:  MOVWF  35
0C5B:  BCF    03.5
0C5C:  MOVF   69,W
0C5D:  BSF    03.5
0C5E:  MOVWF  34
0C5F:  CLRF   3B
0C60:  CLRF   3A
0C61:  CLRF   39
0C62:  CLRF   38
0C63:  BCF    0A.3
0C64:  BCF    03.5
0C65:  CALL   1AA
0C66:  BSF    0A.3
0C67:  BTFSS  03.2
0C68:  GOTO   53A
....................       if(fmod(y, 2) == 0) { 
0C69:  MOVF   68,W
0C6A:  MOVWF  6C
0C6B:  MOVF   67,W
0C6C:  MOVWF  6B
0C6D:  MOVF   66,W
0C6E:  MOVWF  6A
0C6F:  MOVF   65,W
0C70:  MOVWF  69
0C71:  CLRF   70
0C72:  CLRF   6F
0C73:  CLRF   6E
0C74:  MOVLW  80
0C75:  MOVWF  6D
0C76:  BCF    0A.3
0C77:  CALL   660
0C78:  BSF    0A.3
0C79:  MOVF   7A,W
0C7A:  MOVWF  6C
0C7B:  MOVF   79,W
0C7C:  MOVWF  6B
0C7D:  MOVF   78,W
0C7E:  MOVWF  6A
0C7F:  MOVF   77,W
0C80:  MOVWF  69
0C81:  MOVF   6C,W
0C82:  BSF    03.5
0C83:  MOVWF  37
0C84:  BCF    03.5
0C85:  MOVF   6B,W
0C86:  BSF    03.5
0C87:  MOVWF  36
0C88:  BCF    03.5
0C89:  MOVF   6A,W
0C8A:  BSF    03.5
0C8B:  MOVWF  35
0C8C:  BCF    03.5
0C8D:  MOVF   69,W
0C8E:  BSF    03.5
0C8F:  MOVWF  34
0C90:  CLRF   3B
0C91:  CLRF   3A
0C92:  CLRF   39
0C93:  CLRF   38
0C94:  BCF    0A.3
0C95:  BCF    03.5
0C96:  CALL   1AA
0C97:  BSF    0A.3
0C98:  BTFSS  03.2
0C99:  GOTO   4E9
....................          return (exp(log(-x) * y)); 
0C9A:  MOVF   61,W
0C9B:  MOVWF  69
0C9C:  MOVF   62,W
0C9D:  XORLW  80
0C9E:  MOVWF  6A
0C9F:  MOVF   63,W
0CA0:  MOVWF  6B
0CA1:  MOVF   64,W
0CA2:  MOVWF  6C
0CA3:  MOVWF  70
0CA4:  MOVF   6B,W
0CA5:  MOVWF  6F
0CA6:  MOVF   6A,W
0CA7:  MOVWF  6E
0CA8:  MOVF   69,W
0CA9:  MOVWF  6D
0CAA:  CALL   000
0CAB:  MOVF   7A,W
0CAC:  MOVWF  6C
0CAD:  MOVF   79,W
0CAE:  MOVWF  6B
0CAF:  MOVF   78,W
0CB0:  MOVWF  6A
0CB1:  MOVF   77,W
0CB2:  MOVWF  69
0CB3:  MOVF   6C,W
0CB4:  BSF    03.5
0CB5:  MOVWF  37
0CB6:  BCF    03.5
0CB7:  MOVF   6B,W
0CB8:  BSF    03.5
0CB9:  MOVWF  36
0CBA:  BCF    03.5
0CBB:  MOVF   6A,W
0CBC:  BSF    03.5
0CBD:  MOVWF  35
0CBE:  BCF    03.5
0CBF:  MOVF   69,W
0CC0:  BSF    03.5
0CC1:  MOVWF  34
0CC2:  BCF    03.5
0CC3:  MOVF   68,W
0CC4:  BSF    03.5
0CC5:  MOVWF  3B
0CC6:  BCF    03.5
0CC7:  MOVF   67,W
0CC8:  BSF    03.5
0CC9:  MOVWF  3A
0CCA:  BCF    03.5
0CCB:  MOVF   66,W
0CCC:  BSF    03.5
0CCD:  MOVWF  39
0CCE:  BCF    03.5
0CCF:  MOVF   65,W
0CD0:  BSF    03.5
0CD1:  MOVWF  38
0CD2:  BCF    0A.3
0CD3:  BCF    03.5
0CD4:  CALL   2D8
0CD5:  BSF    0A.3
0CD6:  MOVF   7A,W
0CD7:  MOVWF  6C
0CD8:  MOVF   79,W
0CD9:  MOVWF  6B
0CDA:  MOVF   78,W
0CDB:  MOVWF  6A
0CDC:  MOVF   77,W
0CDD:  MOVWF  69
0CDE:  MOVF   6C,W
0CDF:  MOVWF  70
0CE0:  MOVF   6B,W
0CE1:  MOVWF  6F
0CE2:  MOVF   6A,W
0CE3:  MOVWF  6E
0CE4:  MOVF   69,W
0CE5:  MOVWF  6D
0CE6:  CALL   1E8
0CE7:  GOTO   603
....................       } else { 
0CE8:  GOTO   539
....................          return (-exp(log(-x) * y)); 
0CE9:  MOVF   61,W
0CEA:  MOVWF  69
0CEB:  MOVF   62,W
0CEC:  XORLW  80
0CED:  MOVWF  6A
0CEE:  MOVF   63,W
0CEF:  MOVWF  6B
0CF0:  MOVF   64,W
0CF1:  MOVWF  6C
0CF2:  MOVWF  70
0CF3:  MOVF   6B,W
0CF4:  MOVWF  6F
0CF5:  MOVF   6A,W
0CF6:  MOVWF  6E
0CF7:  MOVF   69,W
0CF8:  MOVWF  6D
0CF9:  CALL   000
0CFA:  MOVF   7A,W
0CFB:  MOVWF  6C
0CFC:  MOVF   79,W
0CFD:  MOVWF  6B
0CFE:  MOVF   78,W
0CFF:  MOVWF  6A
0D00:  MOVF   77,W
0D01:  MOVWF  69
0D02:  MOVF   6C,W
0D03:  BSF    03.5
0D04:  MOVWF  37
0D05:  BCF    03.5
0D06:  MOVF   6B,W
0D07:  BSF    03.5
0D08:  MOVWF  36
0D09:  BCF    03.5
0D0A:  MOVF   6A,W
0D0B:  BSF    03.5
0D0C:  MOVWF  35
0D0D:  BCF    03.5
0D0E:  MOVF   69,W
0D0F:  BSF    03.5
0D10:  MOVWF  34
0D11:  BCF    03.5
0D12:  MOVF   68,W
0D13:  BSF    03.5
0D14:  MOVWF  3B
0D15:  BCF    03.5
0D16:  MOVF   67,W
0D17:  BSF    03.5
0D18:  MOVWF  3A
0D19:  BCF    03.5
0D1A:  MOVF   66,W
0D1B:  BSF    03.5
0D1C:  MOVWF  39
0D1D:  BCF    03.5
0D1E:  MOVF   65,W
0D1F:  BSF    03.5
0D20:  MOVWF  38
0D21:  BCF    0A.3
0D22:  BCF    03.5
0D23:  CALL   2D8
0D24:  BSF    0A.3
0D25:  MOVF   7A,W
0D26:  MOVWF  6C
0D27:  MOVF   79,W
0D28:  MOVWF  6B
0D29:  MOVF   78,W
0D2A:  MOVWF  6A
0D2B:  MOVF   77,W
0D2C:  MOVWF  69
0D2D:  MOVF   6C,W
0D2E:  MOVWF  70
0D2F:  MOVF   6B,W
0D30:  MOVWF  6F
0D31:  MOVF   6A,W
0D32:  MOVWF  6E
0D33:  MOVF   69,W
0D34:  MOVWF  6D
0D35:  CALL   1E8
0D36:  MOVLW  80
0D37:  XORWF  78,F
0D38:  GOTO   603
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
0D39:  GOTO   603
0D3A:  MOVF   64,W
0D3B:  BSF    03.5
0D3C:  MOVWF  37
0D3D:  BCF    03.5
0D3E:  MOVF   63,W
0D3F:  BSF    03.5
0D40:  MOVWF  36
0D41:  BCF    03.5
0D42:  MOVF   62,W
0D43:  BSF    03.5
0D44:  MOVWF  35
0D45:  BCF    03.5
0D46:  MOVF   61,W
0D47:  BSF    03.5
0D48:  MOVWF  34
0D49:  CLRF   3B
0D4A:  CLRF   3A
0D4B:  CLRF   39
0D4C:  CLRF   38
0D4D:  BCF    0A.3
0D4E:  BCF    03.5
0D4F:  CALL   1AA
0D50:  BSF    0A.3
0D51:  BTFSS  03.0
0D52:  GOTO   58A
0D53:  MOVF   68,W
0D54:  MOVWF  6C
0D55:  MOVF   67,W
0D56:  MOVWF  6B
0D57:  MOVF   66,W
0D58:  MOVWF  6A
0D59:  MOVF   65,W
0D5A:  MOVWF  69
0D5B:  CLRF   70
0D5C:  CLRF   6F
0D5D:  CLRF   6E
0D5E:  MOVLW  7F
0D5F:  MOVWF  6D
0D60:  BCF    0A.3
0D61:  CALL   660
0D62:  BSF    0A.3
0D63:  MOVF   7A,W
0D64:  MOVWF  6C
0D65:  MOVF   79,W
0D66:  MOVWF  6B
0D67:  MOVF   78,W
0D68:  MOVWF  6A
0D69:  MOVF   77,W
0D6A:  MOVWF  69
0D6B:  MOVF   6C,W
0D6C:  BSF    03.5
0D6D:  MOVWF  37
0D6E:  BCF    03.5
0D6F:  MOVF   6B,W
0D70:  BSF    03.5
0D71:  MOVWF  36
0D72:  BCF    03.5
0D73:  MOVF   6A,W
0D74:  BSF    03.5
0D75:  MOVWF  35
0D76:  BCF    03.5
0D77:  MOVF   69,W
0D78:  BSF    03.5
0D79:  MOVWF  34
0D7A:  CLRF   3B
0D7B:  CLRF   3A
0D7C:  CLRF   39
0D7D:  CLRF   38
0D7E:  BCF    0A.3
0D7F:  BCF    03.5
0D80:  CALL   1AA
0D81:  BSF    0A.3
0D82:  BTFSC  03.2
0D83:  GOTO   58A
....................       return 0; 
0D84:  CLRF   77
0D85:  CLRF   78
0D86:  CLRF   79
0D87:  CLRF   7A
0D88:  GOTO   603
....................    } else { 
0D89:  GOTO   603
....................       if(x != 0 || 0 >= y) { 
0D8A:  MOVF   64,W
0D8B:  BSF    03.5
0D8C:  MOVWF  37
0D8D:  BCF    03.5
0D8E:  MOVF   63,W
0D8F:  BSF    03.5
0D90:  MOVWF  36
0D91:  BCF    03.5
0D92:  MOVF   62,W
0D93:  BSF    03.5
0D94:  MOVWF  35
0D95:  BCF    03.5
0D96:  MOVF   61,W
0D97:  BSF    03.5
0D98:  MOVWF  34
0D99:  CLRF   3B
0D9A:  CLRF   3A
0D9B:  CLRF   39
0D9C:  CLRF   38
0D9D:  BCF    0A.3
0D9E:  BCF    03.5
0D9F:  CALL   1AA
0DA0:  BSF    0A.3
0DA1:  BTFSS  03.2
0DA2:  GOTO   5BE
0DA3:  MOVF   68,W
0DA4:  BSF    03.5
0DA5:  MOVWF  37
0DA6:  BCF    03.5
0DA7:  MOVF   67,W
0DA8:  BSF    03.5
0DA9:  MOVWF  36
0DAA:  BCF    03.5
0DAB:  MOVF   66,W
0DAC:  BSF    03.5
0DAD:  MOVWF  35
0DAE:  BCF    03.5
0DAF:  MOVF   65,W
0DB0:  BSF    03.5
0DB1:  MOVWF  34
0DB2:  CLRF   3B
0DB3:  CLRF   3A
0DB4:  CLRF   39
0DB5:  CLRF   38
0DB6:  BCF    0A.3
0DB7:  BCF    03.5
0DB8:  CALL   1AA
0DB9:  BSF    0A.3
0DBA:  BTFSC  03.0
0DBB:  GOTO   5BE
0DBC:  BTFSS  03.2
0DBD:  GOTO   603
....................          return (exp(log(x) * y)); 
0DBE:  MOVF   64,W
0DBF:  MOVWF  70
0DC0:  MOVF   63,W
0DC1:  MOVWF  6F
0DC2:  MOVF   62,W
0DC3:  MOVWF  6E
0DC4:  MOVF   61,W
0DC5:  MOVWF  6D
0DC6:  CALL   000
0DC7:  MOVF   7A,W
0DC8:  MOVWF  6C
0DC9:  MOVF   79,W
0DCA:  MOVWF  6B
0DCB:  MOVF   78,W
0DCC:  MOVWF  6A
0DCD:  MOVF   77,W
0DCE:  MOVWF  69
0DCF:  MOVF   6C,W
0DD0:  BSF    03.5
0DD1:  MOVWF  37
0DD2:  BCF    03.5
0DD3:  MOVF   6B,W
0DD4:  BSF    03.5
0DD5:  MOVWF  36
0DD6:  BCF    03.5
0DD7:  MOVF   6A,W
0DD8:  BSF    03.5
0DD9:  MOVWF  35
0DDA:  BCF    03.5
0DDB:  MOVF   69,W
0DDC:  BSF    03.5
0DDD:  MOVWF  34
0DDE:  BCF    03.5
0DDF:  MOVF   68,W
0DE0:  BSF    03.5
0DE1:  MOVWF  3B
0DE2:  BCF    03.5
0DE3:  MOVF   67,W
0DE4:  BSF    03.5
0DE5:  MOVWF  3A
0DE6:  BCF    03.5
0DE7:  MOVF   66,W
0DE8:  BSF    03.5
0DE9:  MOVWF  39
0DEA:  BCF    03.5
0DEB:  MOVF   65,W
0DEC:  BSF    03.5
0DED:  MOVWF  38
0DEE:  BCF    0A.3
0DEF:  BCF    03.5
0DF0:  CALL   2D8
0DF1:  BSF    0A.3
0DF2:  MOVF   7A,W
0DF3:  MOVWF  6C
0DF4:  MOVF   79,W
0DF5:  MOVWF  6B
0DF6:  MOVF   78,W
0DF7:  MOVWF  6A
0DF8:  MOVF   77,W
0DF9:  MOVWF  69
0DFA:  MOVF   6C,W
0DFB:  MOVWF  70
0DFC:  MOVF   6B,W
0DFD:  MOVWF  6F
0DFE:  MOVF   6A,W
0DFF:  MOVWF  6E
0E00:  MOVF   69,W
0E01:  MOVWF  6D
0E02:  CALL   1E8
....................       } 
....................    } 
.................... } 
0E03:  RETURN
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES HS //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin disabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //No brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brownout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #use delay(clock=20000000) 
0177:  MOVLW  63
0178:  MOVWF  04
0179:  BCF    03.7
017A:  MOVF   00,W
017B:  BTFSC  03.2
017C:  GOTO   18A
017D:  MOVLW  06
017E:  MOVWF  78
017F:  CLRF   77
0180:  DECFSZ 77,F
0181:  GOTO   180
0182:  DECFSZ 78,F
0183:  GOTO   17F
0184:  MOVLW  7B
0185:  MOVWF  77
0186:  DECFSZ 77,F
0187:  GOTO   186
0188:  DECFSZ 00,F
0189:  GOTO   17D
018A:  RETURN
.................... // Config the serial port hardware on the PIC 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define DISPLAY_ADDRESS 0xB4 
.................... #define REGISTER_SIZE  8    
.................... #define DISPLAY_CMD_SEND_VALUE 2 
.................... #define DISPLAY_CMD_SEND_LONG_TEXT 5 
.................... #define DISPLAY_CMD_CLS 6 
.................... #define DISPLAY_CMD_SETPOS 8 
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... // setup the I2C port 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
07E2:  BCF    14.7
07E3:  BCF    0C.3
07E4:  MOVF   69,W
07E5:  MOVWF  13
07E6:  MOVLW  02
07E7:  BTFSC  14.7
07E8:  GOTO   7F0
07E9:  BTFSS  0C.3
07EA:  GOTO   7E9
07EB:  MOVLW  00
07EC:  BSF    03.5
07ED:  BTFSC  11.6
07EE:  MOVLW  01
07EF:  BCF    03.5
07F0:  MOVWF  78
07F1:  RETURN
....................  
.................... int1 selectPush =0,selectUsed=1; 
.................... int1 exitPush =0,exitUsed =1; 
.................... int1 leftPush =0,leftUsed =1; 
.................... int1 rightPush =0,rightUsed =1; 
.................... //move from main 
.................... int menu = 1; 
.................... int1 selectmenu = 0; 
.................... int16 analog0; 
.................... int16 REFERENCE_VALUE = 525; 
.................... int16 power = 0; 
....................  
.................... #INT_RB 
.................... void rb_isr(void) { 
....................    if(input(PIN_B3)==0 && selectUsed==0) // input(PIN_B3) == 0 is touching 
00B9:  BSF    03.5
00BA:  BSF    06.3
00BB:  BCF    03.5
00BC:  BTFSC  06.3
00BD:  GOTO   0C2
00BE:  BTFSC  28.1
00BF:  GOTO   0C2
....................    { 
....................          selectPush = 1; 
00C0:  BSF    28.0
....................    } 
....................    else if(input(PIN_B3)==1 && selectUsed==1) 
00C1:  GOTO   104
00C2:  BSF    03.5
00C3:  BSF    06.3
00C4:  BCF    03.5
00C5:  BTFSS  06.3
00C6:  GOTO   0CC
00C7:  BTFSS  28.1
00C8:  GOTO   0CC
....................    {       
....................          selectPush = 0; 
00C9:  BCF    28.0
....................          selectUsed = 0; 
00CA:  BCF    28.1
....................    } 
....................     
....................    else if(input(PIN_B2)==0 && exitUsed==0) // input(PIN_B3) == 0 is touching 
00CB:  GOTO   104
00CC:  BSF    03.5
00CD:  BSF    06.2
00CE:  BCF    03.5
00CF:  BTFSC  06.2
00D0:  GOTO   0D5
00D1:  BTFSC  28.3
00D2:  GOTO   0D5
....................    { 
....................          exitPush = 1; 
00D3:  BSF    28.2
....................    } 
....................    else if(input(PIN_B2)==1 && exitUsed==1) 
00D4:  GOTO   104
00D5:  BSF    03.5
00D6:  BSF    06.2
00D7:  BCF    03.5
00D8:  BTFSS  06.2
00D9:  GOTO   0DF
00DA:  BTFSS  28.3
00DB:  GOTO   0DF
....................    {       
....................          exitPush = 0; 
00DC:  BCF    28.2
....................          exitUsed = 0; 
00DD:  BCF    28.3
....................    } 
....................    else if(input(PIN_B1)==0 && leftUsed==0) // input(PIN_B3) == 0 is touching 
00DE:  GOTO   104
00DF:  BSF    03.5
00E0:  BSF    06.1
00E1:  BCF    03.5
00E2:  BTFSC  06.1
00E3:  GOTO   0E8
00E4:  BTFSC  28.5
00E5:  GOTO   0E8
....................    { 
....................          leftPush = 1; 
00E6:  BSF    28.4
....................    } 
....................    else if(input(PIN_B1)==1 && leftUsed==1) 
00E7:  GOTO   104
00E8:  BSF    03.5
00E9:  BSF    06.1
00EA:  BCF    03.5
00EB:  BTFSS  06.1
00EC:  GOTO   0F2
00ED:  BTFSS  28.5
00EE:  GOTO   0F2
....................    {       
....................          leftPush = 0; 
00EF:  BCF    28.4
....................          leftUsed = 0; 
00F0:  BCF    28.5
....................    } 
....................    else if(input(PIN_B4)==0 && rightUsed==0) // input(PIN_B3) == 0 is touching 
00F1:  GOTO   104
00F2:  BSF    03.5
00F3:  BSF    06.4
00F4:  BCF    03.5
00F5:  BTFSC  06.4
00F6:  GOTO   0FB
00F7:  BTFSC  28.7
00F8:  GOTO   0FB
....................    { 
....................          rightPush = 1; 
00F9:  BSF    28.6
....................    } 
....................    else if(input(PIN_B4)==1 && rightUsed==1) 
00FA:  GOTO   104
00FB:  BSF    03.5
00FC:  BSF    06.4
00FD:  BCF    03.5
00FE:  BTFSS  06.4
00FF:  GOTO   104
0100:  BTFSS  28.7
0101:  GOTO   104
....................    {       
....................          rightPush = 0; 
0102:  BCF    28.6
....................          rightUsed = 0; 
0103:  BCF    28.7
....................    } 
....................    //if you wanna check the other button you have to write in this function with input(parameter); 
.................... } 
....................  
....................  
0104:  BCF    0B.0
0105:  BCF    0A.3
0106:  BCF    0A.4
0107:  GOTO   01B
.................... void displayLongText(char* text); 
.................... void displayValue(int16 value[]); 
.................... void clearDisplay(); 
.................... void setDisplayPos(int pos); 
.................... int1 checkselect(int1 menu); 
.................... int1 checkexit(int1 menu); 
.................... int checkleft(int menu); 
.................... int checkright(int menu); 
.................... int16 calibrate(int16 analog); 
.................... int16 resetcalibrate(); 
.................... int16 amperecal(int16 analog); 
.................... void powercal(int16 ampere); 
.................... void menu4(); 
.................... void menu5(); 
....................  
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!// This is the main device register 
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!int deviceRegister[REGISTER_SIZE]={0}; // device register 
....................  
....................  
....................  
....................  
.................... void main() { 
11F8:  BSF    03.5
11F9:  BSF    03.6
11FA:  BSF    07.3
11FB:  MOVLW  08
11FC:  BCF    03.6
11FD:  MOVWF  19
11FE:  MOVLW  02
11FF:  MOVWF  1A
1200:  MOVLW  A6
1201:  MOVWF  18
1202:  MOVLW  90
1203:  BCF    03.5
1204:  MOVWF  18
1205:  MOVLW  FF
1206:  MOVWF  27
1207:  BSF    27.3
1208:  MOVF   27,W
1209:  BSF    03.5
120A:  MOVWF  07
120B:  BCF    03.5
120C:  BSF    27.4
120D:  MOVF   27,W
120E:  BSF    03.5
120F:  MOVWF  07
1210:  MOVLW  31
1211:  MOVWF  13
1212:  MOVLW  29
1213:  BCF    03.5
1214:  MOVWF  14
1215:  BSF    03.5
1216:  BSF    14.7
1217:  BCF    14.6
1218:  MOVLW  FF
1219:  MOVWF  13
121A:  MOVLW  28
121B:  BCF    03.5
121C:  MOVWF  14
121D:  BCF    28.0
121E:  BSF    28.1
121F:  BCF    28.2
1220:  BSF    28.3
1221:  BCF    28.4
1222:  BSF    28.5
1223:  BCF    28.6
1224:  BSF    28.7
1225:  MOVLW  01
1226:  MOVWF  29
1227:  BCF    2A.0
1228:  MOVLW  02
1229:  MOVWF  2E
122A:  MOVLW  0D
122B:  MOVWF  2D
122C:  CLRF   30
122D:  CLRF   2F
122E:  BSF    03.5
122F:  BSF    03.6
1230:  MOVF   09,W
1231:  ANDLW  C0
1232:  MOVWF  09
1233:  BCF    03.6
1234:  BCF    1F.4
1235:  BCF    1F.5
1236:  MOVLW  00
1237:  BSF    03.6
1238:  MOVWF  08
1239:  BCF    03.5
123A:  CLRF   07
123B:  CLRF   08
123C:  CLRF   09
....................     
....................      
....................   
....................      
....................  
....................  
....................     int16 ampere; 
....................     
....................     
....................     enable_interrupts(INT_RB3);    // generate interrupt when B7 changes 
123D:  BCF    03.6
123E:  BSF    0B.3
123F:  BSF    03.5
1240:  BSF    16.3
....................     enable_interrupts(INT_RB2); 
1241:  BCF    03.5
1242:  BSF    0B.3
1243:  BSF    03.5
1244:  BSF    16.2
....................     enable_interrupts(INT_RB1); 
1245:  BCF    03.5
1246:  BSF    0B.3
1247:  BSF    03.5
1248:  BSF    16.1
....................     enable_interrupts(INT_RB4); 
1249:  BCF    03.5
124A:  BSF    0B.3
124B:  BSF    03.5
124C:  BSF    16.4
....................     enable_interrupts(GLOBAL); 
124D:  MOVLW  C0
124E:  BCF    03.5
124F:  IORWF  0B,F
....................      
....................     setup_adc_ports(sAN1); // setup PIN A0 as analog input 
1250:  BSF    03.5
1251:  BSF    03.6
1252:  MOVF   09,W
1253:  ANDLW  C0
1254:  MOVWF  09
1255:  BCF    03.6
1256:  BCF    1F.4
1257:  BCF    1F.5
1258:  MOVLW  02
1259:  BSF    03.6
125A:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
125B:  BCF    03.5
125C:  BCF    03.6
125D:  BSF    1F.6
125E:  BSF    1F.7
125F:  BSF    03.5
1260:  BSF    1F.7
1261:  BCF    03.5
1262:  BSF    1F.0
....................   
....................     printf("Sampling:\r\n"); 
1263:  MOVLW  08
1264:  BSF    03.6
1265:  MOVWF  0D
1266:  MOVLW  01
1267:  MOVWF  0F
1268:  BCF    0A.4
1269:  BCF    03.6
126A:  GOTO   128
126B:  BSF    0A.4
....................     set_adc_channel( 1 ); // set the ADC channel to read  
126C:  MOVLW  04
126D:  MOVWF  78
126E:  MOVF   1F,W
126F:  ANDLW  C3
1270:  IORWF  78,W
1271:  MOVWF  1F
....................     delay_us(100); // wait for the sensor reading to finish 
1272:  MOVLW  A6
1273:  MOVWF  77
1274:  DECFSZ 77,F
1275:  GOTO   274
1276:  NOP
....................   
....................     while (1) { 
....................        analog0 = read_adc(); 
1277:  BSF    1F.1
1278:  BTFSC  1F.1
1279:  GOTO   278
127A:  BSF    03.5
127B:  MOVF   1E,W
127C:  BCF    03.5
127D:  MOVWF  2B
127E:  MOVF   1E,W
127F:  MOVWF  2C
....................         
....................        delay_ms(100); //100 
1280:  MOVLW  64
1281:  MOVWF  63
1282:  BCF    0A.4
1283:  CALL   177
1284:  BSF    0A.4
....................        
....................         
....................         
....................        if(REFERENCE_VALUE>525){ 
1285:  MOVF   2E,W
1286:  SUBLW  01
1287:  BTFSC  03.0
1288:  GOTO   2A0
1289:  XORLW  FF
128A:  BTFSS  03.2
128B:  GOTO   290
128C:  MOVF   2D,W
128D:  SUBLW  0D
128E:  BTFSC  03.0
128F:  GOTO   2A0
....................          analog0 = (analog0-(REFERENCE_VALUE-525)); 
1290:  MOVLW  0D
1291:  SUBWF  2D,W
1292:  MOVWF  77
1293:  MOVF   2E,W
1294:  MOVWF  7A
1295:  MOVLW  02
1296:  BTFSS  03.0
1297:  MOVLW  03
1298:  SUBWF  7A,F
1299:  MOVF   77,W
129A:  SUBWF  2B,F
129B:  MOVF   7A,W
129C:  BTFSS  03.0
129D:  INCFSZ 7A,W
129E:  SUBWF  2C,F
....................        } 
....................        else if(REFERENCE_VALUE<525){ 
129F:  GOTO   2B9
12A0:  MOVF   2E,W
12A1:  SUBLW  02
12A2:  BTFSS  03.0
12A3:  GOTO   2B9
12A4:  BTFSS  03.2
12A5:  GOTO   2AA
12A6:  MOVF   2D,W
12A7:  SUBLW  0C
12A8:  BTFSS  03.0
12A9:  GOTO   2B9
....................          analog0 = (analog0+(525-REFERENCE_VALUE));   
12AA:  MOVF   2D,W
12AB:  SUBLW  0D
12AC:  MOVWF  77
12AD:  MOVLW  02
12AE:  MOVWF  7A
12AF:  MOVF   2E,W
12B0:  BTFSS  03.0
12B1:  INCFSZ 2E,W
12B2:  SUBWF  7A,F
12B3:  MOVF   77,W
12B4:  ADDWF  2B,F
12B5:  MOVF   7A,W
12B6:  BTFSC  03.0
12B7:  INCFSZ 7A,W
12B8:  ADDWF  2C,F
....................        }  
....................        //decrese or increse analog0 to fit in graph that we solve because we solve at 0,525 at 0 mA 
....................         
....................      
....................        ampere = amperecal(analog0); 
12B9:  MOVF   2C,W
12BA:  MOVWF  42
12BB:  MOVF   2B,W
12BC:  MOVWF  41
12BD:  BCF    0A.4
12BE:  BSF    0A.3
12BF:  GOTO   604
12C0:  BSF    0A.4
12C1:  BCF    0A.3
12C2:  MOVF   79,W
12C3:  MOVWF  32
12C4:  MOVF   78,W
12C5:  MOVWF  31
....................        powercal(ampere); 
12C6:  MOVF   32,W
12C7:  MOVWF  42
12C8:  MOVF   31,W
12C9:  MOVWF  41
12CA:  BCF    0A.4
12CB:  GOTO   78B
12CC:  BSF    0A.4
....................         
....................        printf("Sensor value = %Lu\r\n",analog0 ); 
12CD:  MOVLW  0E
12CE:  BSF    03.6
12CF:  MOVWF  0D
12D0:  MOVLW  01
12D1:  MOVWF  0F
12D2:  BCF    03.0
12D3:  MOVLW  0F
12D4:  BCF    03.6
12D5:  MOVWF  41
12D6:  BCF    0A.4
12D7:  BSF    0A.3
12D8:  CALL   768
12D9:  BSF    0A.4
12DA:  BCF    0A.3
12DB:  MOVLW  10
12DC:  MOVWF  04
12DD:  MOVF   2C,W
12DE:  MOVWF  42
12DF:  MOVF   2B,W
12E0:  MOVWF  41
12E1:  CALL   000
12E2:  MOVLW  0D
12E3:  BTFSS  0C.4
12E4:  GOTO   2E3
12E5:  MOVWF  19
12E6:  MOVLW  0A
12E7:  BTFSS  0C.4
12E8:  GOTO   2E7
12E9:  MOVWF  19
....................        printf("AMPERE = %Lu\r\n",ampere );  //sent to computer 
12EA:  MOVLW  19
12EB:  BSF    03.6
12EC:  MOVWF  0D
12ED:  MOVLW  01
12EE:  MOVWF  0F
12EF:  BCF    03.0
12F0:  MOVLW  09
12F1:  BCF    03.6
12F2:  MOVWF  41
12F3:  BCF    0A.4
12F4:  BSF    0A.3
12F5:  CALL   768
12F6:  BSF    0A.4
12F7:  BCF    0A.3
12F8:  MOVLW  10
12F9:  MOVWF  04
12FA:  MOVF   32,W
12FB:  MOVWF  42
12FC:  MOVF   31,W
12FD:  MOVWF  41
12FE:  CALL   000
12FF:  MOVLW  0D
1300:  BTFSS  0C.4
1301:  GOTO   300
1302:  MOVWF  19
1303:  MOVLW  0A
1304:  BTFSS  0C.4
1305:  GOTO   304
1306:  MOVWF  19
....................        printf("POWER = %Lu\r\n",power ); 
1307:  MOVLW  21
1308:  BSF    03.6
1309:  MOVWF  0D
130A:  MOVLW  01
130B:  MOVWF  0F
130C:  BCF    03.0
130D:  MOVLW  08
130E:  BCF    03.6
130F:  MOVWF  41
1310:  BCF    0A.4
1311:  BSF    0A.3
1312:  CALL   768
1313:  BSF    0A.4
1314:  BCF    0A.3
1315:  MOVLW  10
1316:  MOVWF  04
1317:  MOVF   30,W
1318:  MOVWF  42
1319:  MOVF   2F,W
131A:  MOVWF  41
131B:  CALL   000
131C:  MOVLW  0D
131D:  BTFSS  0C.4
131E:  GOTO   31D
131F:  MOVWF  19
1320:  MOVLW  0A
1321:  BTFSS  0C.4
1322:  GOTO   321
1323:  MOVWF  19
....................        //delay_ms(500); 
....................         
....................     
....................         
....................        if(menu>=6){ 
1324:  MOVF   29,W
1325:  SUBLW  05
1326:  BTFSC  03.0
1327:  GOTO   332
....................           
....................          menu%=6; 
1328:  MOVF   29,W
1329:  MOVWF  41
132A:  MOVLW  06
132B:  MOVWF  42
132C:  BCF    0A.4
132D:  GOTO   7CB
132E:  BSF    0A.4
132F:  MOVF   77,W
1330:  MOVWF  29
....................          //menu+=1; 
....................        } 
....................        else if(menu<=0) 
1331:  GOTO   543
1332:  MOVF   29,F
1333:  BTFSS  03.2
1334:  GOTO   338
....................        { menu=1; 
1335:  MOVLW  01
1336:  MOVWF  29
....................        } 
....................        else if(menu==1){ 
1337:  GOTO   543
1338:  DECFSZ 29,W
1339:  GOTO   439
....................          menu = checkleft(menu); 
133A:  MOVF   29,W
133B:  MOVWF  63
133C:  BCF    0A.4
133D:  CALL   7F2
133E:  BSF    0A.4
133F:  MOVF   78,W
1340:  MOVWF  29
....................          menu = checkright(menu); 
1341:  MOVF   29,W
1342:  MOVWF  63
1343:  BCF    0A.4
1344:  BSF    0A.3
1345:  CALL   7D3
1346:  BSF    0A.4
1347:  BCF    0A.3
1348:  MOVF   78,W
1349:  MOVWF  29
....................           
....................          setDisplayPos(1);                      
134A:  MOVLW  01
134B:  MOVWF  63
134C:  BCF    0A.4
134D:  BSF    0A.3
134E:  CALL   7DE
134F:  BSF    0A.4
1350:  BCF    0A.3
....................          displayLongText("SENSOR"); 
1351:  CLRF   78
1352:  MOVLW  07
1353:  MOVWF  77
1354:  MOVLW  33
1355:  MOVWF  04
1356:  BCF    03.7
1357:  MOVF   78,W
1358:  BCF    0A.4
1359:  CALL   02F
135A:  BSF    0A.4
135B:  MOVWF  00
135C:  INCF   78,F
135D:  INCF   04,F
135E:  DECFSZ 77,F
135F:  GOTO   357
1360:  CLRF   66
1361:  MOVLW  33
1362:  MOVWF  65
1363:  CALL   059
....................          setDisplayPos(7);                      
1364:  MOVLW  07
1365:  MOVWF  63
1366:  BCF    0A.4
1367:  BSF    0A.3
1368:  CALL   7DE
1369:  BSF    0A.4
136A:  BCF    0A.3
....................          displayLongText("  mA  "); 
136B:  CLRF   78
136C:  MOVLW  07
136D:  MOVWF  77
136E:  MOVLW  33
136F:  MOVWF  04
1370:  BCF    03.7
1371:  MOVF   78,W
1372:  BCF    0A.4
1373:  CALL   03A
1374:  BSF    0A.4
1375:  MOVWF  00
1376:  INCF   78,F
1377:  INCF   04,F
1378:  DECFSZ 77,F
1379:  GOTO   371
137A:  CLRF   66
137B:  MOVLW  33
137C:  MOVWF  65
137D:  CALL   059
....................          setDisplayPos(13);                      
137E:  MOVLW  0D
137F:  MOVWF  63
1380:  BCF    0A.4
1381:  BSF    0A.3
1382:  CALL   7DE
1383:  BSF    0A.4
1384:  BCF    0A.3
....................          displayLongText("WATT"); 
1385:  MOVLW  57
1386:  MOVWF  33
1387:  MOVLW  41
1388:  MOVWF  34
1389:  MOVLW  54
138A:  MOVWF  35
138B:  MOVWF  36
138C:  CLRF   37
138D:  CLRF   66
138E:  MOVLW  33
138F:  MOVWF  65
1390:  CALL   059
....................          if(analog0<1000){ 
1391:  MOVF   2C,W
1392:  SUBLW  03
1393:  BTFSS  03.0
1394:  GOTO   3A8
1395:  BTFSS  03.2
1396:  GOTO   39B
1397:  MOVF   2B,W
1398:  SUBLW  E7
1399:  BTFSS  03.0
139A:  GOTO   3A8
....................             setDisplayPos(18); 
139B:  MOVLW  12
139C:  MOVWF  63
139D:  BCF    0A.4
139E:  BSF    0A.3
139F:  CALL   7DE
13A0:  BSF    0A.4
13A1:  BCF    0A.3
....................             displayValue(analog0); 
13A2:  MOVF   2C,W
13A3:  MOVWF  42
13A4:  MOVF   2B,W
13A5:  MOVWF  41
13A6:  CALL   08A
....................          } 
....................          else{ 
13A7:  GOTO   3B4
....................             setDisplayPos(17); 
13A8:  MOVLW  11
13A9:  MOVWF  63
13AA:  BCF    0A.4
13AB:  BSF    0A.3
13AC:  CALL   7DE
13AD:  BSF    0A.4
13AE:  BCF    0A.3
....................             displayValue(analog0); 
13AF:  MOVF   2C,W
13B0:  MOVWF  42
13B1:  MOVF   2B,W
13B2:  MOVWF  41
13B3:  CALL   08A
....................          } 
....................          if(ampere<1000){ 
13B4:  MOVF   32,W
13B5:  SUBLW  03
13B6:  BTFSS  03.0
13B7:  GOTO   3DC
13B8:  BTFSS  03.2
13B9:  GOTO   3BE
13BA:  MOVF   31,W
13BB:  SUBLW  E7
13BC:  BTFSS  03.0
13BD:  GOTO   3DC
....................             setDisplayPos(21); 
13BE:  MOVLW  15
13BF:  MOVWF  63
13C0:  BCF    0A.4
13C1:  BSF    0A.3
13C2:  CALL   7DE
13C3:  BSF    0A.4
13C4:  BCF    0A.3
....................             displayLongText("    "); 
13C5:  MOVLW  20
13C6:  MOVWF  33
13C7:  MOVWF  34
13C8:  MOVWF  35
13C9:  MOVWF  36
13CA:  CLRF   37
13CB:  CLRF   66
13CC:  MOVLW  33
13CD:  MOVWF  65
13CE:  CALL   059
....................             setDisplayPos(25); 
13CF:  MOVLW  19
13D0:  MOVWF  63
13D1:  BCF    0A.4
13D2:  BSF    0A.3
13D3:  CALL   7DE
13D4:  BSF    0A.4
13D5:  BCF    0A.3
....................             displayValue(ampere); 
13D6:  MOVF   32,W
13D7:  MOVWF  42
13D8:  MOVF   31,W
13D9:  MOVWF  41
13DA:  CALL   08A
....................          } 
....................          else{ 
13DB:  GOTO   3F8
....................             setDisplayPos(21); 
13DC:  MOVLW  15
13DD:  MOVWF  63
13DE:  BCF    0A.4
13DF:  BSF    0A.3
13E0:  CALL   7DE
13E1:  BSF    0A.4
13E2:  BCF    0A.3
....................             displayLongText("   "); 
13E3:  MOVLW  20
13E4:  MOVWF  33
13E5:  MOVWF  34
13E6:  MOVWF  35
13E7:  CLRF   36
13E8:  CLRF   66
13E9:  MOVLW  33
13EA:  MOVWF  65
13EB:  CALL   059
....................             setDisplayPos(24); 
13EC:  MOVLW  18
13ED:  MOVWF  63
13EE:  BCF    0A.4
13EF:  BSF    0A.3
13F0:  CALL   7DE
13F1:  BSF    0A.4
13F2:  BCF    0A.3
....................             displayValue(ampere); 
13F3:  MOVF   32,W
13F4:  MOVWF  42
13F5:  MOVF   31,W
13F6:  MOVWF  41
13F7:  CALL   08A
....................          } 
....................          if(power<1000){ 
13F8:  MOVF   30,W
13F9:  SUBLW  03
13FA:  BTFSS  03.0
13FB:  GOTO   41E
13FC:  BTFSS  03.2
13FD:  GOTO   402
13FE:  MOVF   2F,W
13FF:  SUBLW  E7
1400:  BTFSS  03.0
1401:  GOTO   41E
....................             setDisplayPos(28);                      
1402:  MOVLW  1C
1403:  MOVWF  63
1404:  BCF    0A.4
1405:  BSF    0A.3
1406:  CALL   7DE
1407:  BSF    0A.4
1408:  BCF    0A.3
....................             displayLongText("  "); 
1409:  MOVLW  20
140A:  MOVWF  33
140B:  MOVWF  34
140C:  CLRF   35
140D:  CLRF   66
140E:  MOVLW  33
140F:  MOVWF  65
1410:  CALL   059
....................             setDisplayPos(30); 
1411:  MOVLW  1E
1412:  MOVWF  63
1413:  BCF    0A.4
1414:  BSF    0A.3
1415:  CALL   7DE
1416:  BSF    0A.4
1417:  BCF    0A.3
....................             displayValue(power); 
1418:  MOVF   30,W
1419:  MOVWF  42
141A:  MOVF   2F,W
141B:  MOVWF  41
141C:  CALL   08A
....................          } 
....................          else{ 
141D:  GOTO   438
....................             setDisplayPos(28);                      
141E:  MOVLW  1C
141F:  MOVWF  63
1420:  BCF    0A.4
1421:  BSF    0A.3
1422:  CALL   7DE
1423:  BSF    0A.4
1424:  BCF    0A.3
....................             displayLongText(" "); 
1425:  MOVLW  20
1426:  MOVWF  33
1427:  CLRF   34
1428:  CLRF   66
1429:  MOVLW  33
142A:  MOVWF  65
142B:  CALL   059
....................             setDisplayPos(29); 
142C:  MOVLW  1D
142D:  MOVWF  63
142E:  BCF    0A.4
142F:  BSF    0A.3
1430:  CALL   7DE
1431:  BSF    0A.4
1432:  BCF    0A.3
....................             displayValue(power); 
1433:  MOVF   30,W
1434:  MOVWF  42
1435:  MOVF   2F,W
1436:  MOVWF  41
1437:  CALL   08A
....................          } 
....................           
....................         
....................        } 
....................        else if(menu==2){ 
1438:  GOTO   543
1439:  MOVF   29,W
143A:  SUBLW  02
143B:  BTFSS  03.2
143C:  GOTO   524
....................          menu = checkleft(menu); 
143D:  MOVF   29,W
143E:  MOVWF  63
143F:  BCF    0A.4
1440:  CALL   7F2
1441:  BSF    0A.4
1442:  MOVF   78,W
1443:  MOVWF  29
....................          menu = checkright(menu); 
1444:  MOVF   29,W
1445:  MOVWF  63
1446:  BCF    0A.4
1447:  BSF    0A.3
1448:  CALL   7D3
1449:  BSF    0A.4
144A:  BCF    0A.3
144B:  MOVF   78,W
144C:  MOVWF  29
....................          setDisplayPos(1);                      
144D:  MOVLW  01
144E:  MOVWF  63
144F:  BCF    0A.4
1450:  BSF    0A.3
1451:  CALL   7DE
1452:  BSF    0A.4
1453:  BCF    0A.3
....................          displayLongText(" volt "); 
1454:  CLRF   78
1455:  MOVLW  07
1456:  MOVWF  77
1457:  MOVLW  3A
1458:  MOVWF  04
1459:  BCF    03.7
145A:  MOVF   78,W
145B:  BCF    0A.4
145C:  CALL   045
145D:  BSF    0A.4
145E:  MOVWF  00
145F:  INCF   78,F
1460:  INCF   04,F
1461:  DECFSZ 77,F
1462:  GOTO   45A
1463:  CLRF   66
1464:  MOVLW  3A
1465:  MOVWF  65
1466:  CALL   059
....................          setDisplayPos(7);                      
1467:  MOVLW  07
1468:  MOVWF  63
1469:  BCF    0A.4
146A:  BSF    0A.3
146B:  CALL   7DE
146C:  BSF    0A.4
146D:  BCF    0A.3
....................          displayLongText("  mA  "); 
146E:  CLRF   78
146F:  MOVLW  07
1470:  MOVWF  77
1471:  MOVLW  3A
1472:  MOVWF  04
1473:  BCF    03.7
1474:  MOVF   78,W
1475:  BCF    0A.4
1476:  CALL   03A
1477:  BSF    0A.4
1478:  MOVWF  00
1479:  INCF   78,F
147A:  INCF   04,F
147B:  DECFSZ 77,F
147C:  GOTO   474
147D:  CLRF   66
147E:  MOVLW  3A
147F:  MOVWF  65
1480:  CALL   059
....................          setDisplayPos(13);                      
1481:  MOVLW  0D
1482:  MOVWF  63
1483:  BCF    0A.4
1484:  BSF    0A.3
1485:  CALL   7DE
1486:  BSF    0A.4
1487:  BCF    0A.3
....................          displayLongText("WATT"); 
1488:  MOVLW  57
1489:  MOVWF  3A
148A:  MOVLW  41
148B:  MOVWF  3B
148C:  MOVLW  54
148D:  MOVWF  3C
148E:  MOVWF  3D
148F:  CLRF   3E
1490:  CLRF   66
1491:  MOVLW  3A
1492:  MOVWF  65
1493:  CALL   059
....................          setDisplayPos(18); 
1494:  MOVLW  12
1495:  MOVWF  63
1496:  BCF    0A.4
1497:  BSF    0A.3
1498:  CALL   7DE
1499:  BSF    0A.4
149A:  BCF    0A.3
....................          displayValue(230); 
149B:  CLRF   42
149C:  MOVLW  E6
149D:  MOVWF  41
149E:  CALL   08A
....................          if(ampere<1000){ 
149F:  MOVF   32,W
14A0:  SUBLW  03
14A1:  BTFSS  03.0
14A2:  GOTO   4C7
14A3:  BTFSS  03.2
14A4:  GOTO   4A9
14A5:  MOVF   31,W
14A6:  SUBLW  E7
14A7:  BTFSS  03.0
14A8:  GOTO   4C7
....................             setDisplayPos(21); 
14A9:  MOVLW  15
14AA:  MOVWF  63
14AB:  BCF    0A.4
14AC:  BSF    0A.3
14AD:  CALL   7DE
14AE:  BSF    0A.4
14AF:  BCF    0A.3
....................             displayLongText("    "); 
14B0:  MOVLW  20
14B1:  MOVWF  3A
14B2:  MOVWF  3B
14B3:  MOVWF  3C
14B4:  MOVWF  3D
14B5:  CLRF   3E
14B6:  CLRF   66
14B7:  MOVLW  3A
14B8:  MOVWF  65
14B9:  CALL   059
....................             setDisplayPos(25); 
14BA:  MOVLW  19
14BB:  MOVWF  63
14BC:  BCF    0A.4
14BD:  BSF    0A.3
14BE:  CALL   7DE
14BF:  BSF    0A.4
14C0:  BCF    0A.3
....................             displayValue(ampere); 
14C1:  MOVF   32,W
14C2:  MOVWF  42
14C3:  MOVF   31,W
14C4:  MOVWF  41
14C5:  CALL   08A
....................          } 
....................          else{ 
14C6:  GOTO   4E3
....................             setDisplayPos(21); 
14C7:  MOVLW  15
14C8:  MOVWF  63
14C9:  BCF    0A.4
14CA:  BSF    0A.3
14CB:  CALL   7DE
14CC:  BSF    0A.4
14CD:  BCF    0A.3
....................             displayLongText("   "); 
14CE:  MOVLW  20
14CF:  MOVWF  3A
14D0:  MOVWF  3B
14D1:  MOVWF  3C
14D2:  CLRF   3D
14D3:  CLRF   66
14D4:  MOVLW  3A
14D5:  MOVWF  65
14D6:  CALL   059
....................             setDisplayPos(24); 
14D7:  MOVLW  18
14D8:  MOVWF  63
14D9:  BCF    0A.4
14DA:  BSF    0A.3
14DB:  CALL   7DE
14DC:  BSF    0A.4
14DD:  BCF    0A.3
....................             displayValue(ampere); 
14DE:  MOVF   32,W
14DF:  MOVWF  42
14E0:  MOVF   31,W
14E1:  MOVWF  41
14E2:  CALL   08A
....................          } 
....................          if(power<1000){ 
14E3:  MOVF   30,W
14E4:  SUBLW  03
14E5:  BTFSS  03.0
14E6:  GOTO   509
14E7:  BTFSS  03.2
14E8:  GOTO   4ED
14E9:  MOVF   2F,W
14EA:  SUBLW  E7
14EB:  BTFSS  03.0
14EC:  GOTO   509
....................             setDisplayPos(28);                      
14ED:  MOVLW  1C
14EE:  MOVWF  63
14EF:  BCF    0A.4
14F0:  BSF    0A.3
14F1:  CALL   7DE
14F2:  BSF    0A.4
14F3:  BCF    0A.3
....................             displayLongText("  "); 
14F4:  MOVLW  20
14F5:  MOVWF  3A
14F6:  MOVWF  3B
14F7:  CLRF   3C
14F8:  CLRF   66
14F9:  MOVLW  3A
14FA:  MOVWF  65
14FB:  CALL   059
....................             setDisplayPos(30); 
14FC:  MOVLW  1E
14FD:  MOVWF  63
14FE:  BCF    0A.4
14FF:  BSF    0A.3
1500:  CALL   7DE
1501:  BSF    0A.4
1502:  BCF    0A.3
....................             displayValue(power); 
1503:  MOVF   30,W
1504:  MOVWF  42
1505:  MOVF   2F,W
1506:  MOVWF  41
1507:  CALL   08A
....................          } 
....................          else{ 
1508:  GOTO   523
....................             setDisplayPos(28);                      
1509:  MOVLW  1C
150A:  MOVWF  63
150B:  BCF    0A.4
150C:  BSF    0A.3
150D:  CALL   7DE
150E:  BSF    0A.4
150F:  BCF    0A.3
....................             displayLongText(" "); 
1510:  MOVLW  20
1511:  MOVWF  3A
1512:  CLRF   3B
1513:  CLRF   66
1514:  MOVLW  3A
1515:  MOVWF  65
1516:  CALL   059
....................             setDisplayPos(29); 
1517:  MOVLW  1D
1518:  MOVWF  63
1519:  BCF    0A.4
151A:  BSF    0A.3
151B:  CALL   7DE
151C:  BSF    0A.4
151D:  BCF    0A.3
....................             displayValue(power); 
151E:  MOVF   30,W
151F:  MOVWF  42
1520:  MOVF   2F,W
1521:  MOVWF  41
1522:  CALL   08A
....................          } 
....................           
....................          
....................        } 
....................        else if(menu ==3){ 
1523:  GOTO   543
1524:  MOVF   29,W
1525:  SUBLW  03
1526:  BTFSS  03.2
1527:  GOTO   539
....................             menu = checkleft(menu); 
1528:  MOVF   29,W
1529:  MOVWF  63
152A:  BCF    0A.4
152B:  CALL   7F2
152C:  BSF    0A.4
152D:  MOVF   78,W
152E:  MOVWF  29
....................             menu = checkright(menu); 
152F:  MOVF   29,W
1530:  MOVWF  63
1531:  BCF    0A.4
1532:  BSF    0A.3
1533:  CALL   7D3
1534:  BSF    0A.4
1535:  BCF    0A.3
1536:  MOVF   78,W
1537:  MOVWF  29
....................        } 
....................        else if(menu ==4){ 
1538:  GOTO   543
1539:  MOVF   29,W
153A:  SUBLW  04
153B:  BTFSS  03.2
153C:  GOTO   53F
....................             menu4(); 
153D:  GOTO   0C2
....................        } 
....................        else if(menu ==5){ 
153E:  GOTO   543
153F:  MOVF   29,W
1540:  SUBLW  05
1541:  BTFSC  03.2
....................             menu5(); 
1542:  GOTO   15F
....................              
....................         
....................        } 
....................         
....................         
....................    
....................         
....................         
....................           
....................     } 
1543:  GOTO   277
.................... } 
....................  
....................  
.................... ///////////////// 
.................... //calculation Function 
.................... //////////////// 
.................... void powercal(int16 ampere){ 
078B:  CLRF   46
078C:  CLRF   45
078D:  CLRF   44
078E:  CLRF   43
....................    float32 power_sim = 0; 
1544:  SLEEP
....................    power_sim =  0.230*ampere; //((230*ampere)*1000) 
078F:  MOVF   42,W
0790:  BSF    03.5
0791:  MOVWF  39
0792:  BCF    03.5
0793:  MOVF   41,W
0794:  BSF    03.5
0795:  MOVWF  38
0796:  BCF    03.5
0797:  CALL   18B
0798:  MOVLW  1F
0799:  BSF    03.5
079A:  MOVWF  37
079B:  MOVLW  85
079C:  MOVWF  36
079D:  MOVLW  6B
079E:  MOVWF  35
079F:  MOVLW  7C
07A0:  MOVWF  34
07A1:  MOVF   7A,W
07A2:  MOVWF  3B
07A3:  MOVF   79,W
07A4:  MOVWF  3A
07A5:  MOVF   78,W
07A6:  MOVWF  39
07A7:  MOVF   77,W
07A8:  MOVWF  38
07A9:  BCF    03.5
07AA:  CALL   2D8
07AB:  MOVF   7A,W
07AC:  MOVWF  46
07AD:  MOVF   79,W
07AE:  MOVWF  45
07AF:  MOVF   78,W
07B0:  MOVWF  44
07B1:  MOVF   77,W
07B2:  MOVWF  43
....................    power = (int16) power_sim; 
07B3:  MOVF   46,W
07B4:  BSF    03.5
07B5:  MOVWF  37
07B6:  BCF    03.5
07B7:  MOVF   45,W
07B8:  BSF    03.5
07B9:  MOVWF  36
07BA:  BCF    03.5
07BB:  MOVF   44,W
07BC:  BSF    03.5
07BD:  MOVWF  35
07BE:  BCF    03.5
07BF:  MOVF   43,W
07C0:  BSF    03.5
07C1:  MOVWF  34
07C2:  BCF    03.5
07C3:  CALL   2B7
07C4:  MOVF   79,W
07C5:  MOVWF  30
07C6:  MOVF   78,W
07C7:  MOVWF  2F
....................  
....................  
.................... } 
07C8:  BCF    0A.3
07C9:  BSF    0A.4
07CA:  GOTO   2CC (RETURN)
....................  
....................  
.................... int16 amperecal(int16 analog){ 
0E04:  MOVLW  FA
0E05:  MOVWF  50
0E06:  MOVLW  A2
0E07:  MOVWF  4F
0E08:  MOVLW  48
0E09:  MOVWF  4E
0E0A:  MOVLW  71
0E0B:  MOVWF  4D
0E0C:  MOVLW  AC
0E0D:  MOVWF  54
0E0E:  MOVLW  19
0E0F:  MOVWF  53
0E10:  MOVLW  39
0E11:  MOVWF  52
0E12:  MOVLW  7C
0E13:  MOVWF  51
0E14:  MOVLW  10
0E15:  MOVWF  58
0E16:  MOVLW  98
0E17:  MOVWF  57
0E18:  MOVLW  6A
0E19:  MOVWF  56
0E1A:  MOVLW  85
0E1B:  MOVWF  55
0E1C:  MOVLW  9A
0E1D:  MOVWF  5C
0E1E:  MOVLW  F8
0E1F:  MOVWF  5B
0E20:  MOVLW  47
0E21:  MOVWF  5A
0E22:  MOVLW  8D
0E23:  MOVWF  59
....................    float32 analog_sim; 
....................    float32 ampere_sim; 
....................    int16 ampere; 
....................    float32 A = 0.000095671; 
....................    float32 B = 0.180762; 
....................    float32 C = 117.297; 
....................    float32 D = 25596.3; 
....................     
....................    analog_sim = analog; 
0E24:  MOVF   42,W
0E25:  BSF    03.5
0E26:  MOVWF  39
0E27:  BCF    03.5
0E28:  MOVF   41,W
0E29:  BSF    03.5
0E2A:  MOVWF  38
0E2B:  BCF    0A.3
0E2C:  BCF    03.5
0E2D:  CALL   18B
0E2E:  BSF    0A.3
0E2F:  MOVF   7A,W
0E30:  MOVWF  46
0E31:  MOVF   79,W
0E32:  MOVWF  45
0E33:  MOVF   78,W
0E34:  MOVWF  44
0E35:  MOVF   77,W
0E36:  MOVWF  43
....................    ampere_sim =(A*( pow(analog_sim,3)))-(B*( pow(analog_sim,2)))+(C* analog_sim)-D; 
0E37:  MOVF   46,W
0E38:  MOVWF  64
0E39:  MOVF   45,W
0E3A:  MOVWF  63
0E3B:  MOVF   44,W
0E3C:  MOVWF  62
0E3D:  MOVF   43,W
0E3E:  MOVWF  61
0E3F:  CLRF   68
0E40:  CLRF   67
0E41:  MOVLW  40
0E42:  MOVWF  66
0E43:  MOVLW  80
0E44:  MOVWF  65
0E45:  CALL   41F
0E46:  MOVF   50,W
0E47:  BSF    03.5
0E48:  MOVWF  37
0E49:  BCF    03.5
0E4A:  MOVF   4F,W
0E4B:  BSF    03.5
0E4C:  MOVWF  36
0E4D:  BCF    03.5
0E4E:  MOVF   4E,W
0E4F:  BSF    03.5
0E50:  MOVWF  35
0E51:  BCF    03.5
0E52:  MOVF   4D,W
0E53:  BSF    03.5
0E54:  MOVWF  34
0E55:  MOVF   7A,W
0E56:  MOVWF  3B
0E57:  MOVF   79,W
0E58:  MOVWF  3A
0E59:  MOVF   78,W
0E5A:  MOVWF  39
0E5B:  MOVF   77,W
0E5C:  MOVWF  38
0E5D:  BCF    0A.3
0E5E:  BCF    03.5
0E5F:  CALL   2D8
0E60:  BSF    0A.3
0E61:  MOVF   7A,W
0E62:  MOVWF  60
0E63:  MOVF   79,W
0E64:  MOVWF  5F
0E65:  MOVF   78,W
0E66:  MOVWF  5E
0E67:  MOVF   77,W
0E68:  MOVWF  5D
0E69:  MOVF   46,W
0E6A:  MOVWF  64
0E6B:  MOVF   45,W
0E6C:  MOVWF  63
0E6D:  MOVF   44,W
0E6E:  MOVWF  62
0E6F:  MOVF   43,W
0E70:  MOVWF  61
0E71:  CLRF   68
0E72:  CLRF   67
0E73:  CLRF   66
0E74:  MOVLW  80
0E75:  MOVWF  65
0E76:  CALL   41F
0E77:  MOVF   54,W
0E78:  BSF    03.5
0E79:  MOVWF  37
0E7A:  BCF    03.5
0E7B:  MOVF   53,W
0E7C:  BSF    03.5
0E7D:  MOVWF  36
0E7E:  BCF    03.5
0E7F:  MOVF   52,W
0E80:  BSF    03.5
0E81:  MOVWF  35
0E82:  BCF    03.5
0E83:  MOVF   51,W
0E84:  BSF    03.5
0E85:  MOVWF  34
0E86:  MOVF   7A,W
0E87:  MOVWF  3B
0E88:  MOVF   79,W
0E89:  MOVWF  3A
0E8A:  MOVF   78,W
0E8B:  MOVWF  39
0E8C:  MOVF   77,W
0E8D:  MOVWF  38
0E8E:  BCF    0A.3
0E8F:  BCF    03.5
0E90:  CALL   2D8
0E91:  BSF    0A.3
0E92:  CLRF   62
0E93:  MOVF   04,W
0E94:  MOVWF  61
0E95:  BCF    62.0
0E96:  BTFSC  03.7
0E97:  BSF    62.0
0E98:  BSF    03.1
0E99:  MOVF   60,W
0E9A:  BSF    03.5
0E9B:  MOVWF  3B
0E9C:  BCF    03.5
0E9D:  MOVF   5F,W
0E9E:  BSF    03.5
0E9F:  MOVWF  3A
0EA0:  BCF    03.5
0EA1:  MOVF   5E,W
0EA2:  BSF    03.5
0EA3:  MOVWF  39
0EA4:  BCF    03.5
0EA5:  MOVF   5D,W
0EA6:  BSF    03.5
0EA7:  MOVWF  38
0EA8:  MOVF   7A,W
0EA9:  MOVWF  3F
0EAA:  MOVF   79,W
0EAB:  MOVWF  3E
0EAC:  MOVF   78,W
0EAD:  MOVWF  3D
0EAE:  MOVF   77,W
0EAF:  MOVWF  3C
0EB0:  BCF    0A.3
0EB1:  BCF    03.5
0EB2:  CALL   34F
0EB3:  BSF    0A.3
0EB4:  MOVF   61,W
0EB5:  MOVWF  04
0EB6:  BCF    03.7
0EB7:  BTFSC  62.0
0EB8:  BSF    03.7
0EB9:  MOVF   7A,W
0EBA:  MOVWF  60
0EBB:  MOVF   79,W
0EBC:  MOVWF  5F
0EBD:  MOVF   78,W
0EBE:  MOVWF  5E
0EBF:  MOVF   77,W
0EC0:  MOVWF  5D
0EC1:  MOVF   58,W
0EC2:  BSF    03.5
0EC3:  MOVWF  37
0EC4:  BCF    03.5
0EC5:  MOVF   57,W
0EC6:  BSF    03.5
0EC7:  MOVWF  36
0EC8:  BCF    03.5
0EC9:  MOVF   56,W
0ECA:  BSF    03.5
0ECB:  MOVWF  35
0ECC:  BCF    03.5
0ECD:  MOVF   55,W
0ECE:  BSF    03.5
0ECF:  MOVWF  34
0ED0:  BCF    03.5
0ED1:  MOVF   46,W
0ED2:  BSF    03.5
0ED3:  MOVWF  3B
0ED4:  BCF    03.5
0ED5:  MOVF   45,W
0ED6:  BSF    03.5
0ED7:  MOVWF  3A
0ED8:  BCF    03.5
0ED9:  MOVF   44,W
0EDA:  BSF    03.5
0EDB:  MOVWF  39
0EDC:  BCF    03.5
0EDD:  MOVF   43,W
0EDE:  BSF    03.5
0EDF:  MOVWF  38
0EE0:  BCF    0A.3
0EE1:  BCF    03.5
0EE2:  CALL   2D8
0EE3:  BSF    0A.3
0EE4:  CLRF   64
0EE5:  MOVF   04,W
0EE6:  MOVWF  63
0EE7:  BCF    64.0
0EE8:  BTFSC  03.7
0EE9:  BSF    64.0
0EEA:  BCF    03.1
0EEB:  MOVF   60,W
0EEC:  BSF    03.5
0EED:  MOVWF  3B
0EEE:  BCF    03.5
0EEF:  MOVF   5F,W
0EF0:  BSF    03.5
0EF1:  MOVWF  3A
0EF2:  BCF    03.5
0EF3:  MOVF   5E,W
0EF4:  BSF    03.5
0EF5:  MOVWF  39
0EF6:  BCF    03.5
0EF7:  MOVF   5D,W
0EF8:  BSF    03.5
0EF9:  MOVWF  38
0EFA:  MOVF   7A,W
0EFB:  MOVWF  3F
0EFC:  MOVF   79,W
0EFD:  MOVWF  3E
0EFE:  MOVF   78,W
0EFF:  MOVWF  3D
0F00:  MOVF   77,W
0F01:  MOVWF  3C
0F02:  BCF    0A.3
0F03:  BCF    03.5
0F04:  CALL   34F
0F05:  BSF    0A.3
0F06:  MOVF   63,W
0F07:  MOVWF  04
0F08:  BCF    03.7
0F09:  BTFSC  64.0
0F0A:  BSF    03.7
0F0B:  MOVF   7A,W
0F0C:  MOVWF  60
0F0D:  MOVF   79,W
0F0E:  MOVWF  5F
0F0F:  MOVF   78,W
0F10:  MOVWF  5E
0F11:  MOVF   77,W
0F12:  MOVWF  5D
0F13:  CLRF   66
0F14:  MOVF   04,W
0F15:  MOVWF  65
0F16:  BCF    66.0
0F17:  BTFSC  03.7
0F18:  BSF    66.0
0F19:  BSF    03.1
0F1A:  MOVF   7A,W
0F1B:  BSF    03.5
0F1C:  MOVWF  3B
0F1D:  BCF    03.5
0F1E:  MOVF   79,W
0F1F:  BSF    03.5
0F20:  MOVWF  3A
0F21:  BCF    03.5
0F22:  MOVF   78,W
0F23:  BSF    03.5
0F24:  MOVWF  39
0F25:  BCF    03.5
0F26:  MOVF   77,W
0F27:  BSF    03.5
0F28:  MOVWF  38
0F29:  BCF    03.5
0F2A:  MOVF   5C,W
0F2B:  BSF    03.5
0F2C:  MOVWF  3F
0F2D:  BCF    03.5
0F2E:  MOVF   5B,W
0F2F:  BSF    03.5
0F30:  MOVWF  3E
0F31:  BCF    03.5
0F32:  MOVF   5A,W
0F33:  BSF    03.5
0F34:  MOVWF  3D
0F35:  BCF    03.5
0F36:  MOVF   59,W
0F37:  BSF    03.5
0F38:  MOVWF  3C
0F39:  BCF    0A.3
0F3A:  BCF    03.5
0F3B:  CALL   34F
0F3C:  BSF    0A.3
0F3D:  MOVF   65,W
0F3E:  MOVWF  04
0F3F:  BCF    03.7
0F40:  BTFSC  66.0
0F41:  BSF    03.7
0F42:  MOVF   7A,W
0F43:  MOVWF  4A
0F44:  MOVF   79,W
0F45:  MOVWF  49
0F46:  MOVF   78,W
0F47:  MOVWF  48
0F48:  MOVF   77,W
0F49:  MOVWF  47
....................    ampere = (int16) ampere_sim; 
0F4A:  MOVF   4A,W
0F4B:  BSF    03.5
0F4C:  MOVWF  37
0F4D:  BCF    03.5
0F4E:  MOVF   49,W
0F4F:  BSF    03.5
0F50:  MOVWF  36
0F51:  BCF    03.5
0F52:  MOVF   48,W
0F53:  BSF    03.5
0F54:  MOVWF  35
0F55:  BCF    03.5
0F56:  MOVF   47,W
0F57:  BSF    03.5
0F58:  MOVWF  34
0F59:  BCF    0A.3
0F5A:  BCF    03.5
0F5B:  CALL   2B7
0F5C:  BSF    0A.3
0F5D:  MOVF   79,W
0F5E:  MOVWF  4C
0F5F:  MOVF   78,W
0F60:  MOVWF  4B
....................    return ampere; 
0F61:  MOVF   4B,W
0F62:  MOVWF  78
0F63:  MOVF   4C,W
0F64:  MOVWF  79
.................... } 
0F65:  BCF    0A.3
0F66:  BSF    0A.4
0F67:  GOTO   2C0 (RETURN)
.................... int16 powercal(int16 ampere){ 
....................  
....................  
.................... } 
....................  
....................  
....................  
....................  
.................... ///////////////// 
.................... //calculation Function 
.................... //////////////// 
....................  
....................  
....................  
.................... ///////////////// 
.................... //Menu Function 
.................... //////////////// 
....................  
....................  
.................... void menu4(){ 
....................      selectmenu = checkselect(selectmenu); 
10C2:  MOVLW  00
10C3:  BTFSC  2A.0
10C4:  MOVLW  01
10C5:  MOVWF  63
10C6:  MOVWF  64
10C7:  CALL   0B3
10C8:  BCF    2A.0
10C9:  BTFSC  78.0
10CA:  BSF    2A.0
....................             if(selectmenu > 0){ 
10CB:  MOVLW  00
10CC:  BTFSC  2A.0
10CD:  MOVLW  01
10CE:  XORLW  00
10CF:  BTFSC  03.2
10D0:  GOTO   118
....................                REFERENCE_VALUE = calibrate(analog0); 
10D1:  MOVF   2C,W
10D2:  MOVWF  64
10D3:  MOVF   2B,W
10D4:  MOVWF  63
10D9:  MOVF   79,W
10DA:  MOVWF  2E
10DB:  MOVF   78,W
10DC:  MOVWF  2D
....................                selectmenu = 0; 
10DD:  BCF    2A.0
....................                setDisplayPos(1);                      
10DE:  MOVLW  01
10DF:  MOVWF  63
10E0:  BCF    0A.4
10E1:  BSF    0A.3
10E2:  CALL   7DE
10E3:  BSF    0A.4
10E4:  BCF    0A.3
....................                displayLongText("   CALIBRATE    "); 
10E5:  CLRF   78
10E6:  MOVLW  11
10E7:  MOVWF  77
10E8:  MOVLW  41
10E9:  MOVWF  04
10EA:  BCF    03.7
10EB:  MOVF   78,W
10EC:  BCF    0A.4
10ED:  CALL   050
10EE:  BSF    0A.4
10EF:  MOVWF  00
10F0:  INCF   78,F
10F1:  INCF   04,F
10F2:  DECFSZ 77,F
10F3:  GOTO   0EB
10F4:  CLRF   66
10F5:  MOVLW  41
10F6:  MOVWF  65
10F7:  CALL   059
....................                setDisplayPos(17);                      
10F8:  MOVLW  11
10F9:  MOVWF  63
10FA:  BCF    0A.4
10FB:  BSF    0A.3
10FC:  CALL   7DE
10FD:  BSF    0A.4
10FE:  BCF    0A.3
....................                displayLongText("  OK !!! "); 
10FF:  CLRF   78
1100:  MOVLW  0A
1101:  MOVWF  77
1102:  MOVLW  41
1103:  MOVWF  04
1104:  BCF    03.7
1105:  MOVF   78,W
1106:  BCF    0A.4
1107:  CALL   065
1108:  BSF    0A.4
1109:  MOVWF  00
110A:  INCF   78,F
110B:  INCF   04,F
110C:  DECFSZ 77,F
110D:  GOTO   105
110E:  CLRF   66
110F:  MOVLW  41
1110:  MOVWF  65
1111:  CALL   059
....................                delay_ms(200); 
1112:  MOVLW  C8
1113:  MOVWF  63
1114:  BCF    0A.4
1115:  CALL   177
1116:  BSF    0A.4
....................             } 
....................             else{ 
1117:  GOTO   15C
....................                menu = checkleft(menu); 
1118:  MOVF   29,W
1119:  MOVWF  63
111A:  BCF    0A.4
111B:  CALL   7F2
111C:  BSF    0A.4
111D:  MOVF   78,W
111E:  MOVWF  29
....................                menu = checkright(menu); 
111F:  MOVF   29,W
1120:  MOVWF  63
1121:  BCF    0A.4
1122:  BSF    0A.3
1123:  CALL   7D3
1124:  BSF    0A.4
1125:  BCF    0A.3
1126:  MOVF   78,W
1127:  MOVWF  29
....................                setDisplayPos(1);                      
1128:  MOVLW  01
1129:  MOVWF  63
112A:  BCF    0A.4
112B:  BSF    0A.3
112C:  CALL   7DE
112D:  BSF    0A.4
112E:  BCF    0A.3
....................                displayLongText("   CALIBRATE    "); 
112F:  CLRF   78
1130:  MOVLW  11
1131:  MOVWF  77
1132:  MOVLW  52
1133:  MOVWF  04
1134:  BCF    03.7
1135:  MOVF   78,W
1136:  BCF    0A.4
1137:  CALL   050
1138:  BSF    0A.4
1139:  MOVWF  00
113A:  INCF   78,F
113B:  INCF   04,F
113C:  DECFSZ 77,F
113D:  GOTO   135
113E:  CLRF   66
113F:  MOVLW  52
1140:  MOVWF  65
1141:  CALL   059
....................                setDisplayPos(17);                      
1142:  MOVLW  11
1143:  MOVWF  63
1144:  BCF    0A.4
1145:  BSF    0A.3
1146:  CALL   7DE
1147:  BSF    0A.4
1148:  BCF    0A.3
....................                displayLongText("  This Tool !!! "); 
1149:  CLRF   78
114A:  MOVLW  11
114B:  MOVWF  77
114C:  MOVLW  52
114D:  MOVWF  04
114E:  BCF    03.7
114F:  MOVF   78,W
1150:  BCF    0A.4
1151:  CALL   073
1152:  BSF    0A.4
1153:  MOVWF  00
1154:  INCF   78,F
1155:  INCF   04,F
1156:  DECFSZ 77,F
1157:  GOTO   14F
1158:  CLRF   66
1159:  MOVLW  52
115A:  MOVWF  65
115B:  CALL   059
....................              
....................             } 
.................... } 
115C:  BCF    0A.3
115D:  BSF    0A.4
115E:  GOTO   53E (RETURN)
....................  
.................... void menu5(){ 
....................    selectmenu = checkselect(selectmenu); 
115F:  MOVLW  00
1160:  BTFSC  2A.0
1161:  MOVLW  01
1162:  MOVWF  61
1163:  MOVWF  64
1164:  CALL   0B3
1165:  BCF    2A.0
1166:  BTFSC  78.0
1167:  BSF    2A.0
....................             if(selectmenu > 0){ 
1168:  MOVLW  00
1169:  BTFSC  2A.0
116A:  MOVLW  01
116B:  XORLW  00
116C:  BTFSC  03.2
116D:  GOTO   1B1
....................                REFERENCE_VALUE = resetcalibrate(); 
1172:  MOVF   79,W
1173:  MOVWF  2E
1174:  MOVF   78,W
1175:  MOVWF  2D
....................                selectmenu = 0; 
1176:  BCF    2A.0
....................                setDisplayPos(1);                      
1177:  MOVLW  01
1178:  MOVWF  63
1179:  BCF    0A.4
117A:  BSF    0A.3
117B:  CALL   7DE
117C:  BSF    0A.4
117D:  BCF    0A.3
....................                displayLongText("RESET CALIBRATE"); 
117E:  CLRF   78
117F:  MOVLW  10
1180:  MOVWF  77
1181:  MOVLW  41
1182:  MOVWF  04
1183:  BCF    03.7
1184:  MOVF   78,W
1185:  BCF    0A.4
1186:  CALL   088
1187:  BSF    0A.4
1188:  MOVWF  00
1189:  INCF   78,F
118A:  INCF   04,F
118B:  DECFSZ 77,F
118C:  GOTO   184
118D:  CLRF   66
118E:  MOVLW  41
118F:  MOVWF  65
1190:  CALL   059
....................                setDisplayPos(18);                      
1191:  MOVLW  12
1192:  MOVWF  63
1193:  BCF    0A.4
1194:  BSF    0A.3
1195:  CALL   7DE
1196:  BSF    0A.4
1197:  BCF    0A.3
....................                displayLongText("OK !!!"); 
1198:  CLRF   78
1199:  MOVLW  07
119A:  MOVWF  77
119B:  MOVLW  41
119C:  MOVWF  04
119D:  BCF    03.7
119E:  MOVF   78,W
119F:  BCF    0A.4
11A0:  CALL   09C
11A1:  BSF    0A.4
11A2:  MOVWF  00
11A3:  INCF   78,F
11A4:  INCF   04,F
11A5:  DECFSZ 77,F
11A6:  GOTO   19E
11A7:  CLRF   66
11A8:  MOVLW  41
11A9:  MOVWF  65
11AA:  CALL   059
....................                delay_ms(200); 
11AB:  MOVLW  C8
11AC:  MOVWF  63
11AD:  BCF    0A.4
11AE:  CALL   177
11AF:  BSF    0A.4
....................             } 
....................             else{ 
11B0:  GOTO   1F5
....................                menu = checkleft(menu); 
11B1:  MOVF   29,W
11B2:  MOVWF  63
11B3:  BCF    0A.4
11B4:  CALL   7F2
11B5:  BSF    0A.4
11B6:  MOVF   78,W
11B7:  MOVWF  29
....................                menu = checkright(menu); 
11B8:  MOVF   29,W
11B9:  MOVWF  63
11BA:  BCF    0A.4
11BB:  BSF    0A.3
11BC:  CALL   7D3
11BD:  BSF    0A.4
11BE:  BCF    0A.3
11BF:  MOVF   78,W
11C0:  MOVWF  29
....................                setDisplayPos(1);                      
11C1:  MOVLW  01
11C2:  MOVWF  63
11C3:  BCF    0A.4
11C4:  BSF    0A.3
11C5:  CALL   7DE
11C6:  BSF    0A.4
11C7:  BCF    0A.3
....................                displayLongText("RESET CALIBRATE"); 
11C8:  CLRF   78
11C9:  MOVLW  10
11CA:  MOVWF  77
11CB:  MOVLW  51
11CC:  MOVWF  04
11CD:  BCF    03.7
11CE:  MOVF   78,W
11CF:  BCF    0A.4
11D0:  CALL   088
11D1:  BSF    0A.4
11D2:  MOVWF  00
11D3:  INCF   78,F
11D4:  INCF   04,F
11D5:  DECFSZ 77,F
11D6:  GOTO   1CE
11D7:  CLRF   66
11D8:  MOVLW  51
11D9:  MOVWF  65
11DA:  CALL   059
....................                setDisplayPos(18);                      
11DB:  MOVLW  12
11DC:  MOVWF  63
11DD:  BCF    0A.4
11DE:  BSF    0A.3
11DF:  CALL   7DE
11E0:  BSF    0A.4
11E1:  BCF    0A.3
....................                displayLongText("This Tool !!!"); 
11E2:  CLRF   78
11E3:  MOVLW  0E
11E4:  MOVWF  77
11E5:  MOVLW  51
11E6:  MOVWF  04
11E7:  BCF    03.7
11E8:  MOVF   78,W
11E9:  BCF    0A.4
11EA:  CALL   0A7
11EB:  BSF    0A.4
11EC:  MOVWF  00
11ED:  INCF   78,F
11EE:  INCF   04,F
11EF:  DECFSZ 77,F
11F0:  GOTO   1E8
11F1:  CLRF   66
11F2:  MOVLW  51
11F3:  MOVWF  65
11F4:  CALL   059
....................              
....................             } 
....................     
....................  
.................... } 
11F5:  BCF    0A.3
11F6:  BSF    0A.4
11F7:  GOTO   543 (RETURN)
....................  
....................  
.................... ///////////////// 
.................... //Menu Function 
.................... //////////////// 
....................  
....................  
....................  
.................... ///////////////// 
.................... //Calibrate Function 
.................... //////////////// 
....................  
.................... int16 calibrate(int16 analog){ 
....................    return analog; //You could use this function when there's no input electric device. 
10D5:  MOVF   63,W
10D6:  MOVWF  78
10D7:  MOVF   64,W
10D8:  MOVWF  79
....................  
....................  
.................... } 
.................... int16 resetcalibrate(){ 
....................    return 525;   //return old reference. 
116E:  MOVLW  0D
116F:  MOVWF  78
1170:  MOVLW  02
1171:  MOVWF  79
....................  
.................... } 
.................... ///////////////// 
.................... //Calibrate Function 
.................... //////////////// 
....................  
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
.................... int1 checkselect(int1 menu){ 
....................         
....................       if(selectUsed==0 && selectPush==1){ 
10B3:  BTFSC  28.1
10B4:  GOTO   0BF
10B5:  BTFSS  28.0
10B6:  GOTO   0BF
....................          selectUsed=1; 
10B7:  BSF    28.1
....................          menu+=1; 
10B8:  MOVLW  01
10B9:  ADDWF  64,F
....................          clearDisplay(); 
10BA:  BCF    0A.4
10BB:  BSF    0A.3
10BC:  CALL   7BE
10BD:  BSF    0A.4
10BE:  BCF    0A.3
....................        } 
....................     
....................        return menu; 
10BF:  MOVF   64,W
10C0:  MOVWF  78
.................... } 
10C1:  RETURN
....................  
.................... int1 checkexit(int1 menu){ 
....................         
....................        if(exitUsed==0 && exitPush==1){ 
....................          exitUsed=1; 
....................          menu=1; 
....................          clearDisplay(); 
....................        } 
....................        else{ 
....................          menu=0; 
....................         
....................        } 
....................        return menu; 
.................... } 
....................  
.................... int checkleft(int menu){ 
....................         
....................        if(leftUsed==0 && leftPush==1){ 
07F2:  BTFSC  28.5
07F3:  GOTO   7FC
07F4:  BTFSS  28.4
07F5:  GOTO   7FC
....................          leftUsed=1; 
07F6:  BSF    28.5
....................          menu-=1; 
07F7:  MOVLW  01
07F8:  SUBWF  63,F
....................          clearDisplay(); 
07F9:  BSF    0A.3
07FA:  CALL   7BE
07FB:  BCF    0A.3
....................        } 
....................         
....................        return menu; 
07FC:  MOVF   63,W
07FD:  MOVWF  78
.................... } 
07FE:  RETURN
....................  
.................... int checkright(int menu){ 
....................         
....................        if(rightUsed==0 && rightPush==1){ 
0FD3:  BTFSC  28.7
0FD4:  GOTO   7DB
0FD5:  BTFSS  28.6
0FD6:  GOTO   7DB
....................          rightUsed=1; 
0FD7:  BSF    28.7
....................          menu+=1; 
0FD8:  MOVLW  01
0FD9:  ADDWF  63,F
....................          clearDisplay(); 
0FDA:  CALL   7BE
....................        } 
....................         
....................        return menu; 
0FDB:  MOVF   63,W
0FDC:  MOVWF  78
.................... } 
0FDD:  RETURN
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void displayLongText(char* text) { 
....................  
.................... int i ; 
.................... i2c_start(); 
1059:  BSF    03.5
105A:  BSF    11.0
105B:  BTFSC  11.0
105C:  GOTO   05B
.................... i2c_write(DISPLAY_ADDRESS); 
105D:  MOVLW  B4
105E:  BCF    03.5
105F:  MOVWF  69
1060:  BCF    0A.4
1061:  CALL   7E2
1062:  BSF    0A.4
.................... i2c_write(DISPLAY_CMD_SEND_LONG_TEXT); 
1063:  MOVLW  05
1064:  MOVWF  69
1065:  BCF    0A.4
1066:  CALL   7E2
1067:  BSF    0A.4
....................  
.................... for(i=0;text[i]!='\0';i++) 
1068:  CLRF   67
1069:  MOVF   67,W
106A:  ADDWF  65,W
106B:  MOVWF  04
106C:  BCF    03.7
106D:  BTFSC  66.0
106E:  BSF    03.7
106F:  MOVF   00,F
1070:  BTFSC  03.2
1071:  GOTO   080
.................... { 
.................... i2c_write(text[i]); 
1072:  MOVF   67,W
1073:  ADDWF  65,W
1074:  MOVWF  04
1075:  BCF    03.7
1076:  BTFSC  66.0
1077:  BSF    03.7
1078:  MOVF   00,W
1079:  MOVWF  68
107A:  MOVWF  69
107B:  BCF    0A.4
107C:  CALL   7E2
107D:  BSF    0A.4
....................  
.................... } 
107E:  INCF   67,F
107F:  GOTO   069
.................... i2c_write('\0'); 
1080:  CLRF   69
1081:  BCF    0A.4
1082:  CALL   7E2
1083:  BSF    0A.4
.................... i2c_stop(); 
1084:  BSF    03.5
1085:  BSF    11.2
1086:  BTFSC  11.2
1087:  GOTO   086
....................  
.................... //delay_ms(100); 
....................  
.................... } 
1088:  BCF    03.5
1089:  RETURN
....................  
....................  
.................... void displayValue(int16 value[]) { 
....................  
....................    i2c_start(); 
108A:  BSF    03.5
108B:  BSF    11.0
108C:  BTFSC  11.0
108D:  GOTO   08C
....................    i2c_write(DISPLAY_ADDRESS); 
108E:  MOVLW  B4
108F:  BCF    03.5
1090:  MOVWF  69
1091:  BCF    0A.4
1092:  CALL   7E2
1093:  BSF    0A.4
....................    i2c_write(DISPLAY_CMD_SEND_VALUE); 
1094:  MOVLW  02
1095:  MOVWF  69
1096:  BCF    0A.4
1097:  CALL   7E2
1098:  BSF    0A.4
....................    i2c_write((int)(value>>8)); // high byte 
1099:  MOVF   42,W
109A:  CLRF   7A
109B:  MOVWF  43
109C:  MOVWF  69
109D:  BCF    0A.4
109E:  CALL   7E2
109F:  BSF    0A.4
....................    i2c_write((int)(value & 0xFF)); // low byte 
10A0:  MOVF   41,W
10A1:  MOVWF  77
10A2:  CLRF   7A
10A3:  MOVF   41,W
10A4:  MOVWF  43
10A5:  MOVWF  69
10A6:  BCF    0A.4
10A7:  CALL   7E2
10A8:  BSF    0A.4
....................    i2c_write('\0'); 
10A9:  CLRF   69
10AA:  BCF    0A.4
10AB:  CALL   7E2
10AC:  BSF    0A.4
....................    i2c_stop(); 
10AD:  BSF    03.5
10AE:  BSF    11.2
10AF:  BTFSC  11.2
10B0:  GOTO   0AF
....................     
.................... } 
10B1:  BCF    03.5
10B2:  RETURN
....................  
.................... void clearDisplay(){ 
....................  
....................    i2c_start(); 
0FBE:  BSF    03.5
0FBF:  BSF    11.0
0FC0:  BTFSC  11.0
0FC1:  GOTO   7C0
....................    i2c_write(DISPLAY_ADDRESS); 
0FC2:  MOVLW  B4
0FC3:  BCF    03.5
0FC4:  MOVWF  69
0FC5:  BCF    0A.3
0FC6:  CALL   7E2
0FC7:  BSF    0A.3
....................    i2c_write(DISPLAY_CMD_CLS); 
0FC8:  MOVLW  06
0FC9:  MOVWF  69
0FCA:  BCF    0A.3
0FCB:  CALL   7E2
0FCC:  BSF    0A.3
....................    i2c_stop(); 
0FCD:  BSF    03.5
0FCE:  BSF    11.2
0FCF:  BTFSC  11.2
0FD0:  GOTO   7CF
.................... } 
0FD1:  BCF    03.5
0FD2:  RETURN
....................  
.................... void setDisplayPos(int pos){ 
....................    i2c_start(); 
0FDE:  BSF    03.5
0FDF:  BSF    11.0
0FE0:  BTFSC  11.0
0FE1:  GOTO   7E0
....................    i2c_write(DISPLAY_ADDRESS); 
0FE2:  MOVLW  B4
0FE3:  BCF    03.5
0FE4:  MOVWF  69
0FE5:  BCF    0A.3
0FE6:  CALL   7E2
0FE7:  BSF    0A.3
....................    i2c_write(DISPLAY_CMD_SETPOS); 
0FE8:  MOVLW  08
0FE9:  MOVWF  69
0FEA:  BCF    0A.3
0FEB:  CALL   7E2
0FEC:  BSF    0A.3
....................    i2c_write(pos); 
0FED:  MOVF   63,W
0FEE:  MOVWF  69
0FEF:  BCF    0A.3
0FF0:  CALL   7E2
0FF1:  BSF    0A.3
....................    i2c_write('\0'); 
0FF2:  CLRF   69
0FF3:  BCF    0A.3
0FF4:  CALL   7E2
0FF5:  BSF    0A.3
....................    i2c_stop(); 
0FF6:  BSF    03.5
0FF7:  BSF    11.2
0FF8:  BTFSC  11.2
0FF9:  GOTO   7F8
.................... } 
0FFA:  BCF    03.5
0FFB:  RETURN
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 

Configuration Fuses:
   Word  1: 2FC2   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
