CCS PCM C Compiler, Version 4.141, 64203               01-¡.¾.-14 17:41

               Filename:   E:\from c\slide\microcontroller\PIC\Project2\Project1\project1.lst

               ROM used:   4821 words (59%)
                           Largest free fragment is 2048
               RAM used:   63 (17%) at main() level
                           140 (38%) worst case
               Stack:     5 worst case (4 in main + 1 for interrupts)

0000:  MOVLW  10
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   050
....................  
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
*
*
*
*
.................... #list 
....................  
.................... #device adc=10  // use 10-bit ADC 
.................... #device PASS_STRINGS=IN_RAM 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
042C:  BSF    03.5
042D:  BCF    33.0
....................    y = x; 
042E:  MOVF   27,W
042F:  MOVWF  2C
0430:  MOVF   26,W
0431:  MOVWF  2B
0432:  MOVF   25,W
0433:  MOVWF  2A
0434:  MOVF   24,W
0435:  MOVWF  29
....................  
....................    if (x < 0) 
0436:  MOVF   27,W
0437:  MOVWF  37
0438:  MOVF   26,W
0439:  MOVWF  36
043A:  MOVF   25,W
043B:  MOVWF  35
043C:  MOVF   24,W
043D:  MOVWF  34
043E:  CLRF   3B
043F:  CLRF   3A
0440:  CLRF   39
0441:  CLRF   38
0442:  BCF    03.5
0443:  CALL   141
0444:  BTFSS  03.0
0445:  GOTO   44C
....................    { 
....................       s = 1; 
0446:  BSF    03.5
0447:  BSF    33.0
....................       y = -y; 
0448:  MOVF   2A,W
0449:  XORLW  80
044A:  MOVWF  2A
044B:  BCF    03.5
....................    } 
....................  
....................    if (y <= 32768.0) 
044C:  BSF    03.5
044D:  MOVF   2C,W
044E:  MOVWF  37
044F:  MOVF   2B,W
0450:  MOVWF  36
0451:  MOVF   2A,W
0452:  MOVWF  35
0453:  MOVF   29,W
0454:  MOVWF  34
0455:  CLRF   3B
0456:  CLRF   3A
0457:  CLRF   39
0458:  MOVLW  8E
0459:  MOVWF  38
045A:  BCF    03.5
045B:  CALL   141
045C:  BTFSC  03.0
045D:  GOTO   460
045E:  BTFSS  03.2
045F:  GOTO   47D
....................       res = (float32)(unsigned int16)y; 
0460:  BSF    03.5
0461:  MOVF   2C,W
0462:  MOVWF  37
0463:  MOVF   2B,W
0464:  MOVWF  36
0465:  MOVF   2A,W
0466:  MOVWF  35
0467:  MOVF   29,W
0468:  MOVWF  34
0469:  BCF    03.5
046A:  CALL   24E
046B:  MOVF   79,W
046C:  BSF    03.5
046D:  MOVWF  39
046E:  MOVF   78,W
046F:  MOVWF  38
0470:  BCF    03.5
0471:  CALL   122
0472:  MOVF   7A,W
0473:  BSF    03.5
0474:  MOVWF  30
0475:  MOVF   79,W
0476:  MOVWF  2F
0477:  MOVF   78,W
0478:  MOVWF  2E
0479:  MOVF   77,W
047A:  MOVWF  2D
....................  
....................  else if (y < 10000000.0) 
047B:  GOTO   555
047C:  BCF    03.5
047D:  BSF    03.5
047E:  MOVF   2C,W
047F:  MOVWF  37
0480:  MOVF   2B,W
0481:  MOVWF  36
0482:  MOVF   2A,W
0483:  MOVWF  35
0484:  MOVF   29,W
0485:  MOVWF  34
0486:  MOVLW  80
0487:  MOVWF  3B
0488:  MOVLW  96
0489:  MOVWF  3A
048A:  MOVLW  18
048B:  MOVWF  39
048C:  MOVLW  96
048D:  MOVWF  38
048E:  BCF    03.5
048F:  CALL   141
0490:  BTFSS  03.0
0491:  GOTO   54C
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
0492:  BSF    03.5
0493:  MOVF   2C,W
0494:  MOVWF  37
0495:  MOVF   2B,W
0496:  MOVWF  36
0497:  MOVF   2A,W
0498:  MOVWF  35
0499:  MOVF   29,W
049A:  MOVWF  34
049B:  CLRF   3B
049C:  CLRF   3A
049D:  CLRF   39
049E:  MOVLW  70
049F:  MOVWF  38
04A0:  BCF    03.5
04A1:  CALL   26F
04A2:  MOVF   7A,W
04A3:  BSF    03.5
04A4:  MOVWF  37
04A5:  MOVF   79,W
04A6:  MOVWF  36
04A7:  MOVF   78,W
04A8:  MOVWF  35
04A9:  MOVF   77,W
04AA:  MOVWF  34
04AB:  BCF    03.5
04AC:  CALL   24E
04AD:  MOVF   79,W
04AE:  BSF    03.5
04AF:  MOVWF  32
04B0:  MOVF   78,W
04B1:  MOVWF  31
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
04B2:  MOVF   2C,W
04B3:  MOVWF  37
04B4:  MOVF   2B,W
04B5:  MOVWF  36
04B6:  MOVF   2A,W
04B7:  MOVWF  35
04B8:  MOVF   29,W
04B9:  MOVWF  34
04BA:  CLRF   3B
04BB:  CLRF   3A
04BC:  CLRF   39
04BD:  MOVLW  70
04BE:  MOVWF  38
04BF:  BCF    03.5
04C0:  CALL   26F
04C1:  MOVF   7A,W
04C2:  BSF    03.5
04C3:  MOVWF  37
04C4:  MOVF   79,W
04C5:  MOVWF  36
04C6:  MOVF   78,W
04C7:  MOVWF  35
04C8:  MOVF   77,W
04C9:  MOVWF  34
04CA:  MOVF   32,W
04CB:  MOVWF  39
04CC:  MOVF   31,W
04CD:  MOVWF  38
04CE:  BCF    03.5
04CF:  CALL   122
04D0:  BSF    03.1
04D1:  BSF    03.5
04D2:  MOVF   37,W
04D3:  MOVWF  3B
04D4:  MOVF   36,W
04D5:  MOVWF  3A
04D6:  MOVF   35,W
04D7:  MOVWF  39
04D8:  MOVF   34,W
04D9:  MOVWF  38
04DA:  MOVF   7A,W
04DB:  MOVWF  3F
04DC:  MOVF   79,W
04DD:  MOVWF  3E
04DE:  MOVF   78,W
04DF:  MOVWF  3D
04E0:  MOVF   77,W
04E1:  MOVWF  3C
04E2:  BCF    03.5
04E3:  CALL   2E6
04E4:  BSF    03.5
04E5:  CLRF   37
04E6:  CLRF   36
04E7:  CLRF   35
04E8:  MOVLW  8E
04E9:  MOVWF  34
04EA:  MOVF   7A,W
04EB:  MOVWF  3B
04EC:  MOVF   79,W
04ED:  MOVWF  3A
04EE:  MOVF   78,W
04EF:  MOVWF  39
04F0:  MOVF   77,W
04F1:  MOVWF  38
04F2:  BCF    03.5
04F3:  CALL   26F
04F4:  MOVF   7A,W
04F5:  BSF    03.5
04F6:  MOVWF  2C
04F7:  MOVF   79,W
04F8:  MOVWF  2B
04F9:  MOVF   78,W
04FA:  MOVWF  2A
04FB:  MOVF   77,W
04FC:  MOVWF  29
....................       res = 32768.0*(float32)l; 
04FD:  MOVF   32,W
04FE:  MOVWF  39
04FF:  MOVF   31,W
0500:  MOVWF  38
0501:  BCF    03.5
0502:  CALL   122
0503:  BSF    03.5
0504:  CLRF   37
0505:  CLRF   36
0506:  CLRF   35
0507:  MOVLW  8E
0508:  MOVWF  34
0509:  MOVF   7A,W
050A:  MOVWF  3B
050B:  MOVF   79,W
050C:  MOVWF  3A
050D:  MOVF   78,W
050E:  MOVWF  39
050F:  MOVF   77,W
0510:  MOVWF  38
0511:  BCF    03.5
0512:  CALL   26F
0513:  MOVF   7A,W
0514:  BSF    03.5
0515:  MOVWF  30
0516:  MOVF   79,W
0517:  MOVWF  2F
0518:  MOVF   78,W
0519:  MOVWF  2E
051A:  MOVF   77,W
051B:  MOVWF  2D
....................       res += (float32)(unsigned int16)y; 
051C:  MOVF   2C,W
051D:  MOVWF  37
051E:  MOVF   2B,W
051F:  MOVWF  36
0520:  MOVF   2A,W
0521:  MOVWF  35
0522:  MOVF   29,W
0523:  MOVWF  34
0524:  BCF    03.5
0525:  CALL   24E
0526:  MOVF   79,W
0527:  BSF    03.5
0528:  MOVWF  39
0529:  MOVF   78,W
052A:  MOVWF  38
052B:  BCF    03.5
052C:  CALL   122
052D:  BCF    03.1
052E:  BSF    03.5
052F:  MOVF   30,W
0530:  MOVWF  3B
0531:  MOVF   2F,W
0532:  MOVWF  3A
0533:  MOVF   2E,W
0534:  MOVWF  39
0535:  MOVF   2D,W
0536:  MOVWF  38
0537:  MOVF   7A,W
0538:  MOVWF  3F
0539:  MOVF   79,W
053A:  MOVWF  3E
053B:  MOVF   78,W
053C:  MOVWF  3D
053D:  MOVF   77,W
053E:  MOVWF  3C
053F:  BCF    03.5
0540:  CALL   2E6
0541:  MOVF   7A,W
0542:  BSF    03.5
0543:  MOVWF  30
0544:  MOVF   79,W
0545:  MOVWF  2F
0546:  MOVF   78,W
0547:  MOVWF  2E
0548:  MOVF   77,W
0549:  MOVWF  2D
....................    } 
....................  
....................  else 
054A:  GOTO   555
054B:  BCF    03.5
....................   res = y; 
054C:  BSF    03.5
054D:  MOVF   2C,W
054E:  MOVWF  30
054F:  MOVF   2B,W
0550:  MOVWF  2F
0551:  MOVF   2A,W
0552:  MOVWF  2E
0553:  MOVF   29,W
0554:  MOVWF  2D
....................  
....................  y = y - (float32)(unsigned int16)y; 
0555:  MOVF   2C,W
0556:  MOVWF  37
0557:  MOVF   2B,W
0558:  MOVWF  36
0559:  MOVF   2A,W
055A:  MOVWF  35
055B:  MOVF   29,W
055C:  MOVWF  34
055D:  BCF    03.5
055E:  CALL   24E
055F:  MOVF   79,W
0560:  BSF    03.5
0561:  MOVWF  39
0562:  MOVF   78,W
0563:  MOVWF  38
0564:  BCF    03.5
0565:  CALL   122
0566:  BSF    03.1
0567:  BSF    03.5
0568:  MOVF   2C,W
0569:  MOVWF  3B
056A:  MOVF   2B,W
056B:  MOVWF  3A
056C:  MOVF   2A,W
056D:  MOVWF  39
056E:  MOVF   29,W
056F:  MOVWF  38
0570:  MOVF   7A,W
0571:  MOVWF  3F
0572:  MOVF   79,W
0573:  MOVWF  3E
0574:  MOVF   78,W
0575:  MOVWF  3D
0576:  MOVF   77,W
0577:  MOVWF  3C
0578:  BCF    03.5
0579:  CALL   2E6
057A:  MOVF   7A,W
057B:  BSF    03.5
057C:  MOVWF  2C
057D:  MOVF   79,W
057E:  MOVWF  2B
057F:  MOVF   78,W
0580:  MOVWF  2A
0581:  MOVF   77,W
0582:  MOVWF  29
....................  
....................  if (s) 
0583:  BTFSS  33.0
0584:  GOTO   588
....................   res = -res; 
0585:  MOVF   2E,W
0586:  XORLW  80
0587:  MOVWF  2E
....................  
....................  if (y != 0) 
0588:  MOVF   2C,W
0589:  MOVWF  37
058A:  MOVF   2B,W
058B:  MOVWF  36
058C:  MOVF   2A,W
058D:  MOVWF  35
058E:  MOVF   29,W
058F:  MOVWF  34
0590:  CLRF   3B
0591:  CLRF   3A
0592:  CLRF   39
0593:  CLRF   38
0594:  BCF    03.5
0595:  CALL   141
0596:  BTFSC  03.2
0597:  GOTO   5D5
....................  { 
....................   if (s == 1 && n == 0) 
0598:  BSF    03.5
0599:  BTFSS  33.0
059A:  GOTO   5B7
059B:  MOVF   28,F
059C:  BTFSS  03.2
059D:  GOTO   5B7
....................    res -= 1.0; 
059E:  BSF    03.1
059F:  MOVF   30,W
05A0:  MOVWF  3B
05A1:  MOVF   2F,W
05A2:  MOVWF  3A
05A3:  MOVF   2E,W
05A4:  MOVWF  39
05A5:  MOVF   2D,W
05A6:  MOVWF  38
05A7:  CLRF   3F
05A8:  CLRF   3E
05A9:  CLRF   3D
05AA:  MOVLW  7F
05AB:  MOVWF  3C
05AC:  BCF    03.5
05AD:  CALL   2E6
05AE:  MOVF   7A,W
05AF:  BSF    03.5
05B0:  MOVWF  30
05B1:  MOVF   79,W
05B2:  MOVWF  2F
05B3:  MOVF   78,W
05B4:  MOVWF  2E
05B5:  MOVF   77,W
05B6:  MOVWF  2D
....................  
....................   if (s == 0 && n == 1) 
05B7:  BTFSC  33.0
05B8:  GOTO   5D4
05B9:  DECFSZ 28,W
05BA:  GOTO   5D4
....................    res += 1.0; 
05BB:  BCF    03.1
05BC:  MOVF   30,W
05BD:  MOVWF  3B
05BE:  MOVF   2F,W
05BF:  MOVWF  3A
05C0:  MOVF   2E,W
05C1:  MOVWF  39
05C2:  MOVF   2D,W
05C3:  MOVWF  38
05C4:  CLRF   3F
05C5:  CLRF   3E
05C6:  CLRF   3D
05C7:  MOVLW  7F
05C8:  MOVWF  3C
05C9:  BCF    03.5
05CA:  CALL   2E6
05CB:  MOVF   7A,W
05CC:  BSF    03.5
05CD:  MOVWF  30
05CE:  MOVF   79,W
05CF:  MOVWF  2F
05D0:  MOVF   78,W
05D1:  MOVWF  2E
05D2:  MOVF   77,W
05D3:  MOVWF  2D
05D4:  BCF    03.5
....................  } 
....................  if (x == 0) 
05D5:  BSF    03.5
05D6:  MOVF   27,W
05D7:  MOVWF  37
05D8:  MOVF   26,W
05D9:  MOVWF  36
05DA:  MOVF   25,W
05DB:  MOVWF  35
05DC:  MOVF   24,W
05DD:  MOVWF  34
05DE:  CLRF   3B
05DF:  CLRF   3A
05E0:  CLRF   39
05E1:  CLRF   38
05E2:  BCF    03.5
05E3:  CALL   141
05E4:  BTFSS  03.2
05E5:  GOTO   5EC
....................     res = 0; 
05E6:  BSF    03.5
05E7:  CLRF   30
05E8:  CLRF   2F
05E9:  CLRF   2E
05EA:  CLRF   2D
05EB:  BCF    03.5
....................  
....................  return (res); 
05EC:  BSF    03.5
05ED:  MOVF   2D,W
05EE:  MOVWF  77
05EF:  MOVF   2E,W
05F0:  MOVWF  78
05F1:  MOVF   2F,W
05F2:  MOVWF  79
05F3:  MOVF   30,W
05F4:  MOVWF  7A
.................... } 
05F5:  BCF    03.5
05F6:  RETURN
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
06AB:  MOVF   23,W
06AC:  MOVWF  27
06AD:  MOVF   22,W
06AE:  MOVWF  26
06AF:  MOVF   21,W
06B0:  MOVWF  25
06B1:  MOVF   20,W
06B2:  MOVWF  24
06B3:  CLRF   28
06B4:  BCF    03.5
06B5:  CALL   42C
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
0670:  MOVF   23,W
0671:  MOVWF  27
0672:  MOVF   22,W
0673:  MOVWF  26
0674:  MOVF   21,W
0675:  MOVWF  25
0676:  MOVF   20,W
0677:  MOVWF  24
0678:  MOVLW  01
0679:  MOVWF  28
067A:  BCF    03.5
067B:  CALL   42C
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
05F7:  MOVF   71,W
05F8:  BSF    03.5
05F9:  MOVWF  37
05FA:  MOVF   70,W
05FB:  MOVWF  36
05FC:  BCF    03.5
05FD:  MOVF   6F,W
05FE:  BSF    03.5
05FF:  MOVWF  35
0600:  BCF    03.5
0601:  MOVF   6E,W
0602:  BSF    03.5
0603:  MOVWF  34
0604:  CLRF   3B
0605:  CLRF   3A
0606:  CLRF   39
0607:  CLRF   38
0608:  BCF    03.5
0609:  CALL   141
060A:  BTFSC  03.2
060B:  GOTO   6F0
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
060C:  MOVF   6D,W
060D:  BSF    03.5
060E:  MOVWF  30
060F:  BCF    03.5
0610:  MOVF   6C,W
0611:  BSF    03.5
0612:  MOVWF  2F
0613:  BCF    03.5
0614:  MOVF   6B,W
0615:  BSF    03.5
0616:  MOVWF  2E
0617:  BCF    03.5
0618:  MOVF   6A,W
0619:  BSF    03.5
061A:  MOVWF  2D
061B:  MOVF   71,W
061C:  MOVWF  34
061D:  MOVF   70,W
061E:  MOVWF  33
061F:  BCF    03.5
0620:  MOVF   6F,W
0621:  BSF    03.5
0622:  MOVWF  32
0623:  BCF    03.5
0624:  MOVF   6E,W
0625:  BSF    03.5
0626:  MOVWF  31
0627:  BCF    03.5
0628:  CALL   182
0629:  MOVF   7A,W
062A:  MOVWF  7E
062B:  MOVF   79,W
062C:  MOVWF  7D
062D:  MOVF   78,W
062E:  MOVWF  7C
062F:  MOVF   77,W
0630:  MOVWF  7B
0631:  MOVF   7E,W
0632:  BSF    03.5
0633:  MOVWF  37
0634:  MOVF   7D,W
0635:  MOVWF  36
0636:  MOVF   7C,W
0637:  MOVWF  35
0638:  MOVF   7B,W
0639:  MOVWF  34
063A:  CLRF   3B
063B:  CLRF   3A
063C:  CLRF   39
063D:  CLRF   38
063E:  BCF    03.5
063F:  CALL   141
0640:  BTFSS  03.0
0641:  GOTO   67D
0642:  MOVF   6D,W
0643:  BSF    03.5
0644:  MOVWF  30
0645:  BCF    03.5
0646:  MOVF   6C,W
0647:  BSF    03.5
0648:  MOVWF  2F
0649:  BCF    03.5
064A:  MOVF   6B,W
064B:  BSF    03.5
064C:  MOVWF  2E
064D:  BCF    03.5
064E:  MOVF   6A,W
064F:  BSF    03.5
0650:  MOVWF  2D
0651:  MOVF   71,W
0652:  MOVWF  34
0653:  MOVF   70,W
0654:  MOVWF  33
0655:  BCF    03.5
0656:  MOVF   6F,W
0657:  BSF    03.5
0658:  MOVWF  32
0659:  BCF    03.5
065A:  MOVF   6E,W
065B:  BSF    03.5
065C:  MOVWF  31
065D:  BCF    03.5
065E:  CALL   182
065F:  MOVF   7A,W
0660:  MOVWF  7E
0661:  MOVF   79,W
0662:  MOVWF  7D
0663:  MOVF   78,W
0664:  MOVWF  7C
0665:  MOVF   77,W
0666:  MOVWF  7B
0667:  MOVF   7E,W
0668:  BSF    03.5
0669:  MOVWF  23
066A:  MOVF   7D,W
066B:  MOVWF  22
066C:  MOVF   7C,W
066D:  MOVWF  21
066E:  MOVF   7B,W
066F:  MOVWF  20
067C:  GOTO   6B6
067D:  MOVF   6D,W
067E:  BSF    03.5
067F:  MOVWF  30
0680:  BCF    03.5
0681:  MOVF   6C,W
0682:  BSF    03.5
0683:  MOVWF  2F
0684:  BCF    03.5
0685:  MOVF   6B,W
0686:  BSF    03.5
0687:  MOVWF  2E
0688:  BCF    03.5
0689:  MOVF   6A,W
068A:  BSF    03.5
068B:  MOVWF  2D
068C:  MOVF   71,W
068D:  MOVWF  34
068E:  MOVF   70,W
068F:  MOVWF  33
0690:  BCF    03.5
0691:  MOVF   6F,W
0692:  BSF    03.5
0693:  MOVWF  32
0694:  BCF    03.5
0695:  MOVF   6E,W
0696:  BSF    03.5
0697:  MOVWF  31
0698:  BCF    03.5
0699:  CALL   182
069A:  MOVF   7A,W
069B:  MOVWF  7E
069C:  MOVF   79,W
069D:  MOVWF  7D
069E:  MOVF   78,W
069F:  MOVWF  7C
06A0:  MOVF   77,W
06A1:  MOVWF  7B
06A2:  MOVF   7E,W
06A3:  BSF    03.5
06A4:  MOVWF  23
06A5:  MOVF   7D,W
06A6:  MOVWF  22
06A7:  MOVF   7C,W
06A8:  MOVWF  21
06A9:  MOVF   7B,W
06AA:  MOVWF  20
06B6:  MOVF   7A,W
06B7:  MOVWF  75
06B8:  MOVF   79,W
06B9:  MOVWF  74
06BA:  MOVF   78,W
06BB:  MOVWF  73
06BC:  MOVF   77,W
06BD:  MOVWF  72
....................       return(x-(i*y)); 
06BE:  MOVF   75,W
06BF:  BSF    03.5
06C0:  MOVWF  37
06C1:  MOVF   74,W
06C2:  MOVWF  36
06C3:  MOVF   73,W
06C4:  MOVWF  35
06C5:  MOVF   72,W
06C6:  MOVWF  34
06C7:  MOVF   71,W
06C8:  MOVWF  3B
06C9:  MOVF   70,W
06CA:  MOVWF  3A
06CB:  BCF    03.5
06CC:  MOVF   6F,W
06CD:  BSF    03.5
06CE:  MOVWF  39
06CF:  BCF    03.5
06D0:  MOVF   6E,W
06D1:  BSF    03.5
06D2:  MOVWF  38
06D3:  BCF    03.5
06D4:  CALL   26F
06D5:  BSF    03.1
06D6:  MOVF   6D,W
06D7:  BSF    03.5
06D8:  MOVWF  3B
06D9:  BCF    03.5
06DA:  MOVF   6C,W
06DB:  BSF    03.5
06DC:  MOVWF  3A
06DD:  BCF    03.5
06DE:  MOVF   6B,W
06DF:  BSF    03.5
06E0:  MOVWF  39
06E1:  BCF    03.5
06E2:  MOVF   6A,W
06E3:  BSF    03.5
06E4:  MOVWF  38
06E5:  MOVF   7A,W
06E6:  MOVWF  3F
06E7:  MOVF   79,W
06E8:  MOVWF  3E
06E9:  MOVF   78,W
06EA:  MOVWF  3D
06EB:  MOVF   77,W
06EC:  MOVWF  3C
06ED:  BCF    03.5
06EE:  CALL   2E6
06EF:  GOTO   6F0
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
06F0:  RETURN
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
09E8:  MOVF   71,W
09E9:  BSF    03.5
09EA:  MOVWF  37
09EB:  MOVF   70,W
09EC:  MOVWF  36
09ED:  BCF    03.5
09EE:  MOVF   6F,W
09EF:  BSF    03.5
09F0:  MOVWF  35
09F1:  BCF    03.5
09F2:  MOVF   6E,W
09F3:  BSF    03.5
09F4:  MOVWF  34
09F5:  MOVLW  3B
09F6:  MOVWF  3B
09F7:  MOVLW  AA
09F8:  MOVWF  3A
09F9:  MOVLW  38
09FA:  MOVWF  39
09FB:  MOVLW  7F
09FC:  MOVWF  38
09FD:  BCF    0A.3
09FE:  BCF    03.5
09FF:  CALL   26F
0A00:  BSF    0A.3
0A01:  MOVF   7A,W
0A02:  BSF    03.5
0A03:  MOVWF  37
0A04:  MOVF   79,W
0A05:  MOVWF  36
0A06:  MOVF   78,W
0A07:  MOVWF  35
0A08:  MOVF   77,W
0A09:  MOVWF  34
0A0A:  BCF    0A.3
0A0B:  BCF    03.5
0A0C:  CALL   24E
0A0D:  BSF    0A.3
0A0E:  MOVF   78,W
0A0F:  MOVWF  76
....................    s = 0; 
0A10:  BSF    03.5
0A11:  BCF    24.0
....................    y = x; 
0A12:  MOVF   71,W
0A13:  MOVWF  75
0A14:  MOVF   70,W
0A15:  MOVWF  74
0A16:  BCF    03.5
0A17:  MOVF   6F,W
0A18:  MOVWF  73
0A19:  MOVF   6E,W
0A1A:  MOVWF  72
....................  
....................    if (x < 0) 
0A1B:  MOVF   71,W
0A1C:  BSF    03.5
0A1D:  MOVWF  37
0A1E:  MOVF   70,W
0A1F:  MOVWF  36
0A20:  BCF    03.5
0A21:  MOVF   6F,W
0A22:  BSF    03.5
0A23:  MOVWF  35
0A24:  BCF    03.5
0A25:  MOVF   6E,W
0A26:  BSF    03.5
0A27:  MOVWF  34
0A28:  CLRF   3B
0A29:  CLRF   3A
0A2A:  CLRF   39
0A2B:  CLRF   38
0A2C:  BCF    0A.3
0A2D:  BCF    03.5
0A2E:  CALL   141
0A2F:  BSF    0A.3
0A30:  BTFSS  03.0
0A31:  GOTO   23A
....................    { 
....................       s = 1; 
0A32:  BSF    03.5
0A33:  BSF    24.0
....................       n = -n; 
0A34:  COMF   76,F
0A35:  INCF   76,F
....................       y = -y; 
0A36:  MOVF   73,W
0A37:  XORLW  80
0A38:  MOVWF  73
0A39:  BCF    03.5
....................    } 
....................  
....................    res = 0.0; 
0A3A:  CLRF   7E
0A3B:  CLRF   7D
0A3C:  CLRF   7C
0A3D:  CLRF   7B
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
0A3E:  BSF    03.5
0A3F:  CLRF   26
0A40:  MOVLW  7B
0A41:  MOVWF  25
0A42:  MOVF   25,W
0A43:  MOVWF  04
0A44:  BCF    03.7
0A45:  BTFSC  26.0
0A46:  BSF    03.7
0A47:  MOVLW  7F
0A48:  ADDWF  76,W
0A49:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
0A4A:  MOVF   75,W
0A4B:  MOVWF  37
0A4C:  MOVF   74,W
0A4D:  MOVWF  36
0A4E:  MOVF   73,W
0A4F:  MOVWF  35
0A50:  MOVF   72,W
0A51:  MOVWF  34
0A52:  MOVLW  3B
0A53:  MOVWF  3B
0A54:  MOVLW  AA
0A55:  MOVWF  3A
0A56:  MOVLW  38
0A57:  MOVWF  39
0A58:  MOVLW  7F
0A59:  MOVWF  38
0A5A:  BCF    0A.3
0A5B:  BCF    03.5
0A5C:  CALL   26F
0A5D:  BSF    0A.3
0A5E:  MOVF   7A,W
0A5F:  BSF    03.5
0A60:  MOVWF  28
0A61:  MOVF   79,W
0A62:  MOVWF  27
0A63:  MOVF   78,W
0A64:  MOVWF  26
0A65:  MOVF   77,W
0A66:  MOVWF  25
0A67:  CLRF   2B
0A68:  MOVF   76,W
0A69:  MOVWF  2A
0A6A:  BTFSC  2A.7
0A6B:  DECF   2B,F
0A6C:  BCF    0A.3
0A6D:  BCF    03.5
0A6E:  CALL   6F1
0A6F:  BSF    0A.3
0A70:  BSF    03.1
0A71:  BSF    03.5
0A72:  MOVF   28,W
0A73:  MOVWF  3B
0A74:  MOVF   27,W
0A75:  MOVWF  3A
0A76:  MOVF   26,W
0A77:  MOVWF  39
0A78:  MOVF   25,W
0A79:  MOVWF  38
0A7A:  MOVF   7A,W
0A7B:  MOVWF  3F
0A7C:  MOVF   79,W
0A7D:  MOVWF  3E
0A7E:  MOVF   78,W
0A7F:  MOVWF  3D
0A80:  MOVF   77,W
0A81:  MOVWF  3C
0A82:  BCF    0A.3
0A83:  BCF    03.5
0A84:  CALL   2E6
0A85:  BSF    0A.3
0A86:  MOVF   7A,W
0A87:  MOVWF  75
0A88:  MOVF   79,W
0A89:  MOVWF  74
0A8A:  MOVF   78,W
0A8B:  MOVWF  73
0A8C:  MOVF   77,W
0A8D:  MOVWF  72
....................  
....................    r = pe[0]*y + pe[1]; 
0A8E:  MOVLW  7C
0A8F:  BSF    03.5
0A90:  MOVWF  37
0A91:  MOVLW  88
0A92:  MOVWF  36
0A93:  MOVLW  59
0A94:  MOVWF  35
0A95:  MOVLW  72
0A96:  MOVWF  34
0A97:  MOVF   75,W
0A98:  MOVWF  3B
0A99:  MOVF   74,W
0A9A:  MOVWF  3A
0A9B:  MOVF   73,W
0A9C:  MOVWF  39
0A9D:  MOVF   72,W
0A9E:  MOVWF  38
0A9F:  BCF    0A.3
0AA0:  BCF    03.5
0AA1:  CALL   26F
0AA2:  BSF    0A.3
0AA3:  MOVF   7A,W
0AA4:  BSF    03.5
0AA5:  MOVWF  28
0AA6:  MOVF   79,W
0AA7:  MOVWF  27
0AA8:  MOVF   78,W
0AA9:  MOVWF  26
0AAA:  MOVF   77,W
0AAB:  MOVWF  25
0AAC:  BCF    03.1
0AAD:  MOVF   28,W
0AAE:  MOVWF  3B
0AAF:  MOVF   27,W
0AB0:  MOVWF  3A
0AB1:  MOVF   26,W
0AB2:  MOVWF  39
0AB3:  MOVF   25,W
0AB4:  MOVWF  38
0AB5:  MOVLW  E0
0AB6:  MOVWF  3F
0AB7:  MOVLW  97
0AB8:  MOVWF  3E
0AB9:  MOVLW  26
0ABA:  MOVWF  3D
0ABB:  MOVLW  75
0ABC:  MOVWF  3C
0ABD:  BCF    0A.3
0ABE:  BCF    03.5
0ABF:  CALL   2E6
0AC0:  BSF    0A.3
0AC1:  MOVF   7A,W
0AC2:  BSF    03.5
0AC3:  MOVWF  23
0AC4:  MOVF   79,W
0AC5:  MOVWF  22
0AC6:  MOVF   78,W
0AC7:  MOVWF  21
0AC8:  MOVF   77,W
0AC9:  MOVWF  20
....................    r = r*y + pe[2]; 
0ACA:  MOVF   23,W
0ACB:  MOVWF  37
0ACC:  MOVF   22,W
0ACD:  MOVWF  36
0ACE:  MOVF   21,W
0ACF:  MOVWF  35
0AD0:  MOVF   20,W
0AD1:  MOVWF  34
0AD2:  MOVF   75,W
0AD3:  MOVWF  3B
0AD4:  MOVF   74,W
0AD5:  MOVWF  3A
0AD6:  MOVF   73,W
0AD7:  MOVWF  39
0AD8:  MOVF   72,W
0AD9:  MOVWF  38
0ADA:  BCF    0A.3
0ADB:  BCF    03.5
0ADC:  CALL   26F
0ADD:  BSF    0A.3
0ADE:  MOVF   7A,W
0ADF:  BSF    03.5
0AE0:  MOVWF  28
0AE1:  MOVF   79,W
0AE2:  MOVWF  27
0AE3:  MOVF   78,W
0AE4:  MOVWF  26
0AE5:  MOVF   77,W
0AE6:  MOVWF  25
0AE7:  BCF    03.1
0AE8:  MOVF   28,W
0AE9:  MOVWF  3B
0AEA:  MOVF   27,W
0AEB:  MOVWF  3A
0AEC:  MOVF   26,W
0AED:  MOVWF  39
0AEE:  MOVF   25,W
0AEF:  MOVWF  38
0AF0:  MOVLW  C4
0AF1:  MOVWF  3F
0AF2:  MOVLW  1D
0AF3:  MOVWF  3E
0AF4:  MOVLW  1E
0AF5:  MOVWF  3D
0AF6:  MOVLW  78
0AF7:  MOVWF  3C
0AF8:  BCF    0A.3
0AF9:  BCF    03.5
0AFA:  CALL   2E6
0AFB:  BSF    0A.3
0AFC:  MOVF   7A,W
0AFD:  BSF    03.5
0AFE:  MOVWF  23
0AFF:  MOVF   79,W
0B00:  MOVWF  22
0B01:  MOVF   78,W
0B02:  MOVWF  21
0B03:  MOVF   77,W
0B04:  MOVWF  20
....................    r = r*y + pe[3]; 
0B05:  MOVF   23,W
0B06:  MOVWF  37
0B07:  MOVF   22,W
0B08:  MOVWF  36
0B09:  MOVF   21,W
0B0A:  MOVWF  35
0B0B:  MOVF   20,W
0B0C:  MOVWF  34
0B0D:  MOVF   75,W
0B0E:  MOVWF  3B
0B0F:  MOVF   74,W
0B10:  MOVWF  3A
0B11:  MOVF   73,W
0B12:  MOVWF  39
0B13:  MOVF   72,W
0B14:  MOVWF  38
0B15:  BCF    0A.3
0B16:  BCF    03.5
0B17:  CALL   26F
0B18:  BSF    0A.3
0B19:  MOVF   7A,W
0B1A:  BSF    03.5
0B1B:  MOVWF  28
0B1C:  MOVF   79,W
0B1D:  MOVWF  27
0B1E:  MOVF   78,W
0B1F:  MOVWF  26
0B20:  MOVF   77,W
0B21:  MOVWF  25
0B22:  BCF    03.1
0B23:  MOVF   28,W
0B24:  MOVWF  3B
0B25:  MOVF   27,W
0B26:  MOVWF  3A
0B27:  MOVF   26,W
0B28:  MOVWF  39
0B29:  MOVF   25,W
0B2A:  MOVWF  38
0B2B:  MOVLW  5E
0B2C:  MOVWF  3F
0B2D:  MOVLW  50
0B2E:  MOVWF  3E
0B2F:  MOVLW  63
0B30:  MOVWF  3D
0B31:  MOVLW  7A
0B32:  MOVWF  3C
0B33:  BCF    0A.3
0B34:  BCF    03.5
0B35:  CALL   2E6
0B36:  BSF    0A.3
0B37:  MOVF   7A,W
0B38:  BSF    03.5
0B39:  MOVWF  23
0B3A:  MOVF   79,W
0B3B:  MOVWF  22
0B3C:  MOVF   78,W
0B3D:  MOVWF  21
0B3E:  MOVF   77,W
0B3F:  MOVWF  20
....................    r = r*y + pe[4]; 
0B40:  MOVF   23,W
0B41:  MOVWF  37
0B42:  MOVF   22,W
0B43:  MOVWF  36
0B44:  MOVF   21,W
0B45:  MOVWF  35
0B46:  MOVF   20,W
0B47:  MOVWF  34
0B48:  MOVF   75,W
0B49:  MOVWF  3B
0B4A:  MOVF   74,W
0B4B:  MOVWF  3A
0B4C:  MOVF   73,W
0B4D:  MOVWF  39
0B4E:  MOVF   72,W
0B4F:  MOVWF  38
0B50:  BCF    0A.3
0B51:  BCF    03.5
0B52:  CALL   26F
0B53:  BSF    0A.3
0B54:  MOVF   7A,W
0B55:  BSF    03.5
0B56:  MOVWF  28
0B57:  MOVF   79,W
0B58:  MOVWF  27
0B59:  MOVF   78,W
0B5A:  MOVWF  26
0B5B:  MOVF   77,W
0B5C:  MOVWF  25
0B5D:  BCF    03.1
0B5E:  MOVF   28,W
0B5F:  MOVWF  3B
0B60:  MOVF   27,W
0B61:  MOVWF  3A
0B62:  MOVF   26,W
0B63:  MOVWF  39
0B64:  MOVF   25,W
0B65:  MOVWF  38
0B66:  MOVLW  1A
0B67:  MOVWF  3F
0B68:  MOVLW  FE
0B69:  MOVWF  3E
0B6A:  MOVLW  75
0B6B:  MOVWF  3D
0B6C:  MOVLW  7C
0B6D:  MOVWF  3C
0B6E:  BCF    0A.3
0B6F:  BCF    03.5
0B70:  CALL   2E6
0B71:  BSF    0A.3
0B72:  MOVF   7A,W
0B73:  BSF    03.5
0B74:  MOVWF  23
0B75:  MOVF   79,W
0B76:  MOVWF  22
0B77:  MOVF   78,W
0B78:  MOVWF  21
0B79:  MOVF   77,W
0B7A:  MOVWF  20
....................    r = r*y + pe[5]; 
0B7B:  MOVF   23,W
0B7C:  MOVWF  37
0B7D:  MOVF   22,W
0B7E:  MOVWF  36
0B7F:  MOVF   21,W
0B80:  MOVWF  35
0B81:  MOVF   20,W
0B82:  MOVWF  34
0B83:  MOVF   75,W
0B84:  MOVWF  3B
0B85:  MOVF   74,W
0B86:  MOVWF  3A
0B87:  MOVF   73,W
0B88:  MOVWF  39
0B89:  MOVF   72,W
0B8A:  MOVWF  38
0B8B:  BCF    0A.3
0B8C:  BCF    03.5
0B8D:  CALL   26F
0B8E:  BSF    0A.3
0B8F:  MOVF   7A,W
0B90:  BSF    03.5
0B91:  MOVWF  28
0B92:  MOVF   79,W
0B93:  MOVWF  27
0B94:  MOVF   78,W
0B95:  MOVWF  26
0B96:  MOVF   77,W
0B97:  MOVWF  25
0B98:  BCF    03.1
0B99:  MOVF   28,W
0B9A:  MOVWF  3B
0B9B:  MOVF   27,W
0B9C:  MOVWF  3A
0B9D:  MOVF   26,W
0B9E:  MOVWF  39
0B9F:  MOVF   25,W
0BA0:  MOVWF  38
0BA1:  MOVLW  18
0BA2:  MOVWF  3F
0BA3:  MOVLW  72
0BA4:  MOVWF  3E
0BA5:  MOVLW  31
0BA6:  MOVWF  3D
0BA7:  MOVLW  7E
0BA8:  MOVWF  3C
0BA9:  BCF    0A.3
0BAA:  BCF    03.5
0BAB:  CALL   2E6
0BAC:  BSF    0A.3
0BAD:  MOVF   7A,W
0BAE:  BSF    03.5
0BAF:  MOVWF  23
0BB0:  MOVF   79,W
0BB1:  MOVWF  22
0BB2:  MOVF   78,W
0BB3:  MOVWF  21
0BB4:  MOVF   77,W
0BB5:  MOVWF  20
....................  
....................    res = res*(1.0 + y*r); 
0BB6:  MOVF   75,W
0BB7:  MOVWF  37
0BB8:  MOVF   74,W
0BB9:  MOVWF  36
0BBA:  MOVF   73,W
0BBB:  MOVWF  35
0BBC:  MOVF   72,W
0BBD:  MOVWF  34
0BBE:  MOVF   23,W
0BBF:  MOVWF  3B
0BC0:  MOVF   22,W
0BC1:  MOVWF  3A
0BC2:  MOVF   21,W
0BC3:  MOVWF  39
0BC4:  MOVF   20,W
0BC5:  MOVWF  38
0BC6:  BCF    0A.3
0BC7:  BCF    03.5
0BC8:  CALL   26F
0BC9:  BSF    0A.3
0BCA:  BCF    03.1
0BCB:  BSF    03.5
0BCC:  CLRF   3B
0BCD:  CLRF   3A
0BCE:  CLRF   39
0BCF:  MOVLW  7F
0BD0:  MOVWF  38
0BD1:  MOVF   7A,W
0BD2:  MOVWF  3F
0BD3:  MOVF   79,W
0BD4:  MOVWF  3E
0BD5:  MOVF   78,W
0BD6:  MOVWF  3D
0BD7:  MOVF   77,W
0BD8:  MOVWF  3C
0BD9:  BCF    0A.3
0BDA:  BCF    03.5
0BDB:  CALL   2E6
0BDC:  BSF    0A.3
0BDD:  MOVF   7E,W
0BDE:  BSF    03.5
0BDF:  MOVWF  37
0BE0:  MOVF   7D,W
0BE1:  MOVWF  36
0BE2:  MOVF   7C,W
0BE3:  MOVWF  35
0BE4:  MOVF   7B,W
0BE5:  MOVWF  34
0BE6:  MOVF   7A,W
0BE7:  MOVWF  3B
0BE8:  MOVF   79,W
0BE9:  MOVWF  3A
0BEA:  MOVF   78,W
0BEB:  MOVWF  39
0BEC:  MOVF   77,W
0BED:  MOVWF  38
0BEE:  BCF    0A.3
0BEF:  BCF    03.5
0BF0:  CALL   26F
0BF1:  BSF    0A.3
0BF2:  MOVF   7A,W
0BF3:  MOVWF  7E
0BF4:  MOVF   79,W
0BF5:  MOVWF  7D
0BF6:  MOVF   78,W
0BF7:  MOVWF  7C
0BF8:  MOVF   77,W
0BF9:  MOVWF  7B
....................  
....................    if (s) 
0BFA:  BSF    03.5
0BFB:  BTFSS  24.0
0BFC:  GOTO   417
....................       res = 1.0/res; 
0BFD:  CLRF   30
0BFE:  CLRF   2F
0BFF:  CLRF   2E
0C00:  MOVLW  7F
0C01:  MOVWF  2D
0C02:  MOVF   7E,W
0C03:  MOVWF  34
0C04:  MOVF   7D,W
0C05:  MOVWF  33
0C06:  MOVF   7C,W
0C07:  MOVWF  32
0C08:  MOVF   7B,W
0C09:  MOVWF  31
0C0A:  BCF    0A.3
0C0B:  BCF    03.5
0C0C:  CALL   182
0C0D:  BSF    0A.3
0C0E:  MOVF   7A,W
0C0F:  MOVWF  7E
0C10:  MOVF   79,W
0C11:  MOVWF  7D
0C12:  MOVF   78,W
0C13:  MOVWF  7C
0C14:  MOVF   77,W
0C15:  MOVWF  7B
0C16:  BSF    03.5
....................    return(res); 
0C17:  MOVF   7B,W
0C18:  MOVWF  77
0C19:  MOVF   7C,W
0C1A:  MOVWF  78
0C1B:  MOVF   7D,W
0C1C:  MOVWF  79
0C1D:  MOVF   7E,W
0C1E:  MOVWF  7A
.................... } 
0C1F:  BCF    03.5
0C20:  RETURN
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
0800:  MOVF   71,W
0801:  MOVWF  75
0802:  MOVF   70,W
0803:  MOVWF  74
0804:  MOVF   6F,W
0805:  MOVWF  73
0806:  MOVF   6E,W
0807:  MOVWF  72
....................  
....................    if (y != 1.0) 
0808:  MOVF   75,W
0809:  BSF    03.5
080A:  MOVWF  37
080B:  MOVF   74,W
080C:  MOVWF  36
080D:  MOVF   73,W
080E:  MOVWF  35
080F:  MOVF   72,W
0810:  MOVWF  34
0811:  CLRF   3B
0812:  CLRF   3A
0813:  CLRF   39
0814:  MOVLW  7F
0815:  MOVWF  38
0816:  BCF    0A.3
0817:  BCF    03.5
0818:  CALL   141
0819:  BSF    0A.3
081A:  BTFSC  03.2
081B:  GOTO   1DB
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
081C:  BSF    03.5
081D:  CLRF   29
081E:  MOVLW  72
081F:  MOVWF  28
0820:  MOVF   28,W
0821:  MOVWF  04
0822:  BCF    03.7
0823:  BTFSC  29.0
0824:  BSF    03.7
0825:  MOVLW  7E
0826:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
0827:  BSF    03.1
0828:  MOVF   75,W
0829:  MOVWF  3B
082A:  MOVF   74,W
082B:  MOVWF  3A
082C:  MOVF   73,W
082D:  MOVWF  39
082E:  MOVF   72,W
082F:  MOVWF  38
0830:  CLRF   3F
0831:  CLRF   3E
0832:  CLRF   3D
0833:  MOVLW  7F
0834:  MOVWF  3C
0835:  BCF    0A.3
0836:  BCF    03.5
0837:  CALL   2E6
0838:  BSF    0A.3
0839:  MOVF   7A,W
083A:  BSF    03.5
083B:  MOVWF  2B
083C:  MOVF   79,W
083D:  MOVWF  2A
083E:  MOVF   78,W
083F:  MOVWF  29
0840:  MOVF   77,W
0841:  MOVWF  28
0842:  BCF    03.1
0843:  MOVF   75,W
0844:  MOVWF  3B
0845:  MOVF   74,W
0846:  MOVWF  3A
0847:  MOVF   73,W
0848:  MOVWF  39
0849:  MOVF   72,W
084A:  MOVWF  38
084B:  CLRF   3F
084C:  CLRF   3E
084D:  CLRF   3D
084E:  MOVLW  7F
084F:  MOVWF  3C
0850:  BCF    0A.3
0851:  BCF    03.5
0852:  CALL   2E6
0853:  BSF    0A.3
0854:  BSF    03.5
0855:  MOVF   2B,W
0856:  MOVWF  30
0857:  MOVF   2A,W
0858:  MOVWF  2F
0859:  MOVF   29,W
085A:  MOVWF  2E
085B:  MOVF   28,W
085C:  MOVWF  2D
085D:  MOVF   7A,W
085E:  MOVWF  34
085F:  MOVF   79,W
0860:  MOVWF  33
0861:  MOVF   78,W
0862:  MOVWF  32
0863:  MOVF   77,W
0864:  MOVWF  31
0865:  BCF    0A.3
0866:  BCF    03.5
0867:  CALL   182
0868:  BSF    0A.3
0869:  MOVF   7A,W
086A:  MOVWF  75
086B:  MOVF   79,W
086C:  MOVWF  74
086D:  MOVF   78,W
086E:  MOVWF  73
086F:  MOVF   77,W
0870:  MOVWF  72
....................  
....................       y2=y*y; 
0871:  MOVF   75,W
0872:  BSF    03.5
0873:  MOVWF  37
0874:  MOVF   74,W
0875:  MOVWF  36
0876:  MOVF   73,W
0877:  MOVWF  35
0878:  MOVF   72,W
0879:  MOVWF  34
087A:  MOVF   75,W
087B:  MOVWF  3B
087C:  MOVF   74,W
087D:  MOVWF  3A
087E:  MOVF   73,W
087F:  MOVWF  39
0880:  MOVF   72,W
0881:  MOVWF  38
0882:  BCF    0A.3
0883:  BCF    03.5
0884:  CALL   26F
0885:  BSF    0A.3
0886:  MOVF   7A,W
0887:  BSF    03.5
0888:  MOVWF  27
0889:  MOVF   79,W
088A:  MOVWF  26
088B:  MOVF   78,W
088C:  MOVWF  25
088D:  MOVF   77,W
088E:  MOVWF  24
....................  
....................       res = pl[0]*y2 + pl[1]; 
088F:  MOVLW  99
0890:  MOVWF  37
0891:  MOVLW  47
0892:  MOVWF  36
0893:  MOVLW  8A
0894:  MOVWF  35
0895:  MOVLW  7F
0896:  MOVWF  34
0897:  MOVF   27,W
0898:  MOVWF  3B
0899:  MOVF   26,W
089A:  MOVWF  3A
089B:  MOVF   25,W
089C:  MOVWF  39
089D:  MOVF   24,W
089E:  MOVWF  38
089F:  BCF    0A.3
08A0:  BCF    03.5
08A1:  CALL   26F
08A2:  BSF    0A.3
08A3:  MOVF   7A,W
08A4:  BSF    03.5
08A5:  MOVWF  2B
08A6:  MOVF   79,W
08A7:  MOVWF  2A
08A8:  MOVF   78,W
08A9:  MOVWF  29
08AA:  MOVF   77,W
08AB:  MOVWF  28
08AC:  BCF    03.1
08AD:  MOVF   2B,W
08AE:  MOVWF  3B
08AF:  MOVF   2A,W
08B0:  MOVWF  3A
08B1:  MOVF   29,W
08B2:  MOVWF  39
08B3:  MOVF   28,W
08B4:  MOVWF  38
08B5:  CLRF   3F
08B6:  CLRF   3E
08B7:  CLRF   3D
08B8:  MOVLW  80
08B9:  MOVWF  3C
08BA:  BCF    0A.3
08BB:  BCF    03.5
08BC:  CALL   2E6
08BD:  BSF    0A.3
08BE:  MOVF   7A,W
08BF:  MOVWF  7E
08C0:  MOVF   79,W
08C1:  MOVWF  7D
08C2:  MOVF   78,W
08C3:  MOVWF  7C
08C4:  MOVF   77,W
08C5:  MOVWF  7B
....................  
....................       r = ql[0]*y2 + ql[1]; 
08C6:  MOVLW  4C
08C7:  BSF    03.5
08C8:  MOVWF  37
08C9:  MOVLW  F3
08CA:  MOVWF  36
08CB:  MOVLW  3A
08CC:  MOVWF  35
08CD:  MOVLW  7B
08CE:  MOVWF  34
08CF:  MOVF   27,W
08D0:  MOVWF  3B
08D1:  MOVF   26,W
08D2:  MOVWF  3A
08D3:  MOVF   25,W
08D4:  MOVWF  39
08D5:  MOVF   24,W
08D6:  MOVWF  38
08D7:  BCF    0A.3
08D8:  BCF    03.5
08D9:  CALL   26F
08DA:  BSF    0A.3
08DB:  MOVF   7A,W
08DC:  BSF    03.5
08DD:  MOVWF  2B
08DE:  MOVF   79,W
08DF:  MOVWF  2A
08E0:  MOVF   78,W
08E1:  MOVWF  29
08E2:  MOVF   77,W
08E3:  MOVWF  28
08E4:  BCF    03.1
08E5:  MOVF   2B,W
08E6:  MOVWF  3B
08E7:  MOVF   2A,W
08E8:  MOVWF  3A
08E9:  MOVF   29,W
08EA:  MOVWF  39
08EB:  MOVF   28,W
08EC:  MOVWF  38
08ED:  MOVLW  2B
08EE:  MOVWF  3F
08EF:  MOVLW  9D
08F0:  MOVWF  3E
08F1:  MOVLW  DF
08F2:  MOVWF  3D
08F3:  MOVLW  7E
08F4:  MOVWF  3C
08F5:  BCF    0A.3
08F6:  BCF    03.5
08F7:  CALL   2E6
08F8:  BSF    0A.3
08F9:  MOVF   7A,W
08FA:  BSF    03.5
08FB:  MOVWF  23
08FC:  MOVF   79,W
08FD:  MOVWF  22
08FE:  MOVF   78,W
08FF:  MOVWF  21
0900:  MOVF   77,W
0901:  MOVWF  20
....................       r = r*y2 + 1.0; 
0902:  MOVF   23,W
0903:  MOVWF  37
0904:  MOVF   22,W
0905:  MOVWF  36
0906:  MOVF   21,W
0907:  MOVWF  35
0908:  MOVF   20,W
0909:  MOVWF  34
090A:  MOVF   27,W
090B:  MOVWF  3B
090C:  MOVF   26,W
090D:  MOVWF  3A
090E:  MOVF   25,W
090F:  MOVWF  39
0910:  MOVF   24,W
0911:  MOVWF  38
0912:  BCF    0A.3
0913:  BCF    03.5
0914:  CALL   26F
0915:  BSF    0A.3
0916:  MOVF   7A,W
0917:  BSF    03.5
0918:  MOVWF  2B
0919:  MOVF   79,W
091A:  MOVWF  2A
091B:  MOVF   78,W
091C:  MOVWF  29
091D:  MOVF   77,W
091E:  MOVWF  28
091F:  BCF    03.1
0920:  MOVF   2B,W
0921:  MOVWF  3B
0922:  MOVF   2A,W
0923:  MOVWF  3A
0924:  MOVF   29,W
0925:  MOVWF  39
0926:  MOVF   28,W
0927:  MOVWF  38
0928:  CLRF   3F
0929:  CLRF   3E
092A:  CLRF   3D
092B:  MOVLW  7F
092C:  MOVWF  3C
092D:  BCF    0A.3
092E:  BCF    03.5
092F:  CALL   2E6
0930:  BSF    0A.3
0931:  MOVF   7A,W
0932:  BSF    03.5
0933:  MOVWF  23
0934:  MOVF   79,W
0935:  MOVWF  22
0936:  MOVF   78,W
0937:  MOVWF  21
0938:  MOVF   77,W
0939:  MOVWF  20
....................  
....................       res = y*res/r; 
093A:  MOVF   75,W
093B:  MOVWF  37
093C:  MOVF   74,W
093D:  MOVWF  36
093E:  MOVF   73,W
093F:  MOVWF  35
0940:  MOVF   72,W
0941:  MOVWF  34
0942:  MOVF   7E,W
0943:  MOVWF  3B
0944:  MOVF   7D,W
0945:  MOVWF  3A
0946:  MOVF   7C,W
0947:  MOVWF  39
0948:  MOVF   7B,W
0949:  MOVWF  38
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  CALL   26F
094D:  BSF    0A.3
094E:  MOVF   7A,W
094F:  BSF    03.5
0950:  MOVWF  2B
0951:  MOVF   79,W
0952:  MOVWF  2A
0953:  MOVF   78,W
0954:  MOVWF  29
0955:  MOVF   77,W
0956:  MOVWF  28
0957:  MOVF   2B,W
0958:  MOVWF  30
0959:  MOVF   2A,W
095A:  MOVWF  2F
095B:  MOVF   29,W
095C:  MOVWF  2E
095D:  MOVF   28,W
095E:  MOVWF  2D
095F:  MOVF   23,W
0960:  MOVWF  34
0961:  MOVF   22,W
0962:  MOVWF  33
0963:  MOVF   21,W
0964:  MOVWF  32
0965:  MOVF   20,W
0966:  MOVWF  31
0967:  BCF    0A.3
0968:  BCF    03.5
0969:  CALL   182
096A:  BSF    0A.3
096B:  MOVF   7A,W
096C:  MOVWF  7E
096D:  MOVF   79,W
096E:  MOVWF  7D
096F:  MOVF   78,W
0970:  MOVWF  7C
0971:  MOVF   77,W
0972:  MOVWF  7B
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
0973:  BSF    03.5
0974:  CLRF   29
0975:  MOVLW  6E
0976:  MOVWF  28
0977:  MOVF   28,W
0978:  MOVWF  04
0979:  BCF    03.7
097A:  BTFSC  29.0
097B:  BSF    03.7
097C:  MOVLW  7E
097D:  SUBWF  00,W
097E:  MOVWF  76
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
097F:  BTFSS  76.7
0980:  GOTO   196
....................          r = -(float32)-n; 
0981:  MOVF   76,W
0982:  SUBLW  00
0983:  CLRF   2B
0984:  MOVWF  2A
0985:  BTFSC  2A.7
0986:  DECF   2B,F
0987:  BCF    0A.3
0988:  BCF    03.5
0989:  CALL   6F1
098A:  BSF    0A.3
098B:  MOVF   77,W
098C:  BSF    03.5
098D:  MOVWF  20
098E:  MOVF   78,W
098F:  XORLW  80
0990:  MOVWF  21
0991:  MOVF   79,W
0992:  MOVWF  22
0993:  MOVF   7A,W
0994:  MOVWF  23
....................       else 
0995:  GOTO   1A8
....................          r = (float32)n; 
0996:  CLRF   2B
0997:  MOVF   76,W
0998:  MOVWF  2A
0999:  BTFSC  2A.7
099A:  DECF   2B,F
099B:  BCF    0A.3
099C:  BCF    03.5
099D:  CALL   6F1
099E:  BSF    0A.3
099F:  MOVF   7A,W
09A0:  BSF    03.5
09A1:  MOVWF  23
09A2:  MOVF   79,W
09A3:  MOVWF  22
09A4:  MOVF   78,W
09A5:  MOVWF  21
09A6:  MOVF   77,W
09A7:  MOVWF  20
....................  
....................       res += r*LN2; 
09A8:  MOVF   23,W
09A9:  MOVWF  37
09AA:  MOVF   22,W
09AB:  MOVWF  36
09AC:  MOVF   21,W
09AD:  MOVWF  35
09AE:  MOVF   20,W
09AF:  MOVWF  34
09B0:  MOVLW  18
09B1:  MOVWF  3B
09B2:  MOVLW  72
09B3:  MOVWF  3A
09B4:  MOVLW  31
09B5:  MOVWF  39
09B6:  MOVLW  7E
09B7:  MOVWF  38
09B8:  BCF    0A.3
09B9:  BCF    03.5
09BA:  CALL   26F
09BB:  BSF    0A.3
09BC:  BCF    03.1
09BD:  MOVF   7E,W
09BE:  BSF    03.5
09BF:  MOVWF  3B
09C0:  MOVF   7D,W
09C1:  MOVWF  3A
09C2:  MOVF   7C,W
09C3:  MOVWF  39
09C4:  MOVF   7B,W
09C5:  MOVWF  38
09C6:  MOVF   7A,W
09C7:  MOVWF  3F
09C8:  MOVF   79,W
09C9:  MOVWF  3E
09CA:  MOVF   78,W
09CB:  MOVWF  3D
09CC:  MOVF   77,W
09CD:  MOVWF  3C
09CE:  BCF    0A.3
09CF:  BCF    03.5
09D0:  CALL   2E6
09D1:  BSF    0A.3
09D2:  MOVF   7A,W
09D3:  MOVWF  7E
09D4:  MOVF   79,W
09D5:  MOVWF  7D
09D6:  MOVF   78,W
09D7:  MOVWF  7C
09D8:  MOVF   77,W
09D9:  MOVWF  7B
....................    } 
....................  
....................    else 
09DA:  GOTO   1DF
....................       res = 0.0; 
09DB:  CLRF   7E
09DC:  CLRF   7D
09DD:  CLRF   7C
09DE:  CLRF   7B
....................  
....................    return(res); 
09DF:  MOVF   7B,W
09E0:  MOVWF  77
09E1:  MOVF   7C,W
09E2:  MOVWF  78
09E3:  MOVF   7D,W
09E4:  MOVWF  79
09E5:  MOVF   7E,W
09E6:  MOVWF  7A
.................... } 
09E7:  RETURN
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
0C21:  MOVF   65,W
0C22:  BSF    03.5
0C23:  MOVWF  37
0C24:  BCF    03.5
0C25:  MOVF   64,W
0C26:  BSF    03.5
0C27:  MOVWF  36
0C28:  BCF    03.5
0C29:  MOVF   63,W
0C2A:  BSF    03.5
0C2B:  MOVWF  35
0C2C:  BCF    03.5
0C2D:  MOVF   62,W
0C2E:  BSF    03.5
0C2F:  MOVWF  34
0C30:  CLRF   3B
0C31:  CLRF   3A
0C32:  CLRF   39
0C33:  CLRF   38
0C34:  BCF    0A.3
0C35:  BCF    03.5
0C36:  CALL   141
0C37:  BSF    0A.3
0C38:  BTFSS  03.0
0C39:  GOTO   53C
0C3A:  MOVF   69,W
0C3B:  MOVWF  6D
0C3C:  MOVF   68,W
0C3D:  MOVWF  6C
0C3E:  MOVF   67,W
0C3F:  MOVWF  6B
0C40:  MOVF   66,W
0C41:  MOVWF  6A
0C42:  CLRF   71
0C43:  CLRF   70
0C44:  CLRF   6F
0C45:  MOVLW  7F
0C46:  MOVWF  6E
0C47:  BCF    0A.3
0C48:  CALL   5F7
0C49:  BSF    0A.3
0C4A:  MOVF   7A,W
0C4B:  MOVWF  6D
0C4C:  MOVF   79,W
0C4D:  MOVWF  6C
0C4E:  MOVF   78,W
0C4F:  MOVWF  6B
0C50:  MOVF   77,W
0C51:  MOVWF  6A
0C52:  MOVF   6D,W
0C53:  BSF    03.5
0C54:  MOVWF  37
0C55:  BCF    03.5
0C56:  MOVF   6C,W
0C57:  BSF    03.5
0C58:  MOVWF  36
0C59:  BCF    03.5
0C5A:  MOVF   6B,W
0C5B:  BSF    03.5
0C5C:  MOVWF  35
0C5D:  BCF    03.5
0C5E:  MOVF   6A,W
0C5F:  BSF    03.5
0C60:  MOVWF  34
0C61:  CLRF   3B
0C62:  CLRF   3A
0C63:  CLRF   39
0C64:  CLRF   38
0C65:  BCF    0A.3
0C66:  BCF    03.5
0C67:  CALL   141
0C68:  BSF    0A.3
0C69:  BTFSS  03.2
0C6A:  GOTO   53C
....................       if(fmod(y, 2) == 0) { 
0C6B:  MOVF   69,W
0C6C:  MOVWF  6D
0C6D:  MOVF   68,W
0C6E:  MOVWF  6C
0C6F:  MOVF   67,W
0C70:  MOVWF  6B
0C71:  MOVF   66,W
0C72:  MOVWF  6A
0C73:  CLRF   71
0C74:  CLRF   70
0C75:  CLRF   6F
0C76:  MOVLW  80
0C77:  MOVWF  6E
0C78:  BCF    0A.3
0C79:  CALL   5F7
0C7A:  BSF    0A.3
0C7B:  MOVF   7A,W
0C7C:  MOVWF  6D
0C7D:  MOVF   79,W
0C7E:  MOVWF  6C
0C7F:  MOVF   78,W
0C80:  MOVWF  6B
0C81:  MOVF   77,W
0C82:  MOVWF  6A
0C83:  MOVF   6D,W
0C84:  BSF    03.5
0C85:  MOVWF  37
0C86:  BCF    03.5
0C87:  MOVF   6C,W
0C88:  BSF    03.5
0C89:  MOVWF  36
0C8A:  BCF    03.5
0C8B:  MOVF   6B,W
0C8C:  BSF    03.5
0C8D:  MOVWF  35
0C8E:  BCF    03.5
0C8F:  MOVF   6A,W
0C90:  BSF    03.5
0C91:  MOVWF  34
0C92:  CLRF   3B
0C93:  CLRF   3A
0C94:  CLRF   39
0C95:  CLRF   38
0C96:  BCF    0A.3
0C97:  BCF    03.5
0C98:  CALL   141
0C99:  BSF    0A.3
0C9A:  BTFSS  03.2
0C9B:  GOTO   4EB
....................          return (exp(log(-x) * y)); 
0C9C:  MOVF   62,W
0C9D:  MOVWF  6A
0C9E:  MOVF   63,W
0C9F:  XORLW  80
0CA0:  MOVWF  6B
0CA1:  MOVF   64,W
0CA2:  MOVWF  6C
0CA3:  MOVF   65,W
0CA4:  MOVWF  6D
0CA5:  MOVWF  71
0CA6:  MOVF   6C,W
0CA7:  MOVWF  70
0CA8:  MOVF   6B,W
0CA9:  MOVWF  6F
0CAA:  MOVF   6A,W
0CAB:  MOVWF  6E
0CAC:  CALL   000
0CAD:  MOVF   7A,W
0CAE:  MOVWF  6D
0CAF:  MOVF   79,W
0CB0:  MOVWF  6C
0CB1:  MOVF   78,W
0CB2:  MOVWF  6B
0CB3:  MOVF   77,W
0CB4:  MOVWF  6A
0CB5:  MOVF   6D,W
0CB6:  BSF    03.5
0CB7:  MOVWF  37
0CB8:  BCF    03.5
0CB9:  MOVF   6C,W
0CBA:  BSF    03.5
0CBB:  MOVWF  36
0CBC:  BCF    03.5
0CBD:  MOVF   6B,W
0CBE:  BSF    03.5
0CBF:  MOVWF  35
0CC0:  BCF    03.5
0CC1:  MOVF   6A,W
0CC2:  BSF    03.5
0CC3:  MOVWF  34
0CC4:  BCF    03.5
0CC5:  MOVF   69,W
0CC6:  BSF    03.5
0CC7:  MOVWF  3B
0CC8:  BCF    03.5
0CC9:  MOVF   68,W
0CCA:  BSF    03.5
0CCB:  MOVWF  3A
0CCC:  BCF    03.5
0CCD:  MOVF   67,W
0CCE:  BSF    03.5
0CCF:  MOVWF  39
0CD0:  BCF    03.5
0CD1:  MOVF   66,W
0CD2:  BSF    03.5
0CD3:  MOVWF  38
0CD4:  BCF    0A.3
0CD5:  BCF    03.5
0CD6:  CALL   26F
0CD7:  BSF    0A.3
0CD8:  MOVF   7A,W
0CD9:  MOVWF  6D
0CDA:  MOVF   79,W
0CDB:  MOVWF  6C
0CDC:  MOVF   78,W
0CDD:  MOVWF  6B
0CDE:  MOVF   77,W
0CDF:  MOVWF  6A
0CE0:  MOVF   6D,W
0CE1:  MOVWF  71
0CE2:  MOVF   6C,W
0CE3:  MOVWF  70
0CE4:  MOVF   6B,W
0CE5:  MOVWF  6F
0CE6:  MOVF   6A,W
0CE7:  MOVWF  6E
0CE8:  CALL   1E8
0CE9:  GOTO   605
....................       } else { 
0CEA:  GOTO   53B
....................          return (-exp(log(-x) * y)); 
0CEB:  MOVF   62,W
0CEC:  MOVWF  6A
0CED:  MOVF   63,W
0CEE:  XORLW  80
0CEF:  MOVWF  6B
0CF0:  MOVF   64,W
0CF1:  MOVWF  6C
0CF2:  MOVF   65,W
0CF3:  MOVWF  6D
0CF4:  MOVWF  71
0CF5:  MOVF   6C,W
0CF6:  MOVWF  70
0CF7:  MOVF   6B,W
0CF8:  MOVWF  6F
0CF9:  MOVF   6A,W
0CFA:  MOVWF  6E
0CFB:  CALL   000
0CFC:  MOVF   7A,W
0CFD:  MOVWF  6D
0CFE:  MOVF   79,W
0CFF:  MOVWF  6C
0D00:  MOVF   78,W
0D01:  MOVWF  6B
0D02:  MOVF   77,W
0D03:  MOVWF  6A
0D04:  MOVF   6D,W
0D05:  BSF    03.5
0D06:  MOVWF  37
0D07:  BCF    03.5
0D08:  MOVF   6C,W
0D09:  BSF    03.5
0D0A:  MOVWF  36
0D0B:  BCF    03.5
0D0C:  MOVF   6B,W
0D0D:  BSF    03.5
0D0E:  MOVWF  35
0D0F:  BCF    03.5
0D10:  MOVF   6A,W
0D11:  BSF    03.5
0D12:  MOVWF  34
0D13:  BCF    03.5
0D14:  MOVF   69,W
0D15:  BSF    03.5
0D16:  MOVWF  3B
0D17:  BCF    03.5
0D18:  MOVF   68,W
0D19:  BSF    03.5
0D1A:  MOVWF  3A
0D1B:  BCF    03.5
0D1C:  MOVF   67,W
0D1D:  BSF    03.5
0D1E:  MOVWF  39
0D1F:  BCF    03.5
0D20:  MOVF   66,W
0D21:  BSF    03.5
0D22:  MOVWF  38
0D23:  BCF    0A.3
0D24:  BCF    03.5
0D25:  CALL   26F
0D26:  BSF    0A.3
0D27:  MOVF   7A,W
0D28:  MOVWF  6D
0D29:  MOVF   79,W
0D2A:  MOVWF  6C
0D2B:  MOVF   78,W
0D2C:  MOVWF  6B
0D2D:  MOVF   77,W
0D2E:  MOVWF  6A
0D2F:  MOVF   6D,W
0D30:  MOVWF  71
0D31:  MOVF   6C,W
0D32:  MOVWF  70
0D33:  MOVF   6B,W
0D34:  MOVWF  6F
0D35:  MOVF   6A,W
0D36:  MOVWF  6E
0D37:  CALL   1E8
0D38:  MOVLW  80
0D39:  XORWF  78,F
0D3A:  GOTO   605
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
0D3B:  GOTO   605
0D3C:  MOVF   65,W
0D3D:  BSF    03.5
0D3E:  MOVWF  37
0D3F:  BCF    03.5
0D40:  MOVF   64,W
0D41:  BSF    03.5
0D42:  MOVWF  36
0D43:  BCF    03.5
0D44:  MOVF   63,W
0D45:  BSF    03.5
0D46:  MOVWF  35
0D47:  BCF    03.5
0D48:  MOVF   62,W
0D49:  BSF    03.5
0D4A:  MOVWF  34
0D4B:  CLRF   3B
0D4C:  CLRF   3A
0D4D:  CLRF   39
0D4E:  CLRF   38
0D4F:  BCF    0A.3
0D50:  BCF    03.5
0D51:  CALL   141
0D52:  BSF    0A.3
0D53:  BTFSS  03.0
0D54:  GOTO   58C
0D55:  MOVF   69,W
0D56:  MOVWF  6D
0D57:  MOVF   68,W
0D58:  MOVWF  6C
0D59:  MOVF   67,W
0D5A:  MOVWF  6B
0D5B:  MOVF   66,W
0D5C:  MOVWF  6A
0D5D:  CLRF   71
0D5E:  CLRF   70
0D5F:  CLRF   6F
0D60:  MOVLW  7F
0D61:  MOVWF  6E
0D62:  BCF    0A.3
0D63:  CALL   5F7
0D64:  BSF    0A.3
0D65:  MOVF   7A,W
0D66:  MOVWF  6D
0D67:  MOVF   79,W
0D68:  MOVWF  6C
0D69:  MOVF   78,W
0D6A:  MOVWF  6B
0D6B:  MOVF   77,W
0D6C:  MOVWF  6A
0D6D:  MOVF   6D,W
0D6E:  BSF    03.5
0D6F:  MOVWF  37
0D70:  BCF    03.5
0D71:  MOVF   6C,W
0D72:  BSF    03.5
0D73:  MOVWF  36
0D74:  BCF    03.5
0D75:  MOVF   6B,W
0D76:  BSF    03.5
0D77:  MOVWF  35
0D78:  BCF    03.5
0D79:  MOVF   6A,W
0D7A:  BSF    03.5
0D7B:  MOVWF  34
0D7C:  CLRF   3B
0D7D:  CLRF   3A
0D7E:  CLRF   39
0D7F:  CLRF   38
0D80:  BCF    0A.3
0D81:  BCF    03.5
0D82:  CALL   141
0D83:  BSF    0A.3
0D84:  BTFSC  03.2
0D85:  GOTO   58C
....................       return 0; 
0D86:  CLRF   77
0D87:  CLRF   78
0D88:  CLRF   79
0D89:  CLRF   7A
0D8A:  GOTO   605
....................    } else { 
0D8B:  GOTO   605
....................       if(x != 0 || 0 >= y) { 
0D8C:  MOVF   65,W
0D8D:  BSF    03.5
0D8E:  MOVWF  37
0D8F:  BCF    03.5
0D90:  MOVF   64,W
0D91:  BSF    03.5
0D92:  MOVWF  36
0D93:  BCF    03.5
0D94:  MOVF   63,W
0D95:  BSF    03.5
0D96:  MOVWF  35
0D97:  BCF    03.5
0D98:  MOVF   62,W
0D99:  BSF    03.5
0D9A:  MOVWF  34
0D9B:  CLRF   3B
0D9C:  CLRF   3A
0D9D:  CLRF   39
0D9E:  CLRF   38
0D9F:  BCF    0A.3
0DA0:  BCF    03.5
0DA1:  CALL   141
0DA2:  BSF    0A.3
0DA3:  BTFSS  03.2
0DA4:  GOTO   5C0
0DA5:  MOVF   69,W
0DA6:  BSF    03.5
0DA7:  MOVWF  37
0DA8:  BCF    03.5
0DA9:  MOVF   68,W
0DAA:  BSF    03.5
0DAB:  MOVWF  36
0DAC:  BCF    03.5
0DAD:  MOVF   67,W
0DAE:  BSF    03.5
0DAF:  MOVWF  35
0DB0:  BCF    03.5
0DB1:  MOVF   66,W
0DB2:  BSF    03.5
0DB3:  MOVWF  34
0DB4:  CLRF   3B
0DB5:  CLRF   3A
0DB6:  CLRF   39
0DB7:  CLRF   38
0DB8:  BCF    0A.3
0DB9:  BCF    03.5
0DBA:  CALL   141
0DBB:  BSF    0A.3
0DBC:  BTFSC  03.0
0DBD:  GOTO   5C0
0DBE:  BTFSS  03.2
0DBF:  GOTO   605
....................          return (exp(log(x) * y)); 
0DC0:  MOVF   65,W
0DC1:  MOVWF  71
0DC2:  MOVF   64,W
0DC3:  MOVWF  70
0DC4:  MOVF   63,W
0DC5:  MOVWF  6F
0DC6:  MOVF   62,W
0DC7:  MOVWF  6E
0DC8:  CALL   000
0DC9:  MOVF   7A,W
0DCA:  MOVWF  6D
0DCB:  MOVF   79,W
0DCC:  MOVWF  6C
0DCD:  MOVF   78,W
0DCE:  MOVWF  6B
0DCF:  MOVF   77,W
0DD0:  MOVWF  6A
0DD1:  MOVF   6D,W
0DD2:  BSF    03.5
0DD3:  MOVWF  37
0DD4:  BCF    03.5
0DD5:  MOVF   6C,W
0DD6:  BSF    03.5
0DD7:  MOVWF  36
0DD8:  BCF    03.5
0DD9:  MOVF   6B,W
0DDA:  BSF    03.5
0DDB:  MOVWF  35
0DDC:  BCF    03.5
0DDD:  MOVF   6A,W
0DDE:  BSF    03.5
0DDF:  MOVWF  34
0DE0:  BCF    03.5
0DE1:  MOVF   69,W
0DE2:  BSF    03.5
0DE3:  MOVWF  3B
0DE4:  BCF    03.5
0DE5:  MOVF   68,W
0DE6:  BSF    03.5
0DE7:  MOVWF  3A
0DE8:  BCF    03.5
0DE9:  MOVF   67,W
0DEA:  BSF    03.5
0DEB:  MOVWF  39
0DEC:  BCF    03.5
0DED:  MOVF   66,W
0DEE:  BSF    03.5
0DEF:  MOVWF  38
0DF0:  BCF    0A.3
0DF1:  BCF    03.5
0DF2:  CALL   26F
0DF3:  BSF    0A.3
0DF4:  MOVF   7A,W
0DF5:  MOVWF  6D
0DF6:  MOVF   79,W
0DF7:  MOVWF  6C
0DF8:  MOVF   78,W
0DF9:  MOVWF  6B
0DFA:  MOVF   77,W
0DFB:  MOVWF  6A
0DFC:  MOVF   6D,W
0DFD:  MOVWF  71
0DFE:  MOVF   6C,W
0DFF:  MOVWF  70
0E00:  MOVF   6B,W
0E01:  MOVWF  6F
0E02:  MOVF   6A,W
0E03:  MOVWF  6E
0E04:  CALL   1E8
....................       } 
....................    } 
.................... } 
0E05:  RETURN
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES HS //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin disabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //No brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brownout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #use delay(clock=20000000) 
010E:  MOVLW  5F
010F:  MOVWF  04
0110:  BCF    03.7
0111:  MOVF   00,W
0112:  BTFSC  03.2
0113:  GOTO   121
0114:  MOVLW  06
0115:  MOVWF  78
0116:  CLRF   77
0117:  DECFSZ 77,F
0118:  GOTO   117
0119:  DECFSZ 78,F
011A:  GOTO   116
011B:  MOVLW  7B
011C:  MOVWF  77
011D:  DECFSZ 77,F
011E:  GOTO   11D
011F:  DECFSZ 00,F
0120:  GOTO   114
0121:  RETURN
.................... // Config the serial port hardware on the PIC 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define DISPLAY_ADDRESS 0xB4 
.................... #define REGISTER_SIZE  8    
.................... #define DISPLAY_CMD_SEND_VALUE 2 
.................... #define DISPLAY_CMD_SEND_LONG_TEXT 5 
.................... #define DISPLAY_CMD_CLS 6 
.................... #define DISPLAY_CMD_SETPOS 8 
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... #define SENSITIVE_VOLTAGE 5.625 //voltage per amp 
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... // setup the I2C port 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
07C7:  BCF    14.7
07C8:  BCF    0C.3
07C9:  MOVF   64,W
07CA:  MOVWF  13
07CB:  MOVLW  02
07CC:  BTFSC  14.7
07CD:  GOTO   7D5
07CE:  BTFSS  0C.3
07CF:  GOTO   7CE
07D0:  MOVLW  00
07D1:  BSF    03.5
07D2:  BTFSC  11.6
07D3:  MOVLW  01
07D4:  BCF    03.5
07D5:  MOVWF  78
07D6:  RETURN
....................  
.................... int1 selectPush =0,selectUsed=1; 
.................... int1 exitPush =0,exitUsed =1; 
.................... int1 leftPush =0,leftUsed =1; 
.................... int1 rightPush =0,rightUsed =1; 
....................  
....................  
....................  
.................... #INT_RB 
.................... void rb_isr(void) { 
....................    if(input(PIN_B3)==0 && selectUsed==0) // input(PIN_B3) == 0 is touching 
0050:  BSF    03.5
0051:  BSF    06.3
0052:  BCF    03.5
0053:  BTFSC  06.3
0054:  GOTO   059
0055:  BTFSC  28.1
0056:  GOTO   059
....................    { 
....................          selectPush = 1; 
0057:  BSF    28.0
....................    } 
....................    else if(input(PIN_B3)==1 && selectUsed==1) 
0058:  GOTO   09B
0059:  BSF    03.5
005A:  BSF    06.3
005B:  BCF    03.5
005C:  BTFSS  06.3
005D:  GOTO   063
005E:  BTFSS  28.1
005F:  GOTO   063
....................    {       
....................          selectPush = 0; 
0060:  BCF    28.0
....................          selectUsed = 0; 
0061:  BCF    28.1
....................    } 
....................     
....................    else if(input(PIN_B2)==0 && exitUsed==0) // input(PIN_B3) == 0 is touching 
0062:  GOTO   09B
0063:  BSF    03.5
0064:  BSF    06.2
0065:  BCF    03.5
0066:  BTFSC  06.2
0067:  GOTO   06C
0068:  BTFSC  28.3
0069:  GOTO   06C
....................    { 
....................          exitPush = 1; 
006A:  BSF    28.2
....................    } 
....................    else if(input(PIN_B2)==1 && exitUsed==1) 
006B:  GOTO   09B
006C:  BSF    03.5
006D:  BSF    06.2
006E:  BCF    03.5
006F:  BTFSS  06.2
0070:  GOTO   076
0071:  BTFSS  28.3
0072:  GOTO   076
....................    {       
....................          exitPush = 0; 
0073:  BCF    28.2
....................          exitUsed = 0; 
0074:  BCF    28.3
....................    } 
....................    else if(input(PIN_B1)==0 && leftUsed==0) // input(PIN_B3) == 0 is touching 
0075:  GOTO   09B
0076:  BSF    03.5
0077:  BSF    06.1
0078:  BCF    03.5
0079:  BTFSC  06.1
007A:  GOTO   07F
007B:  BTFSC  28.5
007C:  GOTO   07F
....................    { 
....................          leftPush = 1; 
007D:  BSF    28.4
....................    } 
....................    else if(input(PIN_B1)==1 && leftUsed==1) 
007E:  GOTO   09B
007F:  BSF    03.5
0080:  BSF    06.1
0081:  BCF    03.5
0082:  BTFSS  06.1
0083:  GOTO   089
0084:  BTFSS  28.5
0085:  GOTO   089
....................    {       
....................          leftPush = 0; 
0086:  BCF    28.4
....................          leftUsed = 0; 
0087:  BCF    28.5
....................    } 
....................    else if(input(PIN_B4)==0 && rightUsed==0) // input(PIN_B3) == 0 is touching 
0088:  GOTO   09B
0089:  BSF    03.5
008A:  BSF    06.4
008B:  BCF    03.5
008C:  BTFSC  06.4
008D:  GOTO   092
008E:  BTFSC  28.7
008F:  GOTO   092
....................    { 
....................          rightPush = 1; 
0090:  BSF    28.6
....................    } 
....................    else if(input(PIN_B4)==1 && rightUsed==1) 
0091:  GOTO   09B
0092:  BSF    03.5
0093:  BSF    06.4
0094:  BCF    03.5
0095:  BTFSS  06.4
0096:  GOTO   09B
0097:  BTFSS  28.7
0098:  GOTO   09B
....................    {       
....................          rightPush = 0; 
0099:  BCF    28.6
....................          rightUsed = 0; 
009A:  BCF    28.7
....................    } 
....................    //if you wanna check the other button you have to write in this function with input(parameter); 
.................... } 
....................  
....................  
009B:  BCF    0B.0
009C:  BCF    0A.3
009D:  BCF    0A.4
009E:  GOTO   01B
.................... void displayLongText(char* text); 
.................... void displayValue(int16 value[]); 
.................... void clearDisplay(); 
.................... void setDisplayPos(int pos); 
.................... int checkselect(int menu); 
.................... int checkexit(int menu); 
.................... int checkleft(int menu); 
.................... int checkright(int menu); 
....................  
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!// This is the main device register 
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!int deviceRegister[REGISTER_SIZE]={0}; // device register 
....................  
....................  
....................  
....................  
.................... void main() { 
1000:  BSF    03.5
1001:  BSF    03.6
1002:  BSF    07.3
1003:  MOVLW  08
1004:  BCF    03.6
1005:  MOVWF  19
1006:  MOVLW  02
1007:  MOVWF  1A
1008:  MOVLW  A6
1009:  MOVWF  18
100A:  MOVLW  90
100B:  BCF    03.5
100C:  MOVWF  18
100D:  MOVLW  FF
100E:  MOVWF  27
100F:  BSF    27.3
1010:  MOVF   27,W
1011:  BSF    03.5
1012:  MOVWF  07
1013:  BCF    03.5
1014:  BSF    27.4
1015:  MOVF   27,W
1016:  BSF    03.5
1017:  MOVWF  07
1018:  MOVLW  31
1019:  MOVWF  13
101A:  MOVLW  29
101B:  BCF    03.5
101C:  MOVWF  14
101D:  BSF    03.5
101E:  BSF    14.7
101F:  BCF    14.6
1020:  MOVLW  FF
1021:  MOVWF  13
1022:  MOVLW  28
1023:  BCF    03.5
1024:  MOVWF  14
1025:  BCF    28.0
1026:  BSF    28.1
1027:  BCF    28.2
1028:  BSF    28.3
1029:  BCF    28.4
102A:  BSF    28.5
102B:  BCF    28.6
102C:  BSF    28.7
102D:  BSF    03.5
102E:  BSF    03.6
102F:  MOVF   09,W
1030:  ANDLW  C0
1031:  MOVWF  09
1032:  BCF    03.6
1033:  BCF    1F.4
1034:  BCF    1F.5
1035:  MOVLW  00
1036:  BSF    03.6
1037:  MOVWF  08
1038:  BCF    03.5
1039:  CLRF   07
103A:  CLRF   08
103B:  CLRF   09
103C:  MOVLW  02
103D:  BCF    03.6
103E:  MOVWF  3E
103F:  MOVLW  0D
1040:  MOVWF  3D
1041:  MOVLW  FA
1042:  MOVWF  42
1043:  MOVLW  A2
1044:  MOVWF  41
1045:  MOVLW  48
1046:  MOVWF  40
1047:  MOVLW  71
1048:  MOVWF  3F
1049:  MOVLW  AC
104A:  MOVWF  46
104B:  MOVLW  19
104C:  MOVWF  45
104D:  MOVLW  39
104E:  MOVWF  44
104F:  MOVLW  7C
1050:  MOVWF  43
1051:  MOVLW  10
1052:  MOVWF  4A
1053:  MOVLW  98
1054:  MOVWF  49
1055:  MOVLW  6A
1056:  MOVWF  48
1057:  MOVLW  85
1058:  MOVWF  47
1059:  MOVLW  9A
105A:  MOVWF  4E
105B:  MOVLW  F8
105C:  MOVWF  4D
105D:  MOVLW  47
105E:  MOVWF  4C
105F:  MOVLW  8D
1060:  MOVWF  4B
1061:  MOVLW  01
1062:  MOVWF  4F
....................     
....................     int16 analog0; 
....................     int16 analogget0; 
....................     float32 analog0_sim; 
....................     float32 ampere_sim; 
....................     float32 power_sim; 
....................     int16 ampere; 
....................     int16 power; 
....................     
....................     int16 REFERENCE_VALUE = 525; 
....................     float32 A = 0.000095671; 
....................     float32 B = 0.180762; 
....................     float32 C = 117.297; 
....................     float32 D = 25596.3; 
....................     int menu = 1; 
....................     enable_interrupts(INT_RB3);    // generate interrupt when B7 changes 
1063:  BSF    0B.3
1064:  BSF    03.5
1065:  BSF    16.3
....................     enable_interrupts(INT_RB2); 
1066:  BCF    03.5
1067:  BSF    0B.3
1068:  BSF    03.5
1069:  BSF    16.2
....................     enable_interrupts(INT_RB1); 
106A:  BCF    03.5
106B:  BSF    0B.3
106C:  BSF    03.5
106D:  BSF    16.1
....................     enable_interrupts(INT_RB4); 
106E:  BCF    03.5
106F:  BSF    0B.3
1070:  BSF    03.5
1071:  BSF    16.4
....................     enable_interrupts(GLOBAL); 
1072:  MOVLW  C0
1073:  BCF    03.5
1074:  IORWF  0B,F
....................      
....................     setup_adc_ports(sAN1); // setup PIN A0 as analog input 
1075:  BSF    03.5
1076:  BSF    03.6
1077:  MOVF   09,W
1078:  ANDLW  C0
1079:  MOVWF  09
107A:  BCF    03.6
107B:  BCF    1F.4
107C:  BCF    1F.5
107D:  MOVLW  02
107E:  BSF    03.6
107F:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
1080:  BCF    03.5
1081:  BCF    03.6
1082:  BSF    1F.6
1083:  BSF    1F.7
1084:  BSF    03.5
1085:  BSF    1F.7
1086:  BCF    03.5
1087:  BSF    1F.0
....................   
....................     printf("Sampling:\r\n"); 
1088:  MOVLW  9F
1089:  BSF    03.6
108A:  MOVWF  0D
108B:  MOVLW  00
108C:  MOVWF  0F
108D:  BCF    0A.4
108E:  BCF    03.6
108F:  GOTO   0BF
1090:  BSF    0A.4
....................     set_adc_channel( 1 ); // set the ADC channel to read  
1091:  MOVLW  04
1092:  MOVWF  78
1093:  MOVF   1F,W
1094:  ANDLW  C3
1095:  IORWF  78,W
1096:  MOVWF  1F
....................     delay_us(100); // wait for the sensor reading to finish 
1097:  MOVLW  A6
1098:  MOVWF  77
1099:  DECFSZ 77,F
109A:  GOTO   099
109B:  NOP
....................   
....................     while (1) { 
....................        analog0 = read_adc(); 
109C:  BSF    1F.1
109D:  BTFSC  1F.1
109E:  GOTO   09D
109F:  BSF    03.5
10A0:  MOVF   1E,W
10A1:  BCF    03.5
10A2:  MOVWF  29
10A3:  MOVF   1E,W
10A4:  MOVWF  2A
....................         
....................         
....................         
....................       /* if(analog0 > 500) 
....................          {   
....................             printf("Light OFF\n"); 
....................             output_low(PIN_B6); 
....................          } 
....................        else  
....................          {  printf("Light ON\n"); 
....................             output_high(PIN_B6); 
....................          }*/ 
....................        delay_ms(100); //100 
10A5:  MOVLW  64
10A6:  MOVWF  5F
10A7:  BCF    0A.4
10A8:  CALL   10E
10A9:  BSF    0A.4
....................        
....................         
....................        //test button 
....................        /* 
....................           if(selectUsed==0 && selectPush==1){ 
....................          selectUsed=1; 
....................          menu=1; 
....................        } 
....................        else if(exitUsed==0 && exitPush==1){ 
....................          exitUsed=1; 
....................          menu=1; 
....................        } 
....................        else if(leftUsed==0 && leftPush==1){ 
....................          leftUsed=1; 
....................          menu-=1; 
....................        } 
....................        else if(rightUsed==0 && rightPush==1){ 
....................          rightUsed=1; 
....................          menu+=1; 
....................        } 
....................        */ 
....................        //setDisplayPos(14); 
....................        //displayValue(i);  
....................         
....................         
....................         
....................        if(REFERENCE_VALUE>525){ 
10AA:  MOVF   3E,W
10AB:  SUBLW  01
10AC:  BTFSC  03.0
10AD:  GOTO   0C5
10AE:  XORLW  FF
10AF:  BTFSS  03.2
10B0:  GOTO   0B5
10B1:  MOVF   3D,W
10B2:  SUBLW  0D
10B3:  BTFSC  03.0
10B4:  GOTO   0C5
....................          analog0 = (analog0-(REFERENCE_VALUE-525)); 
10B5:  MOVLW  0D
10B6:  SUBWF  3D,W
10B7:  MOVWF  77
10B8:  MOVF   3E,W
10B9:  MOVWF  7A
10BA:  MOVLW  02
10BB:  BTFSS  03.0
10BC:  MOVLW  03
10BD:  SUBWF  7A,F
10BE:  MOVF   77,W
10BF:  SUBWF  29,F
10C0:  MOVF   7A,W
10C1:  BTFSS  03.0
10C2:  INCFSZ 7A,W
10C3:  SUBWF  2A,F
....................        } 
....................        else if(REFERENCE_VALUE<525){ 
10C4:  GOTO   0DE
10C5:  MOVF   3E,W
10C6:  SUBLW  02
10C7:  BTFSS  03.0
10C8:  GOTO   0DE
10C9:  BTFSS  03.2
10CA:  GOTO   0CF
10CB:  MOVF   3D,W
10CC:  SUBLW  0C
10CD:  BTFSS  03.0
10CE:  GOTO   0DE
....................          analog0 = (analog0+(525-REFERENCE_VALUE));   
10CF:  MOVF   3D,W
10D0:  SUBLW  0D
10D1:  MOVWF  77
10D2:  MOVLW  02
10D3:  MOVWF  7A
10D4:  MOVF   3E,W
10D5:  BTFSS  03.0
10D6:  INCFSZ 3E,W
10D7:  SUBWF  7A,F
10D8:  MOVF   77,W
10D9:  ADDWF  29,F
10DA:  MOVF   7A,W
10DB:  BTFSC  03.0
10DC:  INCFSZ 7A,W
10DD:  ADDWF  2A,F
....................        }  
....................        //decrese or increse analog0 to fit in graph that we solve because we solve at 0,525 at 0 mA 
....................         
....................       // ampere =  (int16)((analog0 - REFERENCE_VALUE)*SENSITIVE_VOLTAGE); //2.08328889 
....................         
....................         
....................        analog0_sim = analog0; 
10DE:  MOVF   2A,W
10DF:  BSF    03.5
10E0:  MOVWF  39
10E1:  BCF    03.5
10E2:  MOVF   29,W
10E3:  BSF    03.5
10E4:  MOVWF  38
10E5:  BCF    0A.4
10E6:  BCF    03.5
10E7:  CALL   122
10E8:  BSF    0A.4
10E9:  MOVF   7A,W
10EA:  MOVWF  30
10EB:  MOVF   79,W
10EC:  MOVWF  2F
10ED:  MOVF   78,W
10EE:  MOVWF  2E
10EF:  MOVF   77,W
10F0:  MOVWF  2D
....................        ampere_sim =(A*( pow(analog0_sim,3)))-(B*( pow(analog0_sim,2)))+(C* analog0_sim)-D; 
10F1:  MOVF   30,W
10F2:  MOVWF  65
10F3:  MOVF   2F,W
10F4:  MOVWF  64
10F5:  MOVF   2E,W
10F6:  MOVWF  63
10F7:  MOVF   2D,W
10F8:  MOVWF  62
10F9:  CLRF   69
10FA:  CLRF   68
10FB:  MOVLW  40
10FC:  MOVWF  67
10FD:  MOVLW  80
10FE:  MOVWF  66
10FF:  BCF    0A.4
1100:  BSF    0A.3
1101:  CALL   421
1102:  BSF    0A.4
1103:  BCF    0A.3
1104:  MOVF   42,W
1105:  BSF    03.5
1106:  MOVWF  37
1107:  BCF    03.5
1108:  MOVF   41,W
1109:  BSF    03.5
110A:  MOVWF  36
110B:  BCF    03.5
110C:  MOVF   40,W
110D:  BSF    03.5
110E:  MOVWF  35
110F:  BCF    03.5
1110:  MOVF   3F,W
1111:  BSF    03.5
1112:  MOVWF  34
1113:  MOVF   7A,W
1114:  MOVWF  3B
1115:  MOVF   79,W
1116:  MOVWF  3A
1117:  MOVF   78,W
1118:  MOVWF  39
1119:  MOVF   77,W
111A:  MOVWF  38
111B:  BCF    0A.4
111C:  BCF    03.5
111D:  CALL   26F
111E:  BSF    0A.4
111F:  MOVF   7A,W
1120:  MOVWF  61
1121:  MOVF   79,W
1122:  MOVWF  60
1123:  MOVF   78,W
1124:  MOVWF  5F
1125:  MOVF   77,W
1126:  MOVWF  5E
1127:  MOVF   30,W
1128:  MOVWF  65
1129:  MOVF   2F,W
112A:  MOVWF  64
112B:  MOVF   2E,W
112C:  MOVWF  63
112D:  MOVF   2D,W
112E:  MOVWF  62
112F:  CLRF   69
1130:  CLRF   68
1131:  CLRF   67
1132:  MOVLW  80
1133:  MOVWF  66
1134:  BCF    0A.4
1135:  BSF    0A.3
1136:  CALL   421
1137:  BSF    0A.4
1138:  BCF    0A.3
1139:  MOVF   46,W
113A:  BSF    03.5
113B:  MOVWF  37
113C:  BCF    03.5
113D:  MOVF   45,W
113E:  BSF    03.5
113F:  MOVWF  36
1140:  BCF    03.5
1141:  MOVF   44,W
1142:  BSF    03.5
1143:  MOVWF  35
1144:  BCF    03.5
1145:  MOVF   43,W
1146:  BSF    03.5
1147:  MOVWF  34
1148:  MOVF   7A,W
1149:  MOVWF  3B
114A:  MOVF   79,W
114B:  MOVWF  3A
114C:  MOVF   78,W
114D:  MOVWF  39
114E:  MOVF   77,W
114F:  MOVWF  38
1150:  BCF    0A.4
1151:  BCF    03.5
1152:  CALL   26F
1153:  BSF    0A.4
1154:  CLRF   63
1155:  MOVF   04,W
1156:  MOVWF  62
1157:  BCF    63.0
1158:  BTFSC  03.7
1159:  BSF    63.0
115A:  BSF    03.1
115B:  MOVF   61,W
115C:  BSF    03.5
115D:  MOVWF  3B
115E:  BCF    03.5
115F:  MOVF   60,W
1160:  BSF    03.5
1161:  MOVWF  3A
1162:  BCF    03.5
1163:  MOVF   5F,W
1164:  BSF    03.5
1165:  MOVWF  39
1166:  BCF    03.5
1167:  MOVF   5E,W
1168:  BSF    03.5
1169:  MOVWF  38
116A:  MOVF   7A,W
116B:  MOVWF  3F
116C:  MOVF   79,W
116D:  MOVWF  3E
116E:  MOVF   78,W
116F:  MOVWF  3D
1170:  MOVF   77,W
1171:  MOVWF  3C
1172:  BCF    0A.4
1173:  BCF    03.5
1174:  CALL   2E6
1175:  BSF    0A.4
1176:  MOVF   62,W
1177:  MOVWF  04
1178:  BCF    03.7
1179:  BTFSC  63.0
117A:  BSF    03.7
117B:  MOVF   7A,W
117C:  MOVWF  61
117D:  MOVF   79,W
117E:  MOVWF  60
117F:  MOVF   78,W
1180:  MOVWF  5F
1181:  MOVF   77,W
1182:  MOVWF  5E
1183:  MOVF   4A,W
1184:  BSF    03.5
1185:  MOVWF  37
1186:  BCF    03.5
1187:  MOVF   49,W
1188:  BSF    03.5
1189:  MOVWF  36
118A:  BCF    03.5
118B:  MOVF   48,W
118C:  BSF    03.5
118D:  MOVWF  35
118E:  BCF    03.5
118F:  MOVF   47,W
1190:  BSF    03.5
1191:  MOVWF  34
1192:  BCF    03.5
1193:  MOVF   30,W
1194:  BSF    03.5
1195:  MOVWF  3B
1196:  BCF    03.5
1197:  MOVF   2F,W
1198:  BSF    03.5
1199:  MOVWF  3A
119A:  BCF    03.5
119B:  MOVF   2E,W
119C:  BSF    03.5
119D:  MOVWF  39
119E:  BCF    03.5
119F:  MOVF   2D,W
11A0:  BSF    03.5
11A1:  MOVWF  38
11A2:  BCF    0A.4
11A3:  BCF    03.5
11A4:  CALL   26F
11A5:  BSF    0A.4
11A6:  CLRF   65
11A7:  MOVF   04,W
11A8:  MOVWF  64
11A9:  BCF    65.0
11AA:  BTFSC  03.7
11AB:  BSF    65.0
11AC:  BCF    03.1
11AD:  MOVF   61,W
11AE:  BSF    03.5
11AF:  MOVWF  3B
11B0:  BCF    03.5
11B1:  MOVF   60,W
11B2:  BSF    03.5
11B3:  MOVWF  3A
11B4:  BCF    03.5
11B5:  MOVF   5F,W
11B6:  BSF    03.5
11B7:  MOVWF  39
11B8:  BCF    03.5
11B9:  MOVF   5E,W
11BA:  BSF    03.5
11BB:  MOVWF  38
11BC:  MOVF   7A,W
11BD:  MOVWF  3F
11BE:  MOVF   79,W
11BF:  MOVWF  3E
11C0:  MOVF   78,W
11C1:  MOVWF  3D
11C2:  MOVF   77,W
11C3:  MOVWF  3C
11C4:  BCF    0A.4
11C5:  BCF    03.5
11C6:  CALL   2E6
11C7:  BSF    0A.4
11C8:  MOVF   64,W
11C9:  MOVWF  04
11CA:  BCF    03.7
11CB:  BTFSC  65.0
11CC:  BSF    03.7
11CD:  MOVF   7A,W
11CE:  MOVWF  61
11CF:  MOVF   79,W
11D0:  MOVWF  60
11D1:  MOVF   78,W
11D2:  MOVWF  5F
11D3:  MOVF   77,W
11D4:  MOVWF  5E
11D5:  CLRF   67
11D6:  MOVF   04,W
11D7:  MOVWF  66
11D8:  BCF    67.0
11D9:  BTFSC  03.7
11DA:  BSF    67.0
11DB:  BSF    03.1
11DC:  MOVF   61,W
11DD:  BSF    03.5
11DE:  MOVWF  3B
11DF:  BCF    03.5
11E0:  MOVF   60,W
11E1:  BSF    03.5
11E2:  MOVWF  3A
11E3:  BCF    03.5
11E4:  MOVF   5F,W
11E5:  BSF    03.5
11E6:  MOVWF  39
11E7:  BCF    03.5
11E8:  MOVF   5E,W
11E9:  BSF    03.5
11EA:  MOVWF  38
11EB:  BCF    03.5
11EC:  MOVF   4E,W
11ED:  BSF    03.5
11EE:  MOVWF  3F
11EF:  BCF    03.5
11F0:  MOVF   4D,W
11F1:  BSF    03.5
11F2:  MOVWF  3E
11F3:  BCF    03.5
11F4:  MOVF   4C,W
11F5:  BSF    03.5
11F6:  MOVWF  3D
11F7:  BCF    03.5
11F8:  MOVF   4B,W
11F9:  BSF    03.5
11FA:  MOVWF  3C
11FB:  BCF    0A.4
11FC:  BCF    03.5
11FD:  CALL   2E6
11FE:  BSF    0A.4
11FF:  MOVF   66,W
1200:  MOVWF  04
1201:  BCF    03.7
1202:  BTFSC  67.0
1203:  BSF    03.7
1204:  MOVF   7A,W
1205:  MOVWF  34
1206:  MOVF   79,W
1207:  MOVWF  33
1208:  MOVF   78,W
1209:  MOVWF  32
120A:  MOVF   77,W
120B:  MOVWF  31
....................        ampere = (int16) ampere_sim; 
120C:  MOVF   34,W
120D:  BSF    03.5
120E:  MOVWF  37
120F:  BCF    03.5
1210:  MOVF   33,W
1211:  BSF    03.5
1212:  MOVWF  36
1213:  BCF    03.5
1214:  MOVF   32,W
1215:  BSF    03.5
1216:  MOVWF  35
1217:  BCF    03.5
1218:  MOVF   31,W
1219:  BSF    03.5
121A:  MOVWF  34
121B:  BCF    0A.4
121C:  BCF    03.5
121D:  CALL   24E
121E:  BSF    0A.4
121F:  MOVF   79,W
1220:  MOVWF  3A
1221:  MOVF   78,W
1222:  MOVWF  39
....................        power_sim =  0.230*ampere; //((230*ampere)*1000) 
1223:  MOVF   3A,W
1224:  BSF    03.5
1225:  MOVWF  39
1226:  BCF    03.5
1227:  MOVF   39,W
1228:  BSF    03.5
1229:  MOVWF  38
122A:  BCF    0A.4
122B:  BCF    03.5
122C:  CALL   122
122D:  BSF    0A.4
122E:  MOVLW  1F
122F:  BSF    03.5
1230:  MOVWF  37
1231:  MOVLW  85
1232:  MOVWF  36
1233:  MOVLW  6B
1234:  MOVWF  35
1235:  MOVLW  7C
1236:  MOVWF  34
1237:  MOVF   7A,W
1238:  MOVWF  3B
1239:  MOVF   79,W
123A:  MOVWF  3A
123B:  MOVF   78,W
123C:  MOVWF  39
123D:  MOVF   77,W
123E:  MOVWF  38
123F:  BCF    0A.4
1240:  BCF    03.5
1241:  CALL   26F
1242:  BSF    0A.4
1243:  MOVF   7A,W
1244:  MOVWF  38
1245:  MOVF   79,W
1246:  MOVWF  37
1247:  MOVF   78,W
1248:  MOVWF  36
1249:  MOVF   77,W
124A:  MOVWF  35
....................        power = (int16) power_sim; 
124B:  MOVF   38,W
124C:  BSF    03.5
124D:  MOVWF  37
124E:  BCF    03.5
124F:  MOVF   37,W
1250:  BSF    03.5
1251:  MOVWF  36
1252:  BCF    03.5
1253:  MOVF   36,W
1254:  BSF    03.5
1255:  MOVWF  35
1256:  BCF    03.5
1257:  MOVF   35,W
1258:  BSF    03.5
1259:  MOVWF  34
125A:  BCF    0A.4
125B:  BCF    03.5
125C:  CALL   24E
125D:  BSF    0A.4
125E:  MOVF   79,W
125F:  MOVWF  3C
1260:  MOVF   78,W
1261:  MOVWF  3B
....................        printf("Sensor value = %Lu\r\n",analog0 ); 
1262:  MOVLW  A5
1263:  BSF    03.6
1264:  MOVWF  0D
1265:  MOVLW  00
1266:  MOVWF  0F
1267:  BCF    03.0
1268:  MOVLW  0F
1269:  BCF    03.6
126A:  MOVWF  5E
126B:  BCF    0A.4
126C:  CALL   718
126D:  BSF    0A.4
126E:  MOVLW  10
126F:  MOVWF  04
1270:  MOVF   2A,W
1271:  MOVWF  5F
1272:  MOVF   29,W
1273:  MOVWF  5E
1274:  BCF    0A.4
1275:  CALL   76E
1276:  BSF    0A.4
1277:  MOVLW  0D
1278:  BTFSS  0C.4
1279:  GOTO   278
127A:  MOVWF  19
127B:  MOVLW  0A
127C:  BTFSS  0C.4
127D:  GOTO   27C
127E:  MOVWF  19
....................        printf("AMPERE = %Lu\r\n",ampere );  //sent to computer 
127F:  MOVLW  B0
1280:  BSF    03.6
1281:  MOVWF  0D
1282:  MOVLW  00
1283:  MOVWF  0F
1284:  BCF    03.0
1285:  MOVLW  09
1286:  BCF    03.6
1287:  MOVWF  5E
1288:  BCF    0A.4
1289:  CALL   718
128A:  BSF    0A.4
128B:  MOVLW  10
128C:  MOVWF  04
128D:  MOVF   3A,W
128E:  MOVWF  5F
128F:  MOVF   39,W
1290:  MOVWF  5E
1291:  BCF    0A.4
1292:  CALL   76E
1293:  BSF    0A.4
1294:  MOVLW  0D
1295:  BTFSS  0C.4
1296:  GOTO   295
1297:  MOVWF  19
1298:  MOVLW  0A
1299:  BTFSS  0C.4
129A:  GOTO   299
129B:  MOVWF  19
....................        printf("POWER = %Lu\r\n",power ); 
129C:  MOVLW  B8
129D:  BSF    03.6
129E:  MOVWF  0D
129F:  MOVLW  00
12A0:  MOVWF  0F
12A1:  BCF    03.0
12A2:  MOVLW  08
12A3:  BCF    03.6
12A4:  MOVWF  5E
12A5:  BCF    0A.4
12A6:  CALL   718
12A7:  BSF    0A.4
12A8:  MOVLW  10
12A9:  MOVWF  04
12AA:  MOVF   3C,W
12AB:  MOVWF  5F
12AC:  MOVF   3B,W
12AD:  MOVWF  5E
12AE:  BCF    0A.4
12AF:  CALL   76E
12B0:  BSF    0A.4
12B1:  MOVLW  0D
12B2:  BTFSS  0C.4
12B3:  GOTO   2B2
12B4:  MOVWF  19
12B5:  MOVLW  0A
12B6:  BTFSS  0C.4
12B7:  GOTO   2B6
12B8:  MOVWF  19
....................        delay_ms(500); 
12B9:  MOVLW  02
12BA:  MOVWF  5E
12BB:  MOVLW  FA
12BC:  MOVWF  5F
12BD:  BCF    0A.4
12BE:  CALL   10E
12BF:  BSF    0A.4
12C0:  DECFSZ 5E,F
12C1:  GOTO   2BB
....................        //button 
....................     
....................        menu = checkleft(menu); 
12C2:  MOVF   4F,W
12C3:  MOVWF  5E
12C4:  BCF    0A.4
12C5:  GOTO   7E8
12C6:  BSF    0A.4
12C7:  MOVF   78,W
12C8:  MOVWF  4F
....................        menu = checkright(menu); 
12C9:  MOVF   4F,W
12CA:  MOVWF  5E
12CB:  BCF    0A.4
12CC:  BSF    0A.3
12CD:  GOTO   606
12CE:  BSF    0A.4
12CF:  BCF    0A.3
12D0:  MOVF   78,W
12D1:  MOVWF  4F
....................        if(menu>6){ 
12D2:  MOVF   4F,W
12D3:  SUBLW  06
12D4:  BTFSC  03.0
12D5:  GOTO   2E2
....................          menu%=6; 
12D6:  MOVF   4F,W
12D7:  MOVWF  5E
12D8:  MOVLW  06
12D9:  MOVWF  5F
12DA:  BCF    0A.4
12DB:  BSF    0A.3
12DC:  GOTO   615
12DD:  BSF    0A.4
12DE:  BCF    0A.3
12DF:  MOVF   77,W
12E0:  MOVWF  4F
....................        } 
....................        else if(menu==1){ 
12E1:  GOTO   43A
12E2:  DECFSZ 4F,W
12E3:  GOTO   38E
....................          setDisplayPos(1);                      
12E4:  MOVLW  01
12E5:  MOVWF  5E
12E6:  BCF    0A.4
12E7:  BSF    0A.3
12E8:  CALL   62C
12E9:  BSF    0A.4
12EA:  BCF    0A.3
....................          displayLongText("SENSOR"); 
12EB:  CLRF   78
12EC:  MOVLW  07
12ED:  MOVWF  77
12EE:  MOVLW  50
12EF:  MOVWF  04
12F0:  BCF    03.7
12F1:  MOVF   78,W
12F2:  BCF    0A.4
12F3:  CALL   02F
12F4:  BSF    0A.4
12F5:  MOVWF  00
12F6:  INCF   78,F
12F7:  INCF   04,F
12F8:  DECFSZ 77,F
12F9:  GOTO   2F1
12FA:  CLRF   61
12FB:  MOVLW  50
12FC:  MOVWF  60
12FD:  BCF    0A.4
12FE:  BSF    0A.3
12FF:  CALL   64A
1300:  BSF    0A.4
1301:  BCF    0A.3
....................          setDisplayPos(7);                      
1302:  MOVLW  07
1303:  MOVWF  5E
1304:  BCF    0A.4
1305:  BSF    0A.3
1306:  CALL   62C
1307:  BSF    0A.4
1308:  BCF    0A.3
....................          displayLongText("  mA  "); 
1309:  CLRF   78
130A:  MOVLW  07
130B:  MOVWF  77
130C:  MOVLW  50
130D:  MOVWF  04
130E:  BCF    03.7
130F:  MOVF   78,W
1310:  BCF    0A.4
1311:  CALL   03A
1312:  BSF    0A.4
1313:  MOVWF  00
1314:  INCF   78,F
1315:  INCF   04,F
1316:  DECFSZ 77,F
1317:  GOTO   30F
1318:  CLRF   61
1319:  MOVLW  50
131A:  MOVWF  60
131B:  BCF    0A.4
131C:  BSF    0A.3
131D:  CALL   64A
131E:  BSF    0A.4
131F:  BCF    0A.3
....................          setDisplayPos(13);                      
1320:  MOVLW  0D
1321:  MOVWF  5E
1322:  BCF    0A.4
1323:  BSF    0A.3
1324:  CALL   62C
1325:  BSF    0A.4
1326:  BCF    0A.3
....................          displayLongText("WATT"); 
1327:  MOVLW  57
1328:  MOVWF  50
1329:  MOVLW  41
132A:  MOVWF  51
132B:  MOVLW  54
132C:  MOVWF  52
132D:  MOVWF  53
132E:  CLRF   54
132F:  CLRF   61
1330:  MOVLW  50
1331:  MOVWF  60
1332:  BCF    0A.4
1333:  BSF    0A.3
1334:  CALL   64A
1335:  BSF    0A.4
1336:  BCF    0A.3
....................          setDisplayPos(18); 
1337:  MOVLW  12
1338:  MOVWF  5E
1339:  BCF    0A.4
133A:  BSF    0A.3
133B:  CALL   62C
133C:  BSF    0A.4
133D:  BCF    0A.3
....................          displayValue(analog0); 
133E:  MOVF   2A,W
133F:  MOVWF  5F
1340:  MOVF   29,W
1341:  MOVWF  5E
1342:  BCF    0A.4
1343:  BSF    0A.3
1344:  CALL   67B
1345:  BSF    0A.4
1346:  BCF    0A.3
....................          setDisplayPos(21);                      
1347:  MOVLW  15
1348:  MOVWF  5E
1349:  BCF    0A.4
134A:  BSF    0A.3
134B:  CALL   62C
134C:  BSF    0A.4
134D:  BCF    0A.3
....................          displayLongText("   "); 
134E:  MOVLW  20
134F:  MOVWF  50
1350:  MOVWF  51
1351:  MOVWF  52
1352:  CLRF   53
1353:  CLRF   61
1354:  MOVLW  50
1355:  MOVWF  60
1356:  BCF    0A.4
1357:  BSF    0A.3
1358:  CALL   64A
1359:  BSF    0A.4
135A:  BCF    0A.3
....................          setDisplayPos(24); 
135B:  MOVLW  18
135C:  MOVWF  5E
135D:  BCF    0A.4
135E:  BSF    0A.3
135F:  CALL   62C
1360:  BSF    0A.4
1361:  BCF    0A.3
....................          displayValue(ampere); 
1362:  MOVF   3A,W
1363:  MOVWF  5F
1364:  MOVF   39,W
1365:  MOVWF  5E
1366:  BCF    0A.4
1367:  BSF    0A.3
1368:  CALL   67B
1369:  BSF    0A.4
136A:  BCF    0A.3
....................          setDisplayPos(28);                      
136B:  MOVLW  1C
136C:  MOVWF  5E
136D:  BCF    0A.4
136E:  BSF    0A.3
136F:  CALL   62C
1370:  BSF    0A.4
1371:  BCF    0A.3
....................          displayLongText(" "); 
1372:  MOVLW  20
1373:  MOVWF  50
1374:  CLRF   51
1375:  CLRF   61
1376:  MOVLW  50
1377:  MOVWF  60
1378:  BCF    0A.4
1379:  BSF    0A.3
137A:  CALL   64A
137B:  BSF    0A.4
137C:  BCF    0A.3
....................          setDisplayPos(29); 
137D:  MOVLW  1D
137E:  MOVWF  5E
137F:  BCF    0A.4
1380:  BSF    0A.3
1381:  CALL   62C
1382:  BSF    0A.4
1383:  BCF    0A.3
....................          displayValue(power); 
1384:  MOVF   3C,W
1385:  MOVWF  5F
1386:  MOVF   3B,W
1387:  MOVWF  5E
1388:  BCF    0A.4
1389:  BSF    0A.3
138A:  CALL   67B
138B:  BSF    0A.4
138C:  BCF    0A.3
....................         
....................        } 
....................        else if(menu==2){ 
138D:  GOTO   43A
138E:  MOVF   4F,W
138F:  SUBLW  02
1390:  BTFSS  03.2
1391:  GOTO   43A
....................          setDisplayPos(1);                      
1392:  MOVLW  01
1393:  MOVWF  5E
1394:  BCF    0A.4
1395:  BSF    0A.3
1396:  CALL   62C
1397:  BSF    0A.4
1398:  BCF    0A.3
....................          displayLongText(" volt "); 
1399:  CLRF   78
139A:  MOVLW  07
139B:  MOVWF  77
139C:  MOVLW  57
139D:  MOVWF  04
139E:  BCF    03.7
139F:  MOVF   78,W
13A0:  BCF    0A.4
13A1:  CALL   045
13A2:  BSF    0A.4
13A3:  MOVWF  00
13A4:  INCF   78,F
13A5:  INCF   04,F
13A6:  DECFSZ 77,F
13A7:  GOTO   39F
13A8:  CLRF   61
13A9:  MOVLW  57
13AA:  MOVWF  60
13AB:  BCF    0A.4
13AC:  BSF    0A.3
13AD:  CALL   64A
13AE:  BSF    0A.4
13AF:  BCF    0A.3
....................          setDisplayPos(7);                      
13B0:  MOVLW  07
13B1:  MOVWF  5E
13B2:  BCF    0A.4
13B3:  BSF    0A.3
13B4:  CALL   62C
13B5:  BSF    0A.4
13B6:  BCF    0A.3
....................          displayLongText("  mA  "); 
13B7:  CLRF   78
13B8:  MOVLW  07
13B9:  MOVWF  77
13BA:  MOVLW  57
13BB:  MOVWF  04
13BC:  BCF    03.7
13BD:  MOVF   78,W
13BE:  BCF    0A.4
13BF:  CALL   03A
13C0:  BSF    0A.4
13C1:  MOVWF  00
13C2:  INCF   78,F
13C3:  INCF   04,F
13C4:  DECFSZ 77,F
13C5:  GOTO   3BD
13C6:  CLRF   61
13C7:  MOVLW  57
13C8:  MOVWF  60
13C9:  BCF    0A.4
13CA:  BSF    0A.3
13CB:  CALL   64A
13CC:  BSF    0A.4
13CD:  BCF    0A.3
....................          setDisplayPos(13);                      
13CE:  MOVLW  0D
13CF:  MOVWF  5E
13D0:  BCF    0A.4
13D1:  BSF    0A.3
13D2:  CALL   62C
13D3:  BSF    0A.4
13D4:  BCF    0A.3
....................          displayLongText("WATT"); 
13D5:  MOVLW  57
13D6:  MOVWF  57
13D7:  MOVLW  41
13D8:  MOVWF  58
13D9:  MOVLW  54
13DA:  MOVWF  59
13DB:  MOVWF  5A
13DC:  CLRF   5B
13DD:  CLRF   61
13DE:  MOVLW  57
13DF:  MOVWF  60
13E0:  BCF    0A.4
13E1:  BSF    0A.3
13E2:  CALL   64A
13E3:  BSF    0A.4
13E4:  BCF    0A.3
....................          setDisplayPos(18); 
13E5:  MOVLW  12
13E6:  MOVWF  5E
13E7:  BCF    0A.4
13E8:  BSF    0A.3
13E9:  CALL   62C
13EA:  BSF    0A.4
13EB:  BCF    0A.3
....................          displayValue(230); 
13EC:  CLRF   5F
13ED:  MOVLW  E6
13EE:  MOVWF  5E
13EF:  BCF    0A.4
13F0:  BSF    0A.3
13F1:  CALL   67B
13F2:  BSF    0A.4
13F3:  BCF    0A.3
....................          setDisplayPos(21);                      
13F4:  MOVLW  15
13F5:  MOVWF  5E
13F6:  BCF    0A.4
13F7:  BSF    0A.3
13F8:  CALL   62C
13F9:  BSF    0A.4
13FA:  BCF    0A.3
....................          displayLongText("   "); 
13FB:  MOVLW  20
13FC:  MOVWF  57
13FD:  MOVWF  58
13FE:  MOVWF  59
13FF:  CLRF   5A
1400:  CLRF   61
1401:  MOVLW  57
1402:  MOVWF  60
1403:  BCF    0A.4
1404:  BSF    0A.3
1405:  CALL   64A
1406:  BSF    0A.4
1407:  BCF    0A.3
....................          setDisplayPos(24); 
1408:  MOVLW  18
1409:  MOVWF  5E
140A:  BCF    0A.4
140B:  BSF    0A.3
140C:  CALL   62C
140D:  BSF    0A.4
140E:  BCF    0A.3
....................          displayValue(ampere); 
140F:  MOVF   3A,W
1410:  MOVWF  5F
1411:  MOVF   39,W
1412:  MOVWF  5E
1413:  BCF    0A.4
1414:  BSF    0A.3
1415:  CALL   67B
1416:  BSF    0A.4
1417:  BCF    0A.3
....................          setDisplayPos(28);                      
1418:  MOVLW  1C
1419:  MOVWF  5E
141A:  BCF    0A.4
141B:  BSF    0A.3
141C:  CALL   62C
141D:  BSF    0A.4
141E:  BCF    0A.3
....................          displayLongText(" "); 
141F:  MOVLW  20
1420:  MOVWF  57
1421:  CLRF   58
1422:  CLRF   61
1423:  MOVLW  57
1424:  MOVWF  60
1425:  BCF    0A.4
1426:  BSF    0A.3
1427:  CALL   64A
1428:  BSF    0A.4
1429:  BCF    0A.3
....................          setDisplayPos(29); 
142A:  MOVLW  1D
142B:  MOVWF  5E
142C:  BCF    0A.4
142D:  BSF    0A.3
142E:  CALL   62C
142F:  BSF    0A.4
1430:  BCF    0A.3
....................          displayValue(power); 
1431:  MOVF   3C,W
1432:  MOVWF  5F
1433:  MOVF   3B,W
1434:  MOVWF  5E
1435:  BCF    0A.4
1436:  BSF    0A.3
1437:  CALL   67B
1438:  BSF    0A.4
1439:  BCF    0A.3
....................           
....................        } 
....................         
....................         
....................    
....................         
....................         
....................         
....................        //clearDisplay();   
....................     } 
143A:  GOTO   09C
.................... } 
....................  
....................  
....................  
....................  
....................  
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
.................... int checkselect(int menu){ 
....................         
143B:  SLEEP
....................       if(selectUsed==0 && selectPush==1){ 
....................          selectUsed=1; 
....................          menu=1; 
....................          clearDisplay(); 
....................        } 
....................        else{ 
....................          menu=0; 
....................         
....................        } 
....................        return menu; 
.................... } 
....................  
.................... int checkexit(int menu){ 
....................         
....................        if(exitUsed==0 && exitPush==1){ 
....................          exitUsed=1; 
....................          menu=1; 
....................          clearDisplay(); 
....................        } 
....................        else{ 
....................          menu=0; 
....................         
....................        } 
....................        return menu; 
.................... } 
....................  
.................... int checkleft(int menu){ 
....................         
....................        if(leftUsed==0 && leftPush==1){ 
07E8:  BTFSC  28.5
07E9:  GOTO   7F0
07EA:  BTFSS  28.4
07EB:  GOTO   7F0
....................          leftUsed=1; 
07EC:  BSF    28.5
....................          menu-=1; 
07ED:  MOVLW  01
07EE:  SUBWF  5E,F
....................          clearDisplay(); 
07EF:  CALL   7D7
....................        } 
....................         
....................        return menu; 
07F0:  MOVF   5E,W
07F1:  MOVWF  78
.................... } 
07F2:  BCF    0A.3
07F3:  BSF    0A.4
07F4:  GOTO   2C6 (RETURN)
....................  
.................... int checkright(int menu){ 
....................         
....................        if(rightUsed==0 && rightPush==1){ 
0E06:  BTFSC  28.7
0E07:  GOTO   610
0E08:  BTFSS  28.6
0E09:  GOTO   610
....................          rightUsed=1; 
0E0A:  BSF    28.7
....................          menu+=1; 
0E0B:  MOVLW  01
0E0C:  ADDWF  5E,F
....................          clearDisplay(); 
0E0D:  BCF    0A.3
0E0E:  CALL   7D7
0E0F:  BSF    0A.3
....................        } 
....................         
....................        return menu; 
0E10:  MOVF   5E,W
0E11:  MOVWF  78
.................... } 
0E12:  BCF    0A.3
0E13:  BSF    0A.4
0E14:  GOTO   2CE (RETURN)
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void displayLongText(char* text) { 
....................  
.................... int i ; 
.................... i2c_start(); 
0E4A:  BSF    03.5
0E4B:  BSF    11.0
0E4C:  BTFSC  11.0
0E4D:  GOTO   64C
.................... i2c_write(DISPLAY_ADDRESS); 
0E4E:  MOVLW  B4
0E4F:  BCF    03.5
0E50:  MOVWF  64
0E51:  BCF    0A.3
0E52:  CALL   7C7
0E53:  BSF    0A.3
.................... i2c_write(DISPLAY_CMD_SEND_LONG_TEXT); 
0E54:  MOVLW  05
0E55:  MOVWF  64
0E56:  BCF    0A.3
0E57:  CALL   7C7
0E58:  BSF    0A.3
....................  
.................... for(i=0;text[i]!='\0';i++) 
0E59:  CLRF   62
0E5A:  MOVF   62,W
0E5B:  ADDWF  60,W
0E5C:  MOVWF  04
0E5D:  BCF    03.7
0E5E:  BTFSC  61.0
0E5F:  BSF    03.7
0E60:  MOVF   00,F
0E61:  BTFSC  03.2
0E62:  GOTO   671
.................... { 
.................... i2c_write(text[i]); 
0E63:  MOVF   62,W
0E64:  ADDWF  60,W
0E65:  MOVWF  04
0E66:  BCF    03.7
0E67:  BTFSC  61.0
0E68:  BSF    03.7
0E69:  MOVF   00,W
0E6A:  MOVWF  63
0E6B:  MOVWF  64
0E6C:  BCF    0A.3
0E6D:  CALL   7C7
0E6E:  BSF    0A.3
....................  
.................... } 
0E6F:  INCF   62,F
0E70:  GOTO   65A
.................... i2c_write('\0'); 
0E71:  CLRF   64
0E72:  BCF    0A.3
0E73:  CALL   7C7
0E74:  BSF    0A.3
.................... i2c_stop(); 
0E75:  BSF    03.5
0E76:  BSF    11.2
0E77:  BTFSC  11.2
0E78:  GOTO   677
....................  
.................... //delay_ms(100); 
....................  
.................... } 
0E79:  BCF    03.5
0E7A:  RETURN
....................  
....................  
.................... void displayValue(int16 value[]) { 
....................  
....................    i2c_start(); 
0E7B:  BSF    03.5
0E7C:  BSF    11.0
0E7D:  BTFSC  11.0
0E7E:  GOTO   67D
....................    i2c_write(DISPLAY_ADDRESS); 
0E7F:  MOVLW  B4
0E80:  BCF    03.5
0E81:  MOVWF  64
0E82:  BCF    0A.3
0E83:  CALL   7C7
0E84:  BSF    0A.3
....................    i2c_write(DISPLAY_CMD_SEND_VALUE); 
0E85:  MOVLW  02
0E86:  MOVWF  64
0E87:  BCF    0A.3
0E88:  CALL   7C7
0E89:  BSF    0A.3
....................    i2c_write((int)(value>>8)); // high byte 
0E8A:  MOVF   5F,W
0E8B:  CLRF   7A
0E8C:  MOVWF  60
0E8D:  MOVWF  64
0E8E:  BCF    0A.3
0E8F:  CALL   7C7
0E90:  BSF    0A.3
....................    i2c_write((int)(value & 0xFF)); // low byte 
0E91:  MOVF   5E,W
0E92:  MOVWF  77
0E93:  CLRF   7A
0E94:  MOVF   5E,W
0E95:  MOVWF  60
0E96:  MOVWF  64
0E97:  BCF    0A.3
0E98:  CALL   7C7
0E99:  BSF    0A.3
....................    i2c_write('\0'); 
0E9A:  CLRF   64
0E9B:  BCF    0A.3
0E9C:  CALL   7C7
0E9D:  BSF    0A.3
....................    i2c_stop(); 
0E9E:  BSF    03.5
0E9F:  BSF    11.2
0EA0:  BTFSC  11.2
0EA1:  GOTO   6A0
....................     
.................... } 
0EA2:  BCF    03.5
0EA3:  RETURN
....................  
.................... void clearDisplay(){ 
....................  
....................    i2c_start(); 
07D7:  BSF    03.5
07D8:  BSF    11.0
07D9:  BTFSC  11.0
07DA:  GOTO   7D9
....................    i2c_write(DISPLAY_ADDRESS); 
07DB:  MOVLW  B4
07DC:  BCF    03.5
07DD:  MOVWF  64
07DE:  CALL   7C7
....................    i2c_write(DISPLAY_CMD_CLS); 
07DF:  MOVLW  06
07E0:  MOVWF  64
07E1:  CALL   7C7
....................    i2c_stop(); 
07E2:  BSF    03.5
07E3:  BSF    11.2
07E4:  BTFSC  11.2
07E5:  GOTO   7E4
.................... } 
07E6:  BCF    03.5
07E7:  RETURN
....................  
.................... void setDisplayPos(int pos){ 
....................    i2c_start(); 
0E2C:  BSF    03.5
0E2D:  BSF    11.0
0E2E:  BTFSC  11.0
0E2F:  GOTO   62E
....................    i2c_write(DISPLAY_ADDRESS); 
0E30:  MOVLW  B4
0E31:  BCF    03.5
0E32:  MOVWF  64
0E33:  BCF    0A.3
0E34:  CALL   7C7
0E35:  BSF    0A.3
....................    i2c_write(DISPLAY_CMD_SETPOS); 
0E36:  MOVLW  08
0E37:  MOVWF  64
0E38:  BCF    0A.3
0E39:  CALL   7C7
0E3A:  BSF    0A.3
....................    i2c_write(pos); 
0E3B:  MOVF   5E,W
0E3C:  MOVWF  64
0E3D:  BCF    0A.3
0E3E:  CALL   7C7
0E3F:  BSF    0A.3
....................    i2c_write('\0'); 
0E40:  CLRF   64
0E41:  BCF    0A.3
0E42:  CALL   7C7
0E43:  BSF    0A.3
....................    i2c_stop(); 
0E44:  BSF    03.5
0E45:  BSF    11.2
0E46:  BTFSC  11.2
0E47:  GOTO   646
.................... } 
0E48:  BCF    03.5
0E49:  RETURN
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 

Configuration Fuses:
   Word  1: 2FC2   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
