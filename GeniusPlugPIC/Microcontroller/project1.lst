CCS PCM C Compiler, Version 4.141, 64203               02-¡.¾.-14 23:46

               Filename:   C:\Users\pump\Documents\geniusplug\GeniusPlugPIC\Microcontroller\project1.lst

               ROM used:   5414 words (66%)
                           Largest free fragment is 2048
               RAM used:   32 (9%) at main() level
                           146 (40%) worst case
               Stack:     6 worst case (5 in main + 1 for interrupts)

0000:  MOVLW  11
0001:  MOVWF  0A
0002:  GOTO   19C
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   0B9
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
*
*
*
*
.................... #list 
....................  
.................... #device adc=10  // use 10-bit ADC 
.................... #device PASS_STRINGS=IN_RAM 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
0495:  BSF    03.5
0496:  BCF    37.0
....................    y = x; 
0497:  MOVF   2B,W
0498:  MOVWF  30
0499:  MOVF   2A,W
049A:  MOVWF  2F
049B:  MOVF   29,W
049C:  MOVWF  2E
049D:  MOVF   28,W
049E:  MOVWF  2D
....................  
....................    if (x < 0) 
049F:  MOVF   2B,W
04A0:  MOVWF  3B
04A1:  MOVF   2A,W
04A2:  MOVWF  3A
04A3:  MOVF   29,W
04A4:  MOVWF  39
04A5:  MOVF   28,W
04A6:  MOVWF  38
04A7:  CLRF   3F
04A8:  CLRF   3E
04A9:  CLRF   3D
04AA:  CLRF   3C
04AB:  BCF    03.5
04AC:  CALL   1AA
04AD:  BTFSS  03.0
04AE:  GOTO   4B5
....................    { 
....................       s = 1; 
04AF:  BSF    03.5
04B0:  BSF    37.0
....................       y = -y; 
04B1:  MOVF   2E,W
04B2:  XORLW  80
04B3:  MOVWF  2E
04B4:  BCF    03.5
....................    } 
....................  
....................    if (y <= 32768.0) 
04B5:  BSF    03.5
04B6:  MOVF   30,W
04B7:  MOVWF  3B
04B8:  MOVF   2F,W
04B9:  MOVWF  3A
04BA:  MOVF   2E,W
04BB:  MOVWF  39
04BC:  MOVF   2D,W
04BD:  MOVWF  38
04BE:  CLRF   3F
04BF:  CLRF   3E
04C0:  CLRF   3D
04C1:  MOVLW  8E
04C2:  MOVWF  3C
04C3:  BCF    03.5
04C4:  CALL   1AA
04C5:  BTFSC  03.0
04C6:  GOTO   4C9
04C7:  BTFSS  03.2
04C8:  GOTO   4E6
....................       res = (float32)(unsigned int16)y; 
04C9:  BSF    03.5
04CA:  MOVF   30,W
04CB:  MOVWF  3B
04CC:  MOVF   2F,W
04CD:  MOVWF  3A
04CE:  MOVF   2E,W
04CF:  MOVWF  39
04D0:  MOVF   2D,W
04D1:  MOVWF  38
04D2:  BCF    03.5
04D3:  CALL   2B7
04D4:  MOVF   79,W
04D5:  BSF    03.5
04D6:  MOVWF  3D
04D7:  MOVF   78,W
04D8:  MOVWF  3C
04D9:  BCF    03.5
04DA:  CALL   18B
04DB:  MOVF   7A,W
04DC:  BSF    03.5
04DD:  MOVWF  34
04DE:  MOVF   79,W
04DF:  MOVWF  33
04E0:  MOVF   78,W
04E1:  MOVWF  32
04E2:  MOVF   77,W
04E3:  MOVWF  31
....................  
....................  else if (y < 10000000.0) 
04E4:  GOTO   5BE
04E5:  BCF    03.5
04E6:  BSF    03.5
04E7:  MOVF   30,W
04E8:  MOVWF  3B
04E9:  MOVF   2F,W
04EA:  MOVWF  3A
04EB:  MOVF   2E,W
04EC:  MOVWF  39
04ED:  MOVF   2D,W
04EE:  MOVWF  38
04EF:  MOVLW  80
04F0:  MOVWF  3F
04F1:  MOVLW  96
04F2:  MOVWF  3E
04F3:  MOVLW  18
04F4:  MOVWF  3D
04F5:  MOVLW  96
04F6:  MOVWF  3C
04F7:  BCF    03.5
04F8:  CALL   1AA
04F9:  BTFSS  03.0
04FA:  GOTO   5B5
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
04FB:  BSF    03.5
04FC:  MOVF   30,W
04FD:  MOVWF  3B
04FE:  MOVF   2F,W
04FF:  MOVWF  3A
0500:  MOVF   2E,W
0501:  MOVWF  39
0502:  MOVF   2D,W
0503:  MOVWF  38
0504:  CLRF   3F
0505:  CLRF   3E
0506:  CLRF   3D
0507:  MOVLW  70
0508:  MOVWF  3C
0509:  BCF    03.5
050A:  CALL   2D8
050B:  MOVF   7A,W
050C:  BSF    03.5
050D:  MOVWF  3B
050E:  MOVF   79,W
050F:  MOVWF  3A
0510:  MOVF   78,W
0511:  MOVWF  39
0512:  MOVF   77,W
0513:  MOVWF  38
0514:  BCF    03.5
0515:  CALL   2B7
0516:  MOVF   79,W
0517:  BSF    03.5
0518:  MOVWF  36
0519:  MOVF   78,W
051A:  MOVWF  35
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
051B:  MOVF   30,W
051C:  MOVWF  3B
051D:  MOVF   2F,W
051E:  MOVWF  3A
051F:  MOVF   2E,W
0520:  MOVWF  39
0521:  MOVF   2D,W
0522:  MOVWF  38
0523:  CLRF   3F
0524:  CLRF   3E
0525:  CLRF   3D
0526:  MOVLW  70
0527:  MOVWF  3C
0528:  BCF    03.5
0529:  CALL   2D8
052A:  MOVF   7A,W
052B:  BSF    03.5
052C:  MOVWF  3B
052D:  MOVF   79,W
052E:  MOVWF  3A
052F:  MOVF   78,W
0530:  MOVWF  39
0531:  MOVF   77,W
0532:  MOVWF  38
0533:  MOVF   36,W
0534:  MOVWF  3D
0535:  MOVF   35,W
0536:  MOVWF  3C
0537:  BCF    03.5
0538:  CALL   18B
0539:  BSF    03.1
053A:  BSF    03.5
053B:  MOVF   3B,W
053C:  MOVWF  3F
053D:  MOVF   3A,W
053E:  MOVWF  3E
053F:  MOVF   39,W
0540:  MOVWF  3D
0541:  MOVF   38,W
0542:  MOVWF  3C
0543:  MOVF   7A,W
0544:  MOVWF  43
0545:  MOVF   79,W
0546:  MOVWF  42
0547:  MOVF   78,W
0548:  MOVWF  41
0549:  MOVF   77,W
054A:  MOVWF  40
054B:  BCF    03.5
054C:  CALL   34F
054D:  BSF    03.5
054E:  CLRF   3B
054F:  CLRF   3A
0550:  CLRF   39
0551:  MOVLW  8E
0552:  MOVWF  38
0553:  MOVF   7A,W
0554:  MOVWF  3F
0555:  MOVF   79,W
0556:  MOVWF  3E
0557:  MOVF   78,W
0558:  MOVWF  3D
0559:  MOVF   77,W
055A:  MOVWF  3C
055B:  BCF    03.5
055C:  CALL   2D8
055D:  MOVF   7A,W
055E:  BSF    03.5
055F:  MOVWF  30
0560:  MOVF   79,W
0561:  MOVWF  2F
0562:  MOVF   78,W
0563:  MOVWF  2E
0564:  MOVF   77,W
0565:  MOVWF  2D
....................       res = 32768.0*(float32)l; 
0566:  MOVF   36,W
0567:  MOVWF  3D
0568:  MOVF   35,W
0569:  MOVWF  3C
056A:  BCF    03.5
056B:  CALL   18B
056C:  BSF    03.5
056D:  CLRF   3B
056E:  CLRF   3A
056F:  CLRF   39
0570:  MOVLW  8E
0571:  MOVWF  38
0572:  MOVF   7A,W
0573:  MOVWF  3F
0574:  MOVF   79,W
0575:  MOVWF  3E
0576:  MOVF   78,W
0577:  MOVWF  3D
0578:  MOVF   77,W
0579:  MOVWF  3C
057A:  BCF    03.5
057B:  CALL   2D8
057C:  MOVF   7A,W
057D:  BSF    03.5
057E:  MOVWF  34
057F:  MOVF   79,W
0580:  MOVWF  33
0581:  MOVF   78,W
0582:  MOVWF  32
0583:  MOVF   77,W
0584:  MOVWF  31
....................       res += (float32)(unsigned int16)y; 
0585:  MOVF   30,W
0586:  MOVWF  3B
0587:  MOVF   2F,W
0588:  MOVWF  3A
0589:  MOVF   2E,W
058A:  MOVWF  39
058B:  MOVF   2D,W
058C:  MOVWF  38
058D:  BCF    03.5
058E:  CALL   2B7
058F:  MOVF   79,W
0590:  BSF    03.5
0591:  MOVWF  3D
0592:  MOVF   78,W
0593:  MOVWF  3C
0594:  BCF    03.5
0595:  CALL   18B
0596:  BCF    03.1
0597:  BSF    03.5
0598:  MOVF   34,W
0599:  MOVWF  3F
059A:  MOVF   33,W
059B:  MOVWF  3E
059C:  MOVF   32,W
059D:  MOVWF  3D
059E:  MOVF   31,W
059F:  MOVWF  3C
05A0:  MOVF   7A,W
05A1:  MOVWF  43
05A2:  MOVF   79,W
05A3:  MOVWF  42
05A4:  MOVF   78,W
05A5:  MOVWF  41
05A6:  MOVF   77,W
05A7:  MOVWF  40
05A8:  BCF    03.5
05A9:  CALL   34F
05AA:  MOVF   7A,W
05AB:  BSF    03.5
05AC:  MOVWF  34
05AD:  MOVF   79,W
05AE:  MOVWF  33
05AF:  MOVF   78,W
05B0:  MOVWF  32
05B1:  MOVF   77,W
05B2:  MOVWF  31
....................    } 
....................  
....................  else 
05B3:  GOTO   5BE
05B4:  BCF    03.5
....................   res = y; 
05B5:  BSF    03.5
05B6:  MOVF   30,W
05B7:  MOVWF  34
05B8:  MOVF   2F,W
05B9:  MOVWF  33
05BA:  MOVF   2E,W
05BB:  MOVWF  32
05BC:  MOVF   2D,W
05BD:  MOVWF  31
....................  
....................  y = y - (float32)(unsigned int16)y; 
05BE:  MOVF   30,W
05BF:  MOVWF  3B
05C0:  MOVF   2F,W
05C1:  MOVWF  3A
05C2:  MOVF   2E,W
05C3:  MOVWF  39
05C4:  MOVF   2D,W
05C5:  MOVWF  38
05C6:  BCF    03.5
05C7:  CALL   2B7
05C8:  MOVF   79,W
05C9:  BSF    03.5
05CA:  MOVWF  3D
05CB:  MOVF   78,W
05CC:  MOVWF  3C
05CD:  BCF    03.5
05CE:  CALL   18B
05CF:  BSF    03.1
05D0:  BSF    03.5
05D1:  MOVF   30,W
05D2:  MOVWF  3F
05D3:  MOVF   2F,W
05D4:  MOVWF  3E
05D5:  MOVF   2E,W
05D6:  MOVWF  3D
05D7:  MOVF   2D,W
05D8:  MOVWF  3C
05D9:  MOVF   7A,W
05DA:  MOVWF  43
05DB:  MOVF   79,W
05DC:  MOVWF  42
05DD:  MOVF   78,W
05DE:  MOVWF  41
05DF:  MOVF   77,W
05E0:  MOVWF  40
05E1:  BCF    03.5
05E2:  CALL   34F
05E3:  MOVF   7A,W
05E4:  BSF    03.5
05E5:  MOVWF  30
05E6:  MOVF   79,W
05E7:  MOVWF  2F
05E8:  MOVF   78,W
05E9:  MOVWF  2E
05EA:  MOVF   77,W
05EB:  MOVWF  2D
....................  
....................  if (s) 
05EC:  BTFSS  37.0
05ED:  GOTO   5F1
....................   res = -res; 
05EE:  MOVF   32,W
05EF:  XORLW  80
05F0:  MOVWF  32
....................  
....................  if (y != 0) 
05F1:  MOVF   30,W
05F2:  MOVWF  3B
05F3:  MOVF   2F,W
05F4:  MOVWF  3A
05F5:  MOVF   2E,W
05F6:  MOVWF  39
05F7:  MOVF   2D,W
05F8:  MOVWF  38
05F9:  CLRF   3F
05FA:  CLRF   3E
05FB:  CLRF   3D
05FC:  CLRF   3C
05FD:  BCF    03.5
05FE:  CALL   1AA
05FF:  BTFSC  03.2
0600:  GOTO   63E
....................  { 
....................   if (s == 1 && n == 0) 
0601:  BSF    03.5
0602:  BTFSS  37.0
0603:  GOTO   620
0604:  MOVF   2C,F
0605:  BTFSS  03.2
0606:  GOTO   620
....................    res -= 1.0; 
0607:  BSF    03.1
0608:  MOVF   34,W
0609:  MOVWF  3F
060A:  MOVF   33,W
060B:  MOVWF  3E
060C:  MOVF   32,W
060D:  MOVWF  3D
060E:  MOVF   31,W
060F:  MOVWF  3C
0610:  CLRF   43
0611:  CLRF   42
0612:  CLRF   41
0613:  MOVLW  7F
0614:  MOVWF  40
0615:  BCF    03.5
0616:  CALL   34F
0617:  MOVF   7A,W
0618:  BSF    03.5
0619:  MOVWF  34
061A:  MOVF   79,W
061B:  MOVWF  33
061C:  MOVF   78,W
061D:  MOVWF  32
061E:  MOVF   77,W
061F:  MOVWF  31
....................  
....................   if (s == 0 && n == 1) 
0620:  BTFSC  37.0
0621:  GOTO   63D
0622:  DECFSZ 2C,W
0623:  GOTO   63D
....................    res += 1.0; 
0624:  BCF    03.1
0625:  MOVF   34,W
0626:  MOVWF  3F
0627:  MOVF   33,W
0628:  MOVWF  3E
0629:  MOVF   32,W
062A:  MOVWF  3D
062B:  MOVF   31,W
062C:  MOVWF  3C
062D:  CLRF   43
062E:  CLRF   42
062F:  CLRF   41
0630:  MOVLW  7F
0631:  MOVWF  40
0632:  BCF    03.5
0633:  CALL   34F
0634:  MOVF   7A,W
0635:  BSF    03.5
0636:  MOVWF  34
0637:  MOVF   79,W
0638:  MOVWF  33
0639:  MOVF   78,W
063A:  MOVWF  32
063B:  MOVF   77,W
063C:  MOVWF  31
063D:  BCF    03.5
....................  } 
....................  if (x == 0) 
063E:  BSF    03.5
063F:  MOVF   2B,W
0640:  MOVWF  3B
0641:  MOVF   2A,W
0642:  MOVWF  3A
0643:  MOVF   29,W
0644:  MOVWF  39
0645:  MOVF   28,W
0646:  MOVWF  38
0647:  CLRF   3F
0648:  CLRF   3E
0649:  CLRF   3D
064A:  CLRF   3C
064B:  BCF    03.5
064C:  CALL   1AA
064D:  BTFSS  03.2
064E:  GOTO   655
....................     res = 0; 
064F:  BSF    03.5
0650:  CLRF   34
0651:  CLRF   33
0652:  CLRF   32
0653:  CLRF   31
0654:  BCF    03.5
....................  
....................  return (res); 
0655:  BSF    03.5
0656:  MOVF   31,W
0657:  MOVWF  77
0658:  MOVF   32,W
0659:  MOVWF  78
065A:  MOVF   33,W
065B:  MOVWF  79
065C:  MOVF   34,W
065D:  MOVWF  7A
.................... } 
065E:  BCF    03.5
065F:  RETURN
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
0704:  MOVF   27,W
0705:  MOVWF  2B
0706:  MOVF   26,W
0707:  MOVWF  2A
0708:  MOVF   25,W
0709:  MOVWF  29
070A:  MOVF   24,W
070B:  MOVWF  28
070C:  CLRF   2C
070D:  BCF    03.5
070E:  CALL   495
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
06CD:  MOVF   27,W
06CE:  MOVWF  2B
06CF:  MOVF   26,W
06D0:  MOVWF  2A
06D1:  MOVF   25,W
06D2:  MOVWF  29
06D3:  MOVF   24,W
06D4:  MOVWF  28
06D5:  MOVLW  01
06D6:  MOVWF  2C
06D7:  BCF    03.5
06D8:  CALL   495
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
0660:  MOVF   74,W
0661:  BSF    03.5
0662:  MOVWF  3B
0663:  MOVF   73,W
0664:  MOVWF  3A
0665:  MOVF   72,W
0666:  MOVWF  39
0667:  MOVF   71,W
0668:  MOVWF  38
0669:  CLRF   3F
066A:  CLRF   3E
066B:  CLRF   3D
066C:  CLRF   3C
066D:  BCF    03.5
066E:  CALL   1AA
066F:  BTFSC  03.2
0670:  GOTO   745
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
0671:  MOVF   70,W
0672:  BSF    03.5
0673:  MOVWF  34
0674:  BCF    03.5
0675:  MOVF   6F,W
0676:  BSF    03.5
0677:  MOVWF  33
0678:  BCF    03.5
0679:  MOVF   6E,W
067A:  BSF    03.5
067B:  MOVWF  32
067C:  BCF    03.5
067D:  MOVF   6D,W
067E:  BSF    03.5
067F:  MOVWF  31
0680:  MOVF   74,W
0681:  MOVWF  38
0682:  MOVF   73,W
0683:  MOVWF  37
0684:  MOVF   72,W
0685:  MOVWF  36
0686:  MOVF   71,W
0687:  MOVWF  35
0688:  BCF    03.5
0689:  CALL   1EB
068A:  MOVF   7A,W
068B:  BSF    03.5
068C:  MOVWF  23
068D:  MOVF   79,W
068E:  MOVWF  22
068F:  MOVF   78,W
0690:  MOVWF  21
0691:  MOVF   77,W
0692:  MOVWF  20
0693:  MOVF   23,W
0694:  MOVWF  3B
0695:  MOVF   22,W
0696:  MOVWF  3A
0697:  MOVF   21,W
0698:  MOVWF  39
0699:  MOVF   20,W
069A:  MOVWF  38
069B:  CLRF   3F
069C:  CLRF   3E
069D:  CLRF   3D
069E:  CLRF   3C
069F:  BCF    03.5
06A0:  CALL   1AA
06A1:  BTFSS  03.0
06A2:  GOTO   6DA
06A3:  MOVF   70,W
06A4:  BSF    03.5
06A5:  MOVWF  34
06A6:  BCF    03.5
06A7:  MOVF   6F,W
06A8:  BSF    03.5
06A9:  MOVWF  33
06AA:  BCF    03.5
06AB:  MOVF   6E,W
06AC:  BSF    03.5
06AD:  MOVWF  32
06AE:  BCF    03.5
06AF:  MOVF   6D,W
06B0:  BSF    03.5
06B1:  MOVWF  31
06B2:  MOVF   74,W
06B3:  MOVWF  38
06B4:  MOVF   73,W
06B5:  MOVWF  37
06B6:  MOVF   72,W
06B7:  MOVWF  36
06B8:  MOVF   71,W
06B9:  MOVWF  35
06BA:  BCF    03.5
06BB:  CALL   1EB
06BC:  MOVF   7A,W
06BD:  BSF    03.5
06BE:  MOVWF  23
06BF:  MOVF   79,W
06C0:  MOVWF  22
06C1:  MOVF   78,W
06C2:  MOVWF  21
06C3:  MOVF   77,W
06C4:  MOVWF  20
06C5:  MOVF   23,W
06C6:  MOVWF  27
06C7:  MOVF   22,W
06C8:  MOVWF  26
06C9:  MOVF   21,W
06CA:  MOVWF  25
06CB:  MOVF   20,W
06CC:  MOVWF  24
06D9:  GOTO   70F
06DA:  MOVF   70,W
06DB:  BSF    03.5
06DC:  MOVWF  34
06DD:  BCF    03.5
06DE:  MOVF   6F,W
06DF:  BSF    03.5
06E0:  MOVWF  33
06E1:  BCF    03.5
06E2:  MOVF   6E,W
06E3:  BSF    03.5
06E4:  MOVWF  32
06E5:  BCF    03.5
06E6:  MOVF   6D,W
06E7:  BSF    03.5
06E8:  MOVWF  31
06E9:  MOVF   74,W
06EA:  MOVWF  38
06EB:  MOVF   73,W
06EC:  MOVWF  37
06ED:  MOVF   72,W
06EE:  MOVWF  36
06EF:  MOVF   71,W
06F0:  MOVWF  35
06F1:  BCF    03.5
06F2:  CALL   1EB
06F3:  MOVF   7A,W
06F4:  BSF    03.5
06F5:  MOVWF  23
06F6:  MOVF   79,W
06F7:  MOVWF  22
06F8:  MOVF   78,W
06F9:  MOVWF  21
06FA:  MOVF   77,W
06FB:  MOVWF  20
06FC:  MOVF   23,W
06FD:  MOVWF  27
06FE:  MOVF   22,W
06FF:  MOVWF  26
0700:  MOVF   21,W
0701:  MOVWF  25
0702:  MOVF   20,W
0703:  MOVWF  24
070F:  MOVF   7A,W
0710:  MOVWF  7E
0711:  MOVF   79,W
0712:  MOVWF  7D
0713:  MOVF   78,W
0714:  MOVWF  7C
0715:  MOVF   77,W
0716:  MOVWF  7B
....................       return(x-(i*y)); 
0717:  MOVF   7E,W
0718:  BSF    03.5
0719:  MOVWF  3B
071A:  MOVF   7D,W
071B:  MOVWF  3A
071C:  MOVF   7C,W
071D:  MOVWF  39
071E:  MOVF   7B,W
071F:  MOVWF  38
0720:  MOVF   74,W
0721:  MOVWF  3F
0722:  MOVF   73,W
0723:  MOVWF  3E
0724:  MOVF   72,W
0725:  MOVWF  3D
0726:  MOVF   71,W
0727:  MOVWF  3C
0728:  BCF    03.5
0729:  CALL   2D8
072A:  BSF    03.1
072B:  MOVF   70,W
072C:  BSF    03.5
072D:  MOVWF  3F
072E:  BCF    03.5
072F:  MOVF   6F,W
0730:  BSF    03.5
0731:  MOVWF  3E
0732:  BCF    03.5
0733:  MOVF   6E,W
0734:  BSF    03.5
0735:  MOVWF  3D
0736:  BCF    03.5
0737:  MOVF   6D,W
0738:  BSF    03.5
0739:  MOVWF  3C
073A:  MOVF   7A,W
073B:  MOVWF  43
073C:  MOVF   79,W
073D:  MOVWF  42
073E:  MOVF   78,W
073F:  MOVWF  41
0740:  MOVF   77,W
0741:  MOVWF  40
0742:  BCF    03.5
0743:  CALL   34F
0744:  GOTO   745
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
0745:  RETURN
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
09EC:  MOVF   74,W
09ED:  BSF    03.5
09EE:  MOVWF  3B
09EF:  MOVF   73,W
09F0:  MOVWF  3A
09F1:  MOVF   72,W
09F2:  MOVWF  39
09F3:  MOVF   71,W
09F4:  MOVWF  38
09F5:  MOVLW  3B
09F6:  MOVWF  3F
09F7:  MOVLW  AA
09F8:  MOVWF  3E
09F9:  MOVLW  38
09FA:  MOVWF  3D
09FB:  MOVLW  7F
09FC:  MOVWF  3C
09FD:  BCF    0A.3
09FE:  BCF    03.5
09FF:  CALL   2D8
0A00:  BSF    0A.3
0A01:  MOVF   7A,W
0A02:  BSF    03.5
0A03:  MOVWF  3B
0A04:  MOVF   79,W
0A05:  MOVWF  3A
0A06:  MOVF   78,W
0A07:  MOVWF  39
0A08:  MOVF   77,W
0A09:  MOVWF  38
0A0A:  BCF    0A.3
0A0B:  BCF    03.5
0A0C:  CALL   2B7
0A0D:  BSF    0A.3
0A0E:  MOVF   78,W
0A0F:  MOVWF  75
....................    s = 0; 
0A10:  BCF    76.0
....................    y = x; 
0A11:  MOVF   74,W
0A12:  MOVWF  7E
0A13:  MOVF   73,W
0A14:  MOVWF  7D
0A15:  MOVF   72,W
0A16:  MOVWF  7C
0A17:  MOVF   71,W
0A18:  MOVWF  7B
....................  
....................    if (x < 0) 
0A19:  MOVF   74,W
0A1A:  BSF    03.5
0A1B:  MOVWF  3B
0A1C:  MOVF   73,W
0A1D:  MOVWF  3A
0A1E:  MOVF   72,W
0A1F:  MOVWF  39
0A20:  MOVF   71,W
0A21:  MOVWF  38
0A22:  CLRF   3F
0A23:  CLRF   3E
0A24:  CLRF   3D
0A25:  CLRF   3C
0A26:  BCF    0A.3
0A27:  BCF    03.5
0A28:  CALL   1AA
0A29:  BSF    0A.3
0A2A:  BTFSS  03.0
0A2B:  GOTO   232
....................    { 
....................       s = 1; 
0A2C:  BSF    76.0
....................       n = -n; 
0A2D:  COMF   75,F
0A2E:  INCF   75,F
....................       y = -y; 
0A2F:  MOVF   7C,W
0A30:  XORLW  80
0A31:  MOVWF  7C
....................    } 
....................  
....................    res = 0.0; 
0A32:  BSF    03.5
0A33:  CLRF   23
0A34:  CLRF   22
0A35:  CLRF   21
0A36:  CLRF   20
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
0A37:  CLRF   29
0A38:  MOVLW  A0
0A39:  MOVWF  28
0A3A:  MOVF   28,W
0A3B:  MOVWF  04
0A3C:  BCF    03.7
0A3D:  BTFSC  29.0
0A3E:  BSF    03.7
0A3F:  MOVLW  7F
0A40:  ADDWF  75,W
0A41:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
0A42:  MOVF   7E,W
0A43:  MOVWF  3B
0A44:  MOVF   7D,W
0A45:  MOVWF  3A
0A46:  MOVF   7C,W
0A47:  MOVWF  39
0A48:  MOVF   7B,W
0A49:  MOVWF  38
0A4A:  MOVLW  3B
0A4B:  MOVWF  3F
0A4C:  MOVLW  AA
0A4D:  MOVWF  3E
0A4E:  MOVLW  38
0A4F:  MOVWF  3D
0A50:  MOVLW  7F
0A51:  MOVWF  3C
0A52:  BCF    0A.3
0A53:  BCF    03.5
0A54:  CALL   2D8
0A55:  BSF    0A.3
0A56:  MOVF   7A,W
0A57:  BSF    03.5
0A58:  MOVWF  2B
0A59:  MOVF   79,W
0A5A:  MOVWF  2A
0A5B:  MOVF   78,W
0A5C:  MOVWF  29
0A5D:  MOVF   77,W
0A5E:  MOVWF  28
0A5F:  CLRF   2F
0A60:  MOVF   75,W
0A61:  MOVWF  2E
0A62:  BTFSC  2E.7
0A63:  DECF   2F,F
0A64:  BCF    0A.3
0A65:  BCF    03.5
0A66:  CALL   746
0A67:  BSF    0A.3
0A68:  BSF    03.1
0A69:  BSF    03.5
0A6A:  MOVF   2B,W
0A6B:  MOVWF  3F
0A6C:  MOVF   2A,W
0A6D:  MOVWF  3E
0A6E:  MOVF   29,W
0A6F:  MOVWF  3D
0A70:  MOVF   28,W
0A71:  MOVWF  3C
0A72:  MOVF   7A,W
0A73:  MOVWF  43
0A74:  MOVF   79,W
0A75:  MOVWF  42
0A76:  MOVF   78,W
0A77:  MOVWF  41
0A78:  MOVF   77,W
0A79:  MOVWF  40
0A7A:  BCF    0A.3
0A7B:  BCF    03.5
0A7C:  CALL   34F
0A7D:  BSF    0A.3
0A7E:  MOVF   7A,W
0A7F:  MOVWF  7E
0A80:  MOVF   79,W
0A81:  MOVWF  7D
0A82:  MOVF   78,W
0A83:  MOVWF  7C
0A84:  MOVF   77,W
0A85:  MOVWF  7B
....................  
....................    r = pe[0]*y + pe[1]; 
0A86:  MOVLW  7C
0A87:  BSF    03.5
0A88:  MOVWF  3B
0A89:  MOVLW  88
0A8A:  MOVWF  3A
0A8B:  MOVLW  59
0A8C:  MOVWF  39
0A8D:  MOVLW  72
0A8E:  MOVWF  38
0A8F:  MOVF   7E,W
0A90:  MOVWF  3F
0A91:  MOVF   7D,W
0A92:  MOVWF  3E
0A93:  MOVF   7C,W
0A94:  MOVWF  3D
0A95:  MOVF   7B,W
0A96:  MOVWF  3C
0A97:  BCF    0A.3
0A98:  BCF    03.5
0A99:  CALL   2D8
0A9A:  BSF    0A.3
0A9B:  MOVF   7A,W
0A9C:  BSF    03.5
0A9D:  MOVWF  2B
0A9E:  MOVF   79,W
0A9F:  MOVWF  2A
0AA0:  MOVF   78,W
0AA1:  MOVWF  29
0AA2:  MOVF   77,W
0AA3:  MOVWF  28
0AA4:  BCF    03.1
0AA5:  MOVF   2B,W
0AA6:  MOVWF  3F
0AA7:  MOVF   2A,W
0AA8:  MOVWF  3E
0AA9:  MOVF   29,W
0AAA:  MOVWF  3D
0AAB:  MOVF   28,W
0AAC:  MOVWF  3C
0AAD:  MOVLW  E0
0AAE:  MOVWF  43
0AAF:  MOVLW  97
0AB0:  MOVWF  42
0AB1:  MOVLW  26
0AB2:  MOVWF  41
0AB3:  MOVLW  75
0AB4:  MOVWF  40
0AB5:  BCF    0A.3
0AB6:  BCF    03.5
0AB7:  CALL   34F
0AB8:  BSF    0A.3
0AB9:  MOVF   7A,W
0ABA:  BSF    03.5
0ABB:  MOVWF  27
0ABC:  MOVF   79,W
0ABD:  MOVWF  26
0ABE:  MOVF   78,W
0ABF:  MOVWF  25
0AC0:  MOVF   77,W
0AC1:  MOVWF  24
....................    r = r*y + pe[2]; 
0AC2:  MOVF   27,W
0AC3:  MOVWF  3B
0AC4:  MOVF   26,W
0AC5:  MOVWF  3A
0AC6:  MOVF   25,W
0AC7:  MOVWF  39
0AC8:  MOVF   24,W
0AC9:  MOVWF  38
0ACA:  MOVF   7E,W
0ACB:  MOVWF  3F
0ACC:  MOVF   7D,W
0ACD:  MOVWF  3E
0ACE:  MOVF   7C,W
0ACF:  MOVWF  3D
0AD0:  MOVF   7B,W
0AD1:  MOVWF  3C
0AD2:  BCF    0A.3
0AD3:  BCF    03.5
0AD4:  CALL   2D8
0AD5:  BSF    0A.3
0AD6:  MOVF   7A,W
0AD7:  BSF    03.5
0AD8:  MOVWF  2B
0AD9:  MOVF   79,W
0ADA:  MOVWF  2A
0ADB:  MOVF   78,W
0ADC:  MOVWF  29
0ADD:  MOVF   77,W
0ADE:  MOVWF  28
0ADF:  BCF    03.1
0AE0:  MOVF   2B,W
0AE1:  MOVWF  3F
0AE2:  MOVF   2A,W
0AE3:  MOVWF  3E
0AE4:  MOVF   29,W
0AE5:  MOVWF  3D
0AE6:  MOVF   28,W
0AE7:  MOVWF  3C
0AE8:  MOVLW  C4
0AE9:  MOVWF  43
0AEA:  MOVLW  1D
0AEB:  MOVWF  42
0AEC:  MOVLW  1E
0AED:  MOVWF  41
0AEE:  MOVLW  78
0AEF:  MOVWF  40
0AF0:  BCF    0A.3
0AF1:  BCF    03.5
0AF2:  CALL   34F
0AF3:  BSF    0A.3
0AF4:  MOVF   7A,W
0AF5:  BSF    03.5
0AF6:  MOVWF  27
0AF7:  MOVF   79,W
0AF8:  MOVWF  26
0AF9:  MOVF   78,W
0AFA:  MOVWF  25
0AFB:  MOVF   77,W
0AFC:  MOVWF  24
....................    r = r*y + pe[3]; 
0AFD:  MOVF   27,W
0AFE:  MOVWF  3B
0AFF:  MOVF   26,W
0B00:  MOVWF  3A
0B01:  MOVF   25,W
0B02:  MOVWF  39
0B03:  MOVF   24,W
0B04:  MOVWF  38
0B05:  MOVF   7E,W
0B06:  MOVWF  3F
0B07:  MOVF   7D,W
0B08:  MOVWF  3E
0B09:  MOVF   7C,W
0B0A:  MOVWF  3D
0B0B:  MOVF   7B,W
0B0C:  MOVWF  3C
0B0D:  BCF    0A.3
0B0E:  BCF    03.5
0B0F:  CALL   2D8
0B10:  BSF    0A.3
0B11:  MOVF   7A,W
0B12:  BSF    03.5
0B13:  MOVWF  2B
0B14:  MOVF   79,W
0B15:  MOVWF  2A
0B16:  MOVF   78,W
0B17:  MOVWF  29
0B18:  MOVF   77,W
0B19:  MOVWF  28
0B1A:  BCF    03.1
0B1B:  MOVF   2B,W
0B1C:  MOVWF  3F
0B1D:  MOVF   2A,W
0B1E:  MOVWF  3E
0B1F:  MOVF   29,W
0B20:  MOVWF  3D
0B21:  MOVF   28,W
0B22:  MOVWF  3C
0B23:  MOVLW  5E
0B24:  MOVWF  43
0B25:  MOVLW  50
0B26:  MOVWF  42
0B27:  MOVLW  63
0B28:  MOVWF  41
0B29:  MOVLW  7A
0B2A:  MOVWF  40
0B2B:  BCF    0A.3
0B2C:  BCF    03.5
0B2D:  CALL   34F
0B2E:  BSF    0A.3
0B2F:  MOVF   7A,W
0B30:  BSF    03.5
0B31:  MOVWF  27
0B32:  MOVF   79,W
0B33:  MOVWF  26
0B34:  MOVF   78,W
0B35:  MOVWF  25
0B36:  MOVF   77,W
0B37:  MOVWF  24
....................    r = r*y + pe[4]; 
0B38:  MOVF   27,W
0B39:  MOVWF  3B
0B3A:  MOVF   26,W
0B3B:  MOVWF  3A
0B3C:  MOVF   25,W
0B3D:  MOVWF  39
0B3E:  MOVF   24,W
0B3F:  MOVWF  38
0B40:  MOVF   7E,W
0B41:  MOVWF  3F
0B42:  MOVF   7D,W
0B43:  MOVWF  3E
0B44:  MOVF   7C,W
0B45:  MOVWF  3D
0B46:  MOVF   7B,W
0B47:  MOVWF  3C
0B48:  BCF    0A.3
0B49:  BCF    03.5
0B4A:  CALL   2D8
0B4B:  BSF    0A.3
0B4C:  MOVF   7A,W
0B4D:  BSF    03.5
0B4E:  MOVWF  2B
0B4F:  MOVF   79,W
0B50:  MOVWF  2A
0B51:  MOVF   78,W
0B52:  MOVWF  29
0B53:  MOVF   77,W
0B54:  MOVWF  28
0B55:  BCF    03.1
0B56:  MOVF   2B,W
0B57:  MOVWF  3F
0B58:  MOVF   2A,W
0B59:  MOVWF  3E
0B5A:  MOVF   29,W
0B5B:  MOVWF  3D
0B5C:  MOVF   28,W
0B5D:  MOVWF  3C
0B5E:  MOVLW  1A
0B5F:  MOVWF  43
0B60:  MOVLW  FE
0B61:  MOVWF  42
0B62:  MOVLW  75
0B63:  MOVWF  41
0B64:  MOVLW  7C
0B65:  MOVWF  40
0B66:  BCF    0A.3
0B67:  BCF    03.5
0B68:  CALL   34F
0B69:  BSF    0A.3
0B6A:  MOVF   7A,W
0B6B:  BSF    03.5
0B6C:  MOVWF  27
0B6D:  MOVF   79,W
0B6E:  MOVWF  26
0B6F:  MOVF   78,W
0B70:  MOVWF  25
0B71:  MOVF   77,W
0B72:  MOVWF  24
....................    r = r*y + pe[5]; 
0B73:  MOVF   27,W
0B74:  MOVWF  3B
0B75:  MOVF   26,W
0B76:  MOVWF  3A
0B77:  MOVF   25,W
0B78:  MOVWF  39
0B79:  MOVF   24,W
0B7A:  MOVWF  38
0B7B:  MOVF   7E,W
0B7C:  MOVWF  3F
0B7D:  MOVF   7D,W
0B7E:  MOVWF  3E
0B7F:  MOVF   7C,W
0B80:  MOVWF  3D
0B81:  MOVF   7B,W
0B82:  MOVWF  3C
0B83:  BCF    0A.3
0B84:  BCF    03.5
0B85:  CALL   2D8
0B86:  BSF    0A.3
0B87:  MOVF   7A,W
0B88:  BSF    03.5
0B89:  MOVWF  2B
0B8A:  MOVF   79,W
0B8B:  MOVWF  2A
0B8C:  MOVF   78,W
0B8D:  MOVWF  29
0B8E:  MOVF   77,W
0B8F:  MOVWF  28
0B90:  BCF    03.1
0B91:  MOVF   2B,W
0B92:  MOVWF  3F
0B93:  MOVF   2A,W
0B94:  MOVWF  3E
0B95:  MOVF   29,W
0B96:  MOVWF  3D
0B97:  MOVF   28,W
0B98:  MOVWF  3C
0B99:  MOVLW  18
0B9A:  MOVWF  43
0B9B:  MOVLW  72
0B9C:  MOVWF  42
0B9D:  MOVLW  31
0B9E:  MOVWF  41
0B9F:  MOVLW  7E
0BA0:  MOVWF  40
0BA1:  BCF    0A.3
0BA2:  BCF    03.5
0BA3:  CALL   34F
0BA4:  BSF    0A.3
0BA5:  MOVF   7A,W
0BA6:  BSF    03.5
0BA7:  MOVWF  27
0BA8:  MOVF   79,W
0BA9:  MOVWF  26
0BAA:  MOVF   78,W
0BAB:  MOVWF  25
0BAC:  MOVF   77,W
0BAD:  MOVWF  24
....................  
....................    res = res*(1.0 + y*r); 
0BAE:  MOVF   7E,W
0BAF:  MOVWF  3B
0BB0:  MOVF   7D,W
0BB1:  MOVWF  3A
0BB2:  MOVF   7C,W
0BB3:  MOVWF  39
0BB4:  MOVF   7B,W
0BB5:  MOVWF  38
0BB6:  MOVF   27,W
0BB7:  MOVWF  3F
0BB8:  MOVF   26,W
0BB9:  MOVWF  3E
0BBA:  MOVF   25,W
0BBB:  MOVWF  3D
0BBC:  MOVF   24,W
0BBD:  MOVWF  3C
0BBE:  BCF    0A.3
0BBF:  BCF    03.5
0BC0:  CALL   2D8
0BC1:  BSF    0A.3
0BC2:  BCF    03.1
0BC3:  BSF    03.5
0BC4:  CLRF   3F
0BC5:  CLRF   3E
0BC6:  CLRF   3D
0BC7:  MOVLW  7F
0BC8:  MOVWF  3C
0BC9:  MOVF   7A,W
0BCA:  MOVWF  43
0BCB:  MOVF   79,W
0BCC:  MOVWF  42
0BCD:  MOVF   78,W
0BCE:  MOVWF  41
0BCF:  MOVF   77,W
0BD0:  MOVWF  40
0BD1:  BCF    0A.3
0BD2:  BCF    03.5
0BD3:  CALL   34F
0BD4:  BSF    0A.3
0BD5:  BSF    03.5
0BD6:  MOVF   23,W
0BD7:  MOVWF  3B
0BD8:  MOVF   22,W
0BD9:  MOVWF  3A
0BDA:  MOVF   21,W
0BDB:  MOVWF  39
0BDC:  MOVF   20,W
0BDD:  MOVWF  38
0BDE:  MOVF   7A,W
0BDF:  MOVWF  3F
0BE0:  MOVF   79,W
0BE1:  MOVWF  3E
0BE2:  MOVF   78,W
0BE3:  MOVWF  3D
0BE4:  MOVF   77,W
0BE5:  MOVWF  3C
0BE6:  BCF    0A.3
0BE7:  BCF    03.5
0BE8:  CALL   2D8
0BE9:  BSF    0A.3
0BEA:  MOVF   7A,W
0BEB:  BSF    03.5
0BEC:  MOVWF  23
0BED:  MOVF   79,W
0BEE:  MOVWF  22
0BEF:  MOVF   78,W
0BF0:  MOVWF  21
0BF1:  MOVF   77,W
0BF2:  MOVWF  20
....................  
....................    if (s) 
0BF3:  BTFSS  76.0
0BF4:  GOTO   40F
....................       res = 1.0/res; 
0BF5:  CLRF   34
0BF6:  CLRF   33
0BF7:  CLRF   32
0BF8:  MOVLW  7F
0BF9:  MOVWF  31
0BFA:  MOVF   23,W
0BFB:  MOVWF  38
0BFC:  MOVF   22,W
0BFD:  MOVWF  37
0BFE:  MOVF   21,W
0BFF:  MOVWF  36
0C00:  MOVF   20,W
0C01:  MOVWF  35
0C02:  BCF    0A.3
0C03:  BCF    03.5
0C04:  CALL   1EB
0C05:  BSF    0A.3
0C06:  MOVF   7A,W
0C07:  BSF    03.5
0C08:  MOVWF  23
0C09:  MOVF   79,W
0C0A:  MOVWF  22
0C0B:  MOVF   78,W
0C0C:  MOVWF  21
0C0D:  MOVF   77,W
0C0E:  MOVWF  20
....................    return(res); 
0C0F:  MOVF   20,W
0C10:  MOVWF  77
0C11:  MOVF   21,W
0C12:  MOVWF  78
0C13:  MOVF   22,W
0C14:  MOVWF  79
0C15:  MOVF   23,W
0C16:  MOVWF  7A
.................... } 
0C17:  BCF    03.5
0C18:  RETURN
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
0800:  MOVF   74,W
0801:  MOVWF  7E
0802:  MOVF   73,W
0803:  MOVWF  7D
0804:  MOVF   72,W
0805:  MOVWF  7C
0806:  MOVF   71,W
0807:  MOVWF  7B
....................  
....................    if (y != 1.0) 
0808:  MOVF   7E,W
0809:  BSF    03.5
080A:  MOVWF  3B
080B:  MOVF   7D,W
080C:  MOVWF  3A
080D:  MOVF   7C,W
080E:  MOVWF  39
080F:  MOVF   7B,W
0810:  MOVWF  38
0811:  CLRF   3F
0812:  CLRF   3E
0813:  CLRF   3D
0814:  MOVLW  7F
0815:  MOVWF  3C
0816:  BCF    0A.3
0817:  BCF    03.5
0818:  CALL   1AA
0819:  BSF    0A.3
081A:  BTFSC  03.2
081B:  GOTO   1DD
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
081C:  BSF    03.5
081D:  CLRF   2D
081E:  MOVLW  7B
081F:  MOVWF  2C
0820:  MOVF   2C,W
0821:  MOVWF  04
0822:  BCF    03.7
0823:  BTFSC  2D.0
0824:  BSF    03.7
0825:  MOVLW  7E
0826:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
0827:  BSF    03.1
0828:  MOVF   7E,W
0829:  MOVWF  3F
082A:  MOVF   7D,W
082B:  MOVWF  3E
082C:  MOVF   7C,W
082D:  MOVWF  3D
082E:  MOVF   7B,W
082F:  MOVWF  3C
0830:  CLRF   43
0831:  CLRF   42
0832:  CLRF   41
0833:  MOVLW  7F
0834:  MOVWF  40
0835:  BCF    0A.3
0836:  BCF    03.5
0837:  CALL   34F
0838:  BSF    0A.3
0839:  MOVF   7A,W
083A:  BSF    03.5
083B:  MOVWF  2F
083C:  MOVF   79,W
083D:  MOVWF  2E
083E:  MOVF   78,W
083F:  MOVWF  2D
0840:  MOVF   77,W
0841:  MOVWF  2C
0842:  BCF    03.1
0843:  MOVF   7E,W
0844:  MOVWF  3F
0845:  MOVF   7D,W
0846:  MOVWF  3E
0847:  MOVF   7C,W
0848:  MOVWF  3D
0849:  MOVF   7B,W
084A:  MOVWF  3C
084B:  CLRF   43
084C:  CLRF   42
084D:  CLRF   41
084E:  MOVLW  7F
084F:  MOVWF  40
0850:  BCF    0A.3
0851:  BCF    03.5
0852:  CALL   34F
0853:  BSF    0A.3
0854:  BSF    03.5
0855:  MOVF   2F,W
0856:  MOVWF  34
0857:  MOVF   2E,W
0858:  MOVWF  33
0859:  MOVF   2D,W
085A:  MOVWF  32
085B:  MOVF   2C,W
085C:  MOVWF  31
085D:  MOVF   7A,W
085E:  MOVWF  38
085F:  MOVF   79,W
0860:  MOVWF  37
0861:  MOVF   78,W
0862:  MOVWF  36
0863:  MOVF   77,W
0864:  MOVWF  35
0865:  BCF    0A.3
0866:  BCF    03.5
0867:  CALL   1EB
0868:  BSF    0A.3
0869:  MOVF   7A,W
086A:  MOVWF  7E
086B:  MOVF   79,W
086C:  MOVWF  7D
086D:  MOVF   78,W
086E:  MOVWF  7C
086F:  MOVF   77,W
0870:  MOVWF  7B
....................  
....................       y2=y*y; 
0871:  MOVF   7E,W
0872:  BSF    03.5
0873:  MOVWF  3B
0874:  MOVF   7D,W
0875:  MOVWF  3A
0876:  MOVF   7C,W
0877:  MOVWF  39
0878:  MOVF   7B,W
0879:  MOVWF  38
087A:  MOVF   7E,W
087B:  MOVWF  3F
087C:  MOVF   7D,W
087D:  MOVWF  3E
087E:  MOVF   7C,W
087F:  MOVWF  3D
0880:  MOVF   7B,W
0881:  MOVWF  3C
0882:  BCF    0A.3
0883:  BCF    03.5
0884:  CALL   2D8
0885:  BSF    0A.3
0886:  MOVF   7A,W
0887:  BSF    03.5
0888:  MOVWF  2B
0889:  MOVF   79,W
088A:  MOVWF  2A
088B:  MOVF   78,W
088C:  MOVWF  29
088D:  MOVF   77,W
088E:  MOVWF  28
....................  
....................       res = pl[0]*y2 + pl[1]; 
088F:  MOVLW  99
0890:  MOVWF  3B
0891:  MOVLW  47
0892:  MOVWF  3A
0893:  MOVLW  8A
0894:  MOVWF  39
0895:  MOVLW  7F
0896:  MOVWF  38
0897:  MOVF   2B,W
0898:  MOVWF  3F
0899:  MOVF   2A,W
089A:  MOVWF  3E
089B:  MOVF   29,W
089C:  MOVWF  3D
089D:  MOVF   28,W
089E:  MOVWF  3C
089F:  BCF    0A.3
08A0:  BCF    03.5
08A1:  CALL   2D8
08A2:  BSF    0A.3
08A3:  MOVF   7A,W
08A4:  BSF    03.5
08A5:  MOVWF  2F
08A6:  MOVF   79,W
08A7:  MOVWF  2E
08A8:  MOVF   78,W
08A9:  MOVWF  2D
08AA:  MOVF   77,W
08AB:  MOVWF  2C
08AC:  BCF    03.1
08AD:  MOVF   2F,W
08AE:  MOVWF  3F
08AF:  MOVF   2E,W
08B0:  MOVWF  3E
08B1:  MOVF   2D,W
08B2:  MOVWF  3D
08B3:  MOVF   2C,W
08B4:  MOVWF  3C
08B5:  CLRF   43
08B6:  CLRF   42
08B7:  CLRF   41
08B8:  MOVLW  80
08B9:  MOVWF  40
08BA:  BCF    0A.3
08BB:  BCF    03.5
08BC:  CALL   34F
08BD:  BSF    0A.3
08BE:  MOVF   7A,W
08BF:  BSF    03.5
08C0:  MOVWF  23
08C1:  MOVF   79,W
08C2:  MOVWF  22
08C3:  MOVF   78,W
08C4:  MOVWF  21
08C5:  MOVF   77,W
08C6:  MOVWF  20
....................  
....................       r = ql[0]*y2 + ql[1]; 
08C7:  MOVLW  4C
08C8:  MOVWF  3B
08C9:  MOVLW  F3
08CA:  MOVWF  3A
08CB:  MOVLW  3A
08CC:  MOVWF  39
08CD:  MOVLW  7B
08CE:  MOVWF  38
08CF:  MOVF   2B,W
08D0:  MOVWF  3F
08D1:  MOVF   2A,W
08D2:  MOVWF  3E
08D3:  MOVF   29,W
08D4:  MOVWF  3D
08D5:  MOVF   28,W
08D6:  MOVWF  3C
08D7:  BCF    0A.3
08D8:  BCF    03.5
08D9:  CALL   2D8
08DA:  BSF    0A.3
08DB:  MOVF   7A,W
08DC:  BSF    03.5
08DD:  MOVWF  2F
08DE:  MOVF   79,W
08DF:  MOVWF  2E
08E0:  MOVF   78,W
08E1:  MOVWF  2D
08E2:  MOVF   77,W
08E3:  MOVWF  2C
08E4:  BCF    03.1
08E5:  MOVF   2F,W
08E6:  MOVWF  3F
08E7:  MOVF   2E,W
08E8:  MOVWF  3E
08E9:  MOVF   2D,W
08EA:  MOVWF  3D
08EB:  MOVF   2C,W
08EC:  MOVWF  3C
08ED:  MOVLW  2B
08EE:  MOVWF  43
08EF:  MOVLW  9D
08F0:  MOVWF  42
08F1:  MOVLW  DF
08F2:  MOVWF  41
08F3:  MOVLW  7E
08F4:  MOVWF  40
08F5:  BCF    0A.3
08F6:  BCF    03.5
08F7:  CALL   34F
08F8:  BSF    0A.3
08F9:  MOVF   7A,W
08FA:  BSF    03.5
08FB:  MOVWF  27
08FC:  MOVF   79,W
08FD:  MOVWF  26
08FE:  MOVF   78,W
08FF:  MOVWF  25
0900:  MOVF   77,W
0901:  MOVWF  24
....................       r = r*y2 + 1.0; 
0902:  MOVF   27,W
0903:  MOVWF  3B
0904:  MOVF   26,W
0905:  MOVWF  3A
0906:  MOVF   25,W
0907:  MOVWF  39
0908:  MOVF   24,W
0909:  MOVWF  38
090A:  MOVF   2B,W
090B:  MOVWF  3F
090C:  MOVF   2A,W
090D:  MOVWF  3E
090E:  MOVF   29,W
090F:  MOVWF  3D
0910:  MOVF   28,W
0911:  MOVWF  3C
0912:  BCF    0A.3
0913:  BCF    03.5
0914:  CALL   2D8
0915:  BSF    0A.3
0916:  MOVF   7A,W
0917:  BSF    03.5
0918:  MOVWF  2F
0919:  MOVF   79,W
091A:  MOVWF  2E
091B:  MOVF   78,W
091C:  MOVWF  2D
091D:  MOVF   77,W
091E:  MOVWF  2C
091F:  BCF    03.1
0920:  MOVF   2F,W
0921:  MOVWF  3F
0922:  MOVF   2E,W
0923:  MOVWF  3E
0924:  MOVF   2D,W
0925:  MOVWF  3D
0926:  MOVF   2C,W
0927:  MOVWF  3C
0928:  CLRF   43
0929:  CLRF   42
092A:  CLRF   41
092B:  MOVLW  7F
092C:  MOVWF  40
092D:  BCF    0A.3
092E:  BCF    03.5
092F:  CALL   34F
0930:  BSF    0A.3
0931:  MOVF   7A,W
0932:  BSF    03.5
0933:  MOVWF  27
0934:  MOVF   79,W
0935:  MOVWF  26
0936:  MOVF   78,W
0937:  MOVWF  25
0938:  MOVF   77,W
0939:  MOVWF  24
....................  
....................       res = y*res/r; 
093A:  MOVF   7E,W
093B:  MOVWF  3B
093C:  MOVF   7D,W
093D:  MOVWF  3A
093E:  MOVF   7C,W
093F:  MOVWF  39
0940:  MOVF   7B,W
0941:  MOVWF  38
0942:  MOVF   23,W
0943:  MOVWF  3F
0944:  MOVF   22,W
0945:  MOVWF  3E
0946:  MOVF   21,W
0947:  MOVWF  3D
0948:  MOVF   20,W
0949:  MOVWF  3C
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  CALL   2D8
094D:  BSF    0A.3
094E:  MOVF   7A,W
094F:  BSF    03.5
0950:  MOVWF  2F
0951:  MOVF   79,W
0952:  MOVWF  2E
0953:  MOVF   78,W
0954:  MOVWF  2D
0955:  MOVF   77,W
0956:  MOVWF  2C
0957:  MOVF   2F,W
0958:  MOVWF  34
0959:  MOVF   2E,W
095A:  MOVWF  33
095B:  MOVF   2D,W
095C:  MOVWF  32
095D:  MOVF   2C,W
095E:  MOVWF  31
095F:  MOVF   27,W
0960:  MOVWF  38
0961:  MOVF   26,W
0962:  MOVWF  37
0963:  MOVF   25,W
0964:  MOVWF  36
0965:  MOVF   24,W
0966:  MOVWF  35
0967:  BCF    0A.3
0968:  BCF    03.5
0969:  CALL   1EB
096A:  BSF    0A.3
096B:  MOVF   7A,W
096C:  BSF    03.5
096D:  MOVWF  23
096E:  MOVF   79,W
096F:  MOVWF  22
0970:  MOVF   78,W
0971:  MOVWF  21
0972:  MOVF   77,W
0973:  MOVWF  20
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
0974:  CLRF   2D
0975:  MOVLW  71
0976:  MOVWF  2C
0977:  MOVF   2C,W
0978:  MOVWF  04
0979:  BCF    03.7
097A:  BTFSC  2D.0
097B:  BSF    03.7
097C:  MOVLW  7E
097D:  SUBWF  00,W
097E:  MOVWF  75
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
097F:  BTFSS  75.7
0980:  GOTO   196
....................          r = -(float32)-n; 
0981:  MOVF   75,W
0982:  SUBLW  00
0983:  CLRF   2F
0984:  MOVWF  2E
0985:  BTFSC  2E.7
0986:  DECF   2F,F
0987:  BCF    0A.3
0988:  BCF    03.5
0989:  CALL   746
098A:  BSF    0A.3
098B:  MOVF   77,W
098C:  BSF    03.5
098D:  MOVWF  24
098E:  MOVF   78,W
098F:  XORLW  80
0990:  MOVWF  25
0991:  MOVF   79,W
0992:  MOVWF  26
0993:  MOVF   7A,W
0994:  MOVWF  27
....................       else 
0995:  GOTO   1A8
....................          r = (float32)n; 
0996:  CLRF   2F
0997:  MOVF   75,W
0998:  MOVWF  2E
0999:  BTFSC  2E.7
099A:  DECF   2F,F
099B:  BCF    0A.3
099C:  BCF    03.5
099D:  CALL   746
099E:  BSF    0A.3
099F:  MOVF   7A,W
09A0:  BSF    03.5
09A1:  MOVWF  27
09A2:  MOVF   79,W
09A3:  MOVWF  26
09A4:  MOVF   78,W
09A5:  MOVWF  25
09A6:  MOVF   77,W
09A7:  MOVWF  24
....................  
....................       res += r*LN2; 
09A8:  MOVF   27,W
09A9:  MOVWF  3B
09AA:  MOVF   26,W
09AB:  MOVWF  3A
09AC:  MOVF   25,W
09AD:  MOVWF  39
09AE:  MOVF   24,W
09AF:  MOVWF  38
09B0:  MOVLW  18
09B1:  MOVWF  3F
09B2:  MOVLW  72
09B3:  MOVWF  3E
09B4:  MOVLW  31
09B5:  MOVWF  3D
09B6:  MOVLW  7E
09B7:  MOVWF  3C
09B8:  BCF    0A.3
09B9:  BCF    03.5
09BA:  CALL   2D8
09BB:  BSF    0A.3
09BC:  BCF    03.1
09BD:  BSF    03.5
09BE:  MOVF   23,W
09BF:  MOVWF  3F
09C0:  MOVF   22,W
09C1:  MOVWF  3E
09C2:  MOVF   21,W
09C3:  MOVWF  3D
09C4:  MOVF   20,W
09C5:  MOVWF  3C
09C6:  MOVF   7A,W
09C7:  MOVWF  43
09C8:  MOVF   79,W
09C9:  MOVWF  42
09CA:  MOVF   78,W
09CB:  MOVWF  41
09CC:  MOVF   77,W
09CD:  MOVWF  40
09CE:  BCF    0A.3
09CF:  BCF    03.5
09D0:  CALL   34F
09D1:  BSF    0A.3
09D2:  MOVF   7A,W
09D3:  BSF    03.5
09D4:  MOVWF  23
09D5:  MOVF   79,W
09D6:  MOVWF  22
09D7:  MOVF   78,W
09D8:  MOVWF  21
09D9:  MOVF   77,W
09DA:  MOVWF  20
....................    } 
....................  
....................    else 
09DB:  GOTO   1E2
09DC:  BCF    03.5
....................       res = 0.0; 
09DD:  BSF    03.5
09DE:  CLRF   23
09DF:  CLRF   22
09E0:  CLRF   21
09E1:  CLRF   20
....................  
....................    return(res); 
09E2:  MOVF   20,W
09E3:  MOVWF  77
09E4:  MOVF   21,W
09E5:  MOVWF  78
09E6:  MOVF   22,W
09E7:  MOVWF  79
09E8:  MOVF   23,W
09E9:  MOVWF  7A
.................... } 
09EA:  BCF    03.5
09EB:  RETURN
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
0C19:  MOVF   68,W
0C1A:  BSF    03.5
0C1B:  MOVWF  3B
0C1C:  BCF    03.5
0C1D:  MOVF   67,W
0C1E:  BSF    03.5
0C1F:  MOVWF  3A
0C20:  BCF    03.5
0C21:  MOVF   66,W
0C22:  BSF    03.5
0C23:  MOVWF  39
0C24:  BCF    03.5
0C25:  MOVF   65,W
0C26:  BSF    03.5
0C27:  MOVWF  38
0C28:  CLRF   3F
0C29:  CLRF   3E
0C2A:  CLRF   3D
0C2B:  CLRF   3C
0C2C:  BCF    0A.3
0C2D:  BCF    03.5
0C2E:  CALL   1AA
0C2F:  BSF    0A.3
0C30:  BTFSS  03.0
0C31:  GOTO   534
0C32:  MOVF   6C,W
0C33:  MOVWF  70
0C34:  MOVF   6B,W
0C35:  MOVWF  6F
0C36:  MOVF   6A,W
0C37:  MOVWF  6E
0C38:  MOVF   69,W
0C39:  MOVWF  6D
0C3A:  CLRF   74
0C3B:  CLRF   73
0C3C:  CLRF   72
0C3D:  MOVLW  7F
0C3E:  MOVWF  71
0C3F:  BCF    0A.3
0C40:  CALL   660
0C41:  BSF    0A.3
0C42:  MOVF   7A,W
0C43:  MOVWF  70
0C44:  MOVF   79,W
0C45:  MOVWF  6F
0C46:  MOVF   78,W
0C47:  MOVWF  6E
0C48:  MOVF   77,W
0C49:  MOVWF  6D
0C4A:  MOVF   70,W
0C4B:  BSF    03.5
0C4C:  MOVWF  3B
0C4D:  BCF    03.5
0C4E:  MOVF   6F,W
0C4F:  BSF    03.5
0C50:  MOVWF  3A
0C51:  BCF    03.5
0C52:  MOVF   6E,W
0C53:  BSF    03.5
0C54:  MOVWF  39
0C55:  BCF    03.5
0C56:  MOVF   6D,W
0C57:  BSF    03.5
0C58:  MOVWF  38
0C59:  CLRF   3F
0C5A:  CLRF   3E
0C5B:  CLRF   3D
0C5C:  CLRF   3C
0C5D:  BCF    0A.3
0C5E:  BCF    03.5
0C5F:  CALL   1AA
0C60:  BSF    0A.3
0C61:  BTFSS  03.2
0C62:  GOTO   534
....................       if(fmod(y, 2) == 0) { 
0C63:  MOVF   6C,W
0C64:  MOVWF  70
0C65:  MOVF   6B,W
0C66:  MOVWF  6F
0C67:  MOVF   6A,W
0C68:  MOVWF  6E
0C69:  MOVF   69,W
0C6A:  MOVWF  6D
0C6B:  CLRF   74
0C6C:  CLRF   73
0C6D:  CLRF   72
0C6E:  MOVLW  80
0C6F:  MOVWF  71
0C70:  BCF    0A.3
0C71:  CALL   660
0C72:  BSF    0A.3
0C73:  MOVF   7A,W
0C74:  MOVWF  70
0C75:  MOVF   79,W
0C76:  MOVWF  6F
0C77:  MOVF   78,W
0C78:  MOVWF  6E
0C79:  MOVF   77,W
0C7A:  MOVWF  6D
0C7B:  MOVF   70,W
0C7C:  BSF    03.5
0C7D:  MOVWF  3B
0C7E:  BCF    03.5
0C7F:  MOVF   6F,W
0C80:  BSF    03.5
0C81:  MOVWF  3A
0C82:  BCF    03.5
0C83:  MOVF   6E,W
0C84:  BSF    03.5
0C85:  MOVWF  39
0C86:  BCF    03.5
0C87:  MOVF   6D,W
0C88:  BSF    03.5
0C89:  MOVWF  38
0C8A:  CLRF   3F
0C8B:  CLRF   3E
0C8C:  CLRF   3D
0C8D:  CLRF   3C
0C8E:  BCF    0A.3
0C8F:  BCF    03.5
0C90:  CALL   1AA
0C91:  BSF    0A.3
0C92:  BTFSS  03.2
0C93:  GOTO   4E3
....................          return (exp(log(-x) * y)); 
0C94:  MOVF   65,W
0C95:  MOVWF  6D
0C96:  MOVF   66,W
0C97:  XORLW  80
0C98:  MOVWF  6E
0C99:  MOVF   67,W
0C9A:  MOVWF  6F
0C9B:  MOVF   68,W
0C9C:  MOVWF  70
0C9D:  MOVWF  74
0C9E:  MOVF   6F,W
0C9F:  MOVWF  73
0CA0:  MOVF   6E,W
0CA1:  MOVWF  72
0CA2:  MOVF   6D,W
0CA3:  MOVWF  71
0CA4:  CALL   000
0CA5:  MOVF   7A,W
0CA6:  MOVWF  70
0CA7:  MOVF   79,W
0CA8:  MOVWF  6F
0CA9:  MOVF   78,W
0CAA:  MOVWF  6E
0CAB:  MOVF   77,W
0CAC:  MOVWF  6D
0CAD:  MOVF   70,W
0CAE:  BSF    03.5
0CAF:  MOVWF  3B
0CB0:  BCF    03.5
0CB1:  MOVF   6F,W
0CB2:  BSF    03.5
0CB3:  MOVWF  3A
0CB4:  BCF    03.5
0CB5:  MOVF   6E,W
0CB6:  BSF    03.5
0CB7:  MOVWF  39
0CB8:  BCF    03.5
0CB9:  MOVF   6D,W
0CBA:  BSF    03.5
0CBB:  MOVWF  38
0CBC:  BCF    03.5
0CBD:  MOVF   6C,W
0CBE:  BSF    03.5
0CBF:  MOVWF  3F
0CC0:  BCF    03.5
0CC1:  MOVF   6B,W
0CC2:  BSF    03.5
0CC3:  MOVWF  3E
0CC4:  BCF    03.5
0CC5:  MOVF   6A,W
0CC6:  BSF    03.5
0CC7:  MOVWF  3D
0CC8:  BCF    03.5
0CC9:  MOVF   69,W
0CCA:  BSF    03.5
0CCB:  MOVWF  3C
0CCC:  BCF    0A.3
0CCD:  BCF    03.5
0CCE:  CALL   2D8
0CCF:  BSF    0A.3
0CD0:  MOVF   7A,W
0CD1:  MOVWF  70
0CD2:  MOVF   79,W
0CD3:  MOVWF  6F
0CD4:  MOVF   78,W
0CD5:  MOVWF  6E
0CD6:  MOVF   77,W
0CD7:  MOVWF  6D
0CD8:  MOVF   70,W
0CD9:  MOVWF  74
0CDA:  MOVF   6F,W
0CDB:  MOVWF  73
0CDC:  MOVF   6E,W
0CDD:  MOVWF  72
0CDE:  MOVF   6D,W
0CDF:  MOVWF  71
0CE0:  CALL   1EC
0CE1:  GOTO   5FD
....................       } else { 
0CE2:  GOTO   533
....................          return (-exp(log(-x) * y)); 
0CE3:  MOVF   65,W
0CE4:  MOVWF  6D
0CE5:  MOVF   66,W
0CE6:  XORLW  80
0CE7:  MOVWF  6E
0CE8:  MOVF   67,W
0CE9:  MOVWF  6F
0CEA:  MOVF   68,W
0CEB:  MOVWF  70
0CEC:  MOVWF  74
0CED:  MOVF   6F,W
0CEE:  MOVWF  73
0CEF:  MOVF   6E,W
0CF0:  MOVWF  72
0CF1:  MOVF   6D,W
0CF2:  MOVWF  71
0CF3:  CALL   000
0CF4:  MOVF   7A,W
0CF5:  MOVWF  70
0CF6:  MOVF   79,W
0CF7:  MOVWF  6F
0CF8:  MOVF   78,W
0CF9:  MOVWF  6E
0CFA:  MOVF   77,W
0CFB:  MOVWF  6D
0CFC:  MOVF   70,W
0CFD:  BSF    03.5
0CFE:  MOVWF  3B
0CFF:  BCF    03.5
0D00:  MOVF   6F,W
0D01:  BSF    03.5
0D02:  MOVWF  3A
0D03:  BCF    03.5
0D04:  MOVF   6E,W
0D05:  BSF    03.5
0D06:  MOVWF  39
0D07:  BCF    03.5
0D08:  MOVF   6D,W
0D09:  BSF    03.5
0D0A:  MOVWF  38
0D0B:  BCF    03.5
0D0C:  MOVF   6C,W
0D0D:  BSF    03.5
0D0E:  MOVWF  3F
0D0F:  BCF    03.5
0D10:  MOVF   6B,W
0D11:  BSF    03.5
0D12:  MOVWF  3E
0D13:  BCF    03.5
0D14:  MOVF   6A,W
0D15:  BSF    03.5
0D16:  MOVWF  3D
0D17:  BCF    03.5
0D18:  MOVF   69,W
0D19:  BSF    03.5
0D1A:  MOVWF  3C
0D1B:  BCF    0A.3
0D1C:  BCF    03.5
0D1D:  CALL   2D8
0D1E:  BSF    0A.3
0D1F:  MOVF   7A,W
0D20:  MOVWF  70
0D21:  MOVF   79,W
0D22:  MOVWF  6F
0D23:  MOVF   78,W
0D24:  MOVWF  6E
0D25:  MOVF   77,W
0D26:  MOVWF  6D
0D27:  MOVF   70,W
0D28:  MOVWF  74
0D29:  MOVF   6F,W
0D2A:  MOVWF  73
0D2B:  MOVF   6E,W
0D2C:  MOVWF  72
0D2D:  MOVF   6D,W
0D2E:  MOVWF  71
0D2F:  CALL   1EC
0D30:  MOVLW  80
0D31:  XORWF  78,F
0D32:  GOTO   5FD
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
0D33:  GOTO   5FD
0D34:  MOVF   68,W
0D35:  BSF    03.5
0D36:  MOVWF  3B
0D37:  BCF    03.5
0D38:  MOVF   67,W
0D39:  BSF    03.5
0D3A:  MOVWF  3A
0D3B:  BCF    03.5
0D3C:  MOVF   66,W
0D3D:  BSF    03.5
0D3E:  MOVWF  39
0D3F:  BCF    03.5
0D40:  MOVF   65,W
0D41:  BSF    03.5
0D42:  MOVWF  38
0D43:  CLRF   3F
0D44:  CLRF   3E
0D45:  CLRF   3D
0D46:  CLRF   3C
0D47:  BCF    0A.3
0D48:  BCF    03.5
0D49:  CALL   1AA
0D4A:  BSF    0A.3
0D4B:  BTFSS  03.0
0D4C:  GOTO   584
0D4D:  MOVF   6C,W
0D4E:  MOVWF  70
0D4F:  MOVF   6B,W
0D50:  MOVWF  6F
0D51:  MOVF   6A,W
0D52:  MOVWF  6E
0D53:  MOVF   69,W
0D54:  MOVWF  6D
0D55:  CLRF   74
0D56:  CLRF   73
0D57:  CLRF   72
0D58:  MOVLW  7F
0D59:  MOVWF  71
0D5A:  BCF    0A.3
0D5B:  CALL   660
0D5C:  BSF    0A.3
0D5D:  MOVF   7A,W
0D5E:  MOVWF  70
0D5F:  MOVF   79,W
0D60:  MOVWF  6F
0D61:  MOVF   78,W
0D62:  MOVWF  6E
0D63:  MOVF   77,W
0D64:  MOVWF  6D
0D65:  MOVF   70,W
0D66:  BSF    03.5
0D67:  MOVWF  3B
0D68:  BCF    03.5
0D69:  MOVF   6F,W
0D6A:  BSF    03.5
0D6B:  MOVWF  3A
0D6C:  BCF    03.5
0D6D:  MOVF   6E,W
0D6E:  BSF    03.5
0D6F:  MOVWF  39
0D70:  BCF    03.5
0D71:  MOVF   6D,W
0D72:  BSF    03.5
0D73:  MOVWF  38
0D74:  CLRF   3F
0D75:  CLRF   3E
0D76:  CLRF   3D
0D77:  CLRF   3C
0D78:  BCF    0A.3
0D79:  BCF    03.5
0D7A:  CALL   1AA
0D7B:  BSF    0A.3
0D7C:  BTFSC  03.2
0D7D:  GOTO   584
....................       return 0; 
0D7E:  CLRF   77
0D7F:  CLRF   78
0D80:  CLRF   79
0D81:  CLRF   7A
0D82:  GOTO   5FD
....................    } else { 
0D83:  GOTO   5FD
....................       if(x != 0 || 0 >= y) { 
0D84:  MOVF   68,W
0D85:  BSF    03.5
0D86:  MOVWF  3B
0D87:  BCF    03.5
0D88:  MOVF   67,W
0D89:  BSF    03.5
0D8A:  MOVWF  3A
0D8B:  BCF    03.5
0D8C:  MOVF   66,W
0D8D:  BSF    03.5
0D8E:  MOVWF  39
0D8F:  BCF    03.5
0D90:  MOVF   65,W
0D91:  BSF    03.5
0D92:  MOVWF  38
0D93:  CLRF   3F
0D94:  CLRF   3E
0D95:  CLRF   3D
0D96:  CLRF   3C
0D97:  BCF    0A.3
0D98:  BCF    03.5
0D99:  CALL   1AA
0D9A:  BSF    0A.3
0D9B:  BTFSS  03.2
0D9C:  GOTO   5B8
0D9D:  MOVF   6C,W
0D9E:  BSF    03.5
0D9F:  MOVWF  3B
0DA0:  BCF    03.5
0DA1:  MOVF   6B,W
0DA2:  BSF    03.5
0DA3:  MOVWF  3A
0DA4:  BCF    03.5
0DA5:  MOVF   6A,W
0DA6:  BSF    03.5
0DA7:  MOVWF  39
0DA8:  BCF    03.5
0DA9:  MOVF   69,W
0DAA:  BSF    03.5
0DAB:  MOVWF  38
0DAC:  CLRF   3F
0DAD:  CLRF   3E
0DAE:  CLRF   3D
0DAF:  CLRF   3C
0DB0:  BCF    0A.3
0DB1:  BCF    03.5
0DB2:  CALL   1AA
0DB3:  BSF    0A.3
0DB4:  BTFSC  03.0
0DB5:  GOTO   5B8
0DB6:  BTFSS  03.2
0DB7:  GOTO   5FD
....................          return (exp(log(x) * y)); 
0DB8:  MOVF   68,W
0DB9:  MOVWF  74
0DBA:  MOVF   67,W
0DBB:  MOVWF  73
0DBC:  MOVF   66,W
0DBD:  MOVWF  72
0DBE:  MOVF   65,W
0DBF:  MOVWF  71
0DC0:  CALL   000
0DC1:  MOVF   7A,W
0DC2:  MOVWF  70
0DC3:  MOVF   79,W
0DC4:  MOVWF  6F
0DC5:  MOVF   78,W
0DC6:  MOVWF  6E
0DC7:  MOVF   77,W
0DC8:  MOVWF  6D
0DC9:  MOVF   70,W
0DCA:  BSF    03.5
0DCB:  MOVWF  3B
0DCC:  BCF    03.5
0DCD:  MOVF   6F,W
0DCE:  BSF    03.5
0DCF:  MOVWF  3A
0DD0:  BCF    03.5
0DD1:  MOVF   6E,W
0DD2:  BSF    03.5
0DD3:  MOVWF  39
0DD4:  BCF    03.5
0DD5:  MOVF   6D,W
0DD6:  BSF    03.5
0DD7:  MOVWF  38
0DD8:  BCF    03.5
0DD9:  MOVF   6C,W
0DDA:  BSF    03.5
0DDB:  MOVWF  3F
0DDC:  BCF    03.5
0DDD:  MOVF   6B,W
0DDE:  BSF    03.5
0DDF:  MOVWF  3E
0DE0:  BCF    03.5
0DE1:  MOVF   6A,W
0DE2:  BSF    03.5
0DE3:  MOVWF  3D
0DE4:  BCF    03.5
0DE5:  MOVF   69,W
0DE6:  BSF    03.5
0DE7:  MOVWF  3C
0DE8:  BCF    0A.3
0DE9:  BCF    03.5
0DEA:  CALL   2D8
0DEB:  BSF    0A.3
0DEC:  MOVF   7A,W
0DED:  MOVWF  70
0DEE:  MOVF   79,W
0DEF:  MOVWF  6F
0DF0:  MOVF   78,W
0DF1:  MOVWF  6E
0DF2:  MOVF   77,W
0DF3:  MOVWF  6D
0DF4:  MOVF   70,W
0DF5:  MOVWF  74
0DF6:  MOVF   6F,W
0DF7:  MOVWF  73
0DF8:  MOVF   6E,W
0DF9:  MOVWF  72
0DFA:  MOVF   6D,W
0DFB:  MOVWF  71
0DFC:  CALL   1EC
....................       } 
....................    } 
.................... } 
0DFD:  RETURN
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES HS //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin disabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //No brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brownout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #use delay(clock=20000000) 
0177:  MOVLW  67
0178:  MOVWF  04
0179:  BCF    03.7
017A:  MOVF   00,W
017B:  BTFSC  03.2
017C:  GOTO   18A
017D:  MOVLW  06
017E:  MOVWF  78
017F:  CLRF   77
0180:  DECFSZ 77,F
0181:  GOTO   180
0182:  DECFSZ 78,F
0183:  GOTO   17F
0184:  MOVLW  7B
0185:  MOVWF  77
0186:  DECFSZ 77,F
0187:  GOTO   186
0188:  DECFSZ 00,F
0189:  GOTO   17D
018A:  RETURN
.................... // Config the serial port hardware on the PIC 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define DISPLAY_ADDRESS 0xB4 
.................... #define REGISTER_SIZE  8    
.................... #define DISPLAY_CMD_SEND_VALUE 2 
.................... #define DISPLAY_CMD_SEND_LONG_TEXT 5 
.................... #define DISPLAY_CMD_CLS 6 
.................... #define DISPLAY_CMD_SETPOS 8 
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... // setup the I2C port 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
07DA:  BCF    14.7
07DB:  BCF    0C.3
07DC:  MOVF   6D,W
07DD:  MOVWF  13
07DE:  MOVLW  02
07DF:  BTFSC  14.7
07E0:  GOTO   7E8
07E1:  BTFSS  0C.3
07E2:  GOTO   7E1
07E3:  MOVLW  00
07E4:  BSF    03.5
07E5:  BTFSC  11.6
07E6:  MOVLW  01
07E7:  BCF    03.5
07E8:  MOVWF  78
07E9:  RETURN
....................  
.................... int1 selectPush =0,selectUsed=1; 
.................... int1 exitPush =0,exitUsed =1; 
.................... int1 leftPush =0,leftUsed =1; 
.................... int1 rightPush =0,rightUsed =1; 
.................... //move from main 
.................... int menu = 1; 
.................... int1 selectmenu = 0; 
.................... int16 analog0; 
.................... int16 REFERENCE_VALUE = 525; 
....................  
....................  
.................... #INT_RB 
.................... void rb_isr(void) { 
....................    if(input(PIN_B3)==0 && selectUsed==0) // input(PIN_B3) == 0 is touching 
00B9:  BSF    03.5
00BA:  BSF    06.3
00BB:  BCF    03.5
00BC:  BTFSC  06.3
00BD:  GOTO   0C2
00BE:  BTFSC  28.1
00BF:  GOTO   0C2
....................    { 
....................          selectPush = 1; 
00C0:  BSF    28.0
....................    } 
....................    else if(input(PIN_B3)==1 && selectUsed==1) 
00C1:  GOTO   104
00C2:  BSF    03.5
00C3:  BSF    06.3
00C4:  BCF    03.5
00C5:  BTFSS  06.3
00C6:  GOTO   0CC
00C7:  BTFSS  28.1
00C8:  GOTO   0CC
....................    {       
....................          selectPush = 0; 
00C9:  BCF    28.0
....................          selectUsed = 0; 
00CA:  BCF    28.1
....................    } 
....................     
....................    else if(input(PIN_B2)==0 && exitUsed==0) // input(PIN_B3) == 0 is touching 
00CB:  GOTO   104
00CC:  BSF    03.5
00CD:  BSF    06.2
00CE:  BCF    03.5
00CF:  BTFSC  06.2
00D0:  GOTO   0D5
00D1:  BTFSC  28.3
00D2:  GOTO   0D5
....................    { 
....................          exitPush = 1; 
00D3:  BSF    28.2
....................    } 
....................    else if(input(PIN_B2)==1 && exitUsed==1) 
00D4:  GOTO   104
00D5:  BSF    03.5
00D6:  BSF    06.2
00D7:  BCF    03.5
00D8:  BTFSS  06.2
00D9:  GOTO   0DF
00DA:  BTFSS  28.3
00DB:  GOTO   0DF
....................    {       
....................          exitPush = 0; 
00DC:  BCF    28.2
....................          exitUsed = 0; 
00DD:  BCF    28.3
....................    } 
....................    else if(input(PIN_B1)==0 && leftUsed==0) // input(PIN_B3) == 0 is touching 
00DE:  GOTO   104
00DF:  BSF    03.5
00E0:  BSF    06.1
00E1:  BCF    03.5
00E2:  BTFSC  06.1
00E3:  GOTO   0E8
00E4:  BTFSC  28.5
00E5:  GOTO   0E8
....................    { 
....................          leftPush = 1; 
00E6:  BSF    28.4
....................    } 
....................    else if(input(PIN_B1)==1 && leftUsed==1) 
00E7:  GOTO   104
00E8:  BSF    03.5
00E9:  BSF    06.1
00EA:  BCF    03.5
00EB:  BTFSS  06.1
00EC:  GOTO   0F2
00ED:  BTFSS  28.5
00EE:  GOTO   0F2
....................    {       
....................          leftPush = 0; 
00EF:  BCF    28.4
....................          leftUsed = 0; 
00F0:  BCF    28.5
....................    } 
....................    else if(input(PIN_B4)==0 && rightUsed==0) // input(PIN_B3) == 0 is touching 
00F1:  GOTO   104
00F2:  BSF    03.5
00F3:  BSF    06.4
00F4:  BCF    03.5
00F5:  BTFSC  06.4
00F6:  GOTO   0FB
00F7:  BTFSC  28.7
00F8:  GOTO   0FB
....................    { 
....................          rightPush = 1; 
00F9:  BSF    28.6
....................    } 
....................    else if(input(PIN_B4)==1 && rightUsed==1) 
00FA:  GOTO   104
00FB:  BSF    03.5
00FC:  BSF    06.4
00FD:  BCF    03.5
00FE:  BTFSS  06.4
00FF:  GOTO   104
0100:  BTFSS  28.7
0101:  GOTO   104
....................    {       
....................          rightPush = 0; 
0102:  BCF    28.6
....................          rightUsed = 0; 
0103:  BCF    28.7
....................    } 
....................    //if you wanna check the other button you have to write in this function with input(parameter); 
.................... } 
....................  
....................  
0104:  BCF    0B.0
0105:  BCF    0A.3
0106:  BCF    0A.4
0107:  GOTO   01B
.................... void displayLongText(char* text); 
.................... void displayValue(int16 value[]); 
.................... void clearDisplay(); 
.................... void setDisplayPos(int pos); 
.................... int1 checkselect(int1 menu); 
.................... int1 checkexit(int1 menu); 
.................... int checkleft(int menu); 
.................... int checkright(int menu); 
.................... int16 calibrate(int16 analog); 
.................... int16 resetcalibrate(); 
.................... int16 amperecal(int16 analog); 
.................... int16 powercal(int16 ampere); 
.................... void menu4(); 
.................... void menu5(); 
....................  
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!// This is the main device register 
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!int deviceRegister[REGISTER_SIZE]={0}; // device register 
....................  
....................  
....................  
....................  
.................... void main() { 
119C:  BSF    03.5
119D:  BSF    03.6
119E:  BSF    07.3
119F:  MOVLW  08
11A0:  BCF    03.6
11A1:  MOVWF  19
11A2:  MOVLW  02
11A3:  MOVWF  1A
11A4:  MOVLW  A6
11A5:  MOVWF  18
11A6:  MOVLW  90
11A7:  BCF    03.5
11A8:  MOVWF  18
11A9:  MOVLW  FF
11AA:  MOVWF  27
11AB:  BSF    27.3
11AC:  MOVF   27,W
11AD:  BSF    03.5
11AE:  MOVWF  07
11AF:  BCF    03.5
11B0:  BSF    27.4
11B1:  MOVF   27,W
11B2:  BSF    03.5
11B3:  MOVWF  07
11B4:  MOVLW  31
11B5:  MOVWF  13
11B6:  MOVLW  29
11B7:  BCF    03.5
11B8:  MOVWF  14
11B9:  BSF    03.5
11BA:  BSF    14.7
11BB:  BCF    14.6
11BC:  MOVLW  FF
11BD:  MOVWF  13
11BE:  MOVLW  28
11BF:  BCF    03.5
11C0:  MOVWF  14
11C1:  BCF    28.0
11C2:  BSF    28.1
11C3:  BCF    28.2
11C4:  BSF    28.3
11C5:  BCF    28.4
11C6:  BSF    28.5
11C7:  BCF    28.6
11C8:  BSF    28.7
11C9:  MOVLW  01
11CA:  MOVWF  29
11CB:  BCF    2A.0
11CC:  MOVLW  02
11CD:  MOVWF  2E
11CE:  MOVLW  0D
11CF:  MOVWF  2D
11D0:  BSF    03.5
11D1:  BSF    03.6
11D2:  MOVF   09,W
11D3:  ANDLW  C0
11D4:  MOVWF  09
11D5:  BCF    03.6
11D6:  BCF    1F.4
11D7:  BCF    1F.5
11D8:  MOVLW  00
11D9:  BSF    03.6
11DA:  MOVWF  08
11DB:  BCF    03.5
11DC:  CLRF   07
11DD:  CLRF   08
11DE:  CLRF   09
....................     
....................      
....................   
....................     float32 power_sim; 
....................  
....................  
....................     int16 ampere; 
....................     int16 power; 
....................     
....................     enable_interrupts(INT_RB3);    // generate interrupt when B7 changes 
11DF:  BCF    03.6
11E0:  BSF    0B.3
11E1:  BSF    03.5
11E2:  BSF    16.3
....................     enable_interrupts(INT_RB2); 
11E3:  BCF    03.5
11E4:  BSF    0B.3
11E5:  BSF    03.5
11E6:  BSF    16.2
....................     enable_interrupts(INT_RB1); 
11E7:  BCF    03.5
11E8:  BSF    0B.3
11E9:  BSF    03.5
11EA:  BSF    16.1
....................     enable_interrupts(INT_RB4); 
11EB:  BCF    03.5
11EC:  BSF    0B.3
11ED:  BSF    03.5
11EE:  BSF    16.4
....................     enable_interrupts(GLOBAL); 
11EF:  MOVLW  C0
11F0:  BCF    03.5
11F1:  IORWF  0B,F
....................      
....................     setup_adc_ports(sAN1); // setup PIN A0 as analog input 
11F2:  BSF    03.5
11F3:  BSF    03.6
11F4:  MOVF   09,W
11F5:  ANDLW  C0
11F6:  MOVWF  09
11F7:  BCF    03.6
11F8:  BCF    1F.4
11F9:  BCF    1F.5
11FA:  MOVLW  02
11FB:  BSF    03.6
11FC:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
11FD:  BCF    03.5
11FE:  BCF    03.6
11FF:  BSF    1F.6
1200:  BSF    1F.7
1201:  BSF    03.5
1202:  BSF    1F.7
1203:  BCF    03.5
1204:  BSF    1F.0
....................   
....................     printf("Sampling:\r\n"); 
1205:  MOVLW  08
1206:  BSF    03.6
1207:  MOVWF  0D
1208:  MOVLW  01
1209:  MOVWF  0F
120A:  BCF    0A.4
120B:  BCF    03.6
120C:  GOTO   128
120D:  BSF    0A.4
....................     set_adc_channel( 1 ); // set the ADC channel to read  
120E:  MOVLW  04
120F:  MOVWF  78
1210:  MOVF   1F,W
1211:  ANDLW  C3
1212:  IORWF  78,W
1213:  MOVWF  1F
....................     delay_us(100); // wait for the sensor reading to finish 
1214:  MOVLW  A6
1215:  MOVWF  77
1216:  DECFSZ 77,F
1217:  GOTO   216
1218:  NOP
....................   
....................     while (1) { 
....................        analog0 = read_adc(); 
1219:  BSF    1F.1
121A:  BTFSC  1F.1
121B:  GOTO   21A
121C:  BSF    03.5
121D:  MOVF   1E,W
121E:  BCF    03.5
121F:  MOVWF  2B
1220:  MOVF   1E,W
1221:  MOVWF  2C
....................         
....................        delay_ms(100); //100 
1222:  MOVLW  64
1223:  MOVWF  67
1224:  BCF    0A.4
1225:  CALL   177
1226:  BSF    0A.4
....................        
....................         
....................         
....................        if(REFERENCE_VALUE>525){ 
1227:  MOVF   2E,W
1228:  SUBLW  01
1229:  BTFSC  03.0
122A:  GOTO   242
122B:  XORLW  FF
122C:  BTFSS  03.2
122D:  GOTO   232
122E:  MOVF   2D,W
122F:  SUBLW  0D
1230:  BTFSC  03.0
1231:  GOTO   242
....................          analog0 = (analog0-(REFERENCE_VALUE-525)); 
1232:  MOVLW  0D
1233:  SUBWF  2D,W
1234:  MOVWF  77
1235:  MOVF   2E,W
1236:  MOVWF  7A
1237:  MOVLW  02
1238:  BTFSS  03.0
1239:  MOVLW  03
123A:  SUBWF  7A,F
123B:  MOVF   77,W
123C:  SUBWF  2B,F
123D:  MOVF   7A,W
123E:  BTFSS  03.0
123F:  INCFSZ 7A,W
1240:  SUBWF  2C,F
....................        } 
....................        else if(REFERENCE_VALUE<525){ 
1241:  GOTO   25B
1242:  MOVF   2E,W
1243:  SUBLW  02
1244:  BTFSS  03.0
1245:  GOTO   25B
1246:  BTFSS  03.2
1247:  GOTO   24C
1248:  MOVF   2D,W
1249:  SUBLW  0C
124A:  BTFSS  03.0
124B:  GOTO   25B
....................          analog0 = (analog0+(525-REFERENCE_VALUE));   
124C:  MOVF   2D,W
124D:  SUBLW  0D
124E:  MOVWF  77
124F:  MOVLW  02
1250:  MOVWF  7A
1251:  MOVF   2E,W
1252:  BTFSS  03.0
1253:  INCFSZ 2E,W
1254:  SUBWF  7A,F
1255:  MOVF   77,W
1256:  ADDWF  2B,F
1257:  MOVF   7A,W
1258:  BTFSC  03.0
1259:  INCFSZ 7A,W
125A:  ADDWF  2C,F
....................        }  
....................        //decrese or increse analog0 to fit in graph that we solve because we solve at 0,525 at 0 mA 
....................         
....................      
....................        ampere = amperecal(analog0); 
125B:  MOVF   2C,W
125C:  MOVWF  46
125D:  MOVF   2B,W
125E:  MOVWF  45
125F:  BCF    0A.4
1260:  BSF    0A.3
1261:  GOTO   5FE
1262:  BSF    0A.4
1263:  BCF    0A.3
1264:  MOVF   79,W
1265:  MOVWF  34
1266:  MOVF   78,W
1267:  MOVWF  33
....................        power_sim =  0.230*ampere; //((230*ampere)*1000) 
1268:  MOVF   34,W
1269:  BSF    03.5
126A:  MOVWF  3D
126B:  BCF    03.5
126C:  MOVF   33,W
126D:  BSF    03.5
126E:  MOVWF  3C
126F:  BCF    0A.4
1270:  BCF    03.5
1271:  CALL   18B
1272:  BSF    0A.4
1273:  MOVLW  1F
1274:  BSF    03.5
1275:  MOVWF  3B
1276:  MOVLW  85
1277:  MOVWF  3A
1278:  MOVLW  6B
1279:  MOVWF  39
127A:  MOVLW  7C
127B:  MOVWF  38
127C:  MOVF   7A,W
127D:  MOVWF  3F
127E:  MOVF   79,W
127F:  MOVWF  3E
1280:  MOVF   78,W
1281:  MOVWF  3D
1282:  MOVF   77,W
1283:  MOVWF  3C
1284:  BCF    0A.4
1285:  BCF    03.5
1286:  CALL   2D8
1287:  BSF    0A.4
1288:  MOVF   7A,W
1289:  MOVWF  32
128A:  MOVF   79,W
128B:  MOVWF  31
128C:  MOVF   78,W
128D:  MOVWF  30
128E:  MOVF   77,W
128F:  MOVWF  2F
....................        power = (int16) power_sim; 
1290:  MOVF   32,W
1291:  BSF    03.5
1292:  MOVWF  3B
1293:  BCF    03.5
1294:  MOVF   31,W
1295:  BSF    03.5
1296:  MOVWF  3A
1297:  BCF    03.5
1298:  MOVF   30,W
1299:  BSF    03.5
129A:  MOVWF  39
129B:  BCF    03.5
129C:  MOVF   2F,W
129D:  BSF    03.5
129E:  MOVWF  38
129F:  BCF    0A.4
12A0:  BCF    03.5
12A1:  CALL   2B7
12A2:  BSF    0A.4
12A3:  MOVF   79,W
12A4:  MOVWF  36
12A5:  MOVF   78,W
12A6:  MOVWF  35
....................        printf("Sensor value = %Lu\r\n",analog0 ); 
12A7:  MOVLW  0E
12A8:  BSF    03.6
12A9:  MOVWF  0D
12AA:  MOVLW  01
12AB:  MOVWF  0F
12AC:  BCF    03.0
12AD:  MOVLW  0F
12AE:  BCF    03.6
12AF:  MOVWF  45
12B0:  BCF    0A.4
12B1:  CALL   76D
12B2:  BSF    0A.4
12B3:  MOVLW  10
12B4:  MOVWF  04
12B5:  MOVF   2C,W
12B6:  MOVWF  46
12B7:  MOVF   2B,W
12B8:  MOVWF  45
12B9:  BCF    0A.4
12BA:  BSF    0A.3
12BB:  CALL   762
12BC:  BSF    0A.4
12BD:  BCF    0A.3
12BE:  MOVLW  0D
12BF:  BTFSS  0C.4
12C0:  GOTO   2BF
12C1:  MOVWF  19
12C2:  MOVLW  0A
12C3:  BTFSS  0C.4
12C4:  GOTO   2C3
12C5:  MOVWF  19
....................        printf("AMPERE = %Lu\r\n",ampere );  //sent to computer 
12C6:  MOVLW  19
12C7:  BSF    03.6
12C8:  MOVWF  0D
12C9:  MOVLW  01
12CA:  MOVWF  0F
12CB:  BCF    03.0
12CC:  MOVLW  09
12CD:  BCF    03.6
12CE:  MOVWF  45
12CF:  BCF    0A.4
12D0:  CALL   76D
12D1:  BSF    0A.4
12D2:  MOVLW  10
12D3:  MOVWF  04
12D4:  MOVF   34,W
12D5:  MOVWF  46
12D6:  MOVF   33,W
12D7:  MOVWF  45
12D8:  BCF    0A.4
12D9:  BSF    0A.3
12DA:  CALL   762
12DB:  BSF    0A.4
12DC:  BCF    0A.3
12DD:  MOVLW  0D
12DE:  BTFSS  0C.4
12DF:  GOTO   2DE
12E0:  MOVWF  19
12E1:  MOVLW  0A
12E2:  BTFSS  0C.4
12E3:  GOTO   2E2
12E4:  MOVWF  19
....................        printf("POWER = %Lu\r\n",power ); 
12E5:  MOVLW  21
12E6:  BSF    03.6
12E7:  MOVWF  0D
12E8:  MOVLW  01
12E9:  MOVWF  0F
12EA:  BCF    03.0
12EB:  MOVLW  08
12EC:  BCF    03.6
12ED:  MOVWF  45
12EE:  BCF    0A.4
12EF:  CALL   76D
12F0:  BSF    0A.4
12F1:  MOVLW  10
12F2:  MOVWF  04
12F3:  MOVF   36,W
12F4:  MOVWF  46
12F5:  MOVF   35,W
12F6:  MOVWF  45
12F7:  BCF    0A.4
12F8:  BSF    0A.3
12F9:  CALL   762
12FA:  BSF    0A.4
12FB:  BCF    0A.3
12FC:  MOVLW  0D
12FD:  BTFSS  0C.4
12FE:  GOTO   2FD
12FF:  MOVWF  19
1300:  MOVLW  0A
1301:  BTFSS  0C.4
1302:  GOTO   301
1303:  MOVWF  19
....................        //delay_ms(500); 
....................         
....................     
....................         
....................        if(menu>=6){ 
1304:  MOVF   29,W
1305:  SUBLW  05
1306:  BTFSC  03.0
1307:  GOTO   312
....................           
....................          menu%=6; 
1308:  MOVF   29,W
1309:  MOVWF  45
130A:  MOVLW  06
130B:  MOVWF  46
130C:  BCF    0A.4
130D:  GOTO   7C3
130E:  BSF    0A.4
130F:  MOVF   77,W
1310:  MOVWF  29
....................          //menu+=1; 
....................        } 
....................        else if(menu<=0) 
1311:  GOTO   529
1312:  MOVF   29,F
1313:  BTFSS  03.2
1314:  GOTO   318
....................        { menu=1; 
1315:  MOVLW  01
1316:  MOVWF  29
....................        } 
....................        else if(menu==1){ 
1317:  GOTO   529
1318:  DECFSZ 29,W
1319:  GOTO   41B
....................          menu = checkleft(menu); 
131A:  MOVF   29,W
131B:  MOVWF  67
131C:  BCF    0A.4
131D:  BSF    0A.3
131E:  CALL   7BB
131F:  BSF    0A.4
1320:  BCF    0A.3
1321:  MOVF   78,W
1322:  MOVWF  29
....................          menu = checkright(menu); 
1323:  MOVF   29,W
1324:  MOVWF  67
1325:  BCF    0A.4
1326:  BSF    0A.3
1327:  CALL   7C8
1328:  BSF    0A.4
1329:  BCF    0A.3
132A:  MOVF   78,W
132B:  MOVWF  29
....................           
....................          setDisplayPos(1);                      
132C:  MOVLW  01
132D:  MOVWF  67
132E:  BCF    0A.4
132F:  BSF    0A.3
1330:  CALL   7D5
1331:  BSF    0A.4
1332:  BCF    0A.3
....................          displayLongText("SENSOR"); 
1333:  CLRF   78
1334:  MOVLW  07
1335:  MOVWF  77
1336:  MOVLW  37
1337:  MOVWF  04
1338:  BCF    03.7
1339:  MOVF   78,W
133A:  BCF    0A.4
133B:  CALL   02F
133C:  BSF    0A.4
133D:  MOVWF  00
133E:  INCF   78,F
133F:  INCF   04,F
1340:  DECFSZ 77,F
1341:  GOTO   339
1342:  CLRF   6A
1343:  MOVLW  37
1344:  MOVWF  69
1345:  CALL   000
....................          setDisplayPos(7);                      
1346:  MOVLW  07
1347:  MOVWF  67
1348:  BCF    0A.4
1349:  BSF    0A.3
134A:  CALL   7D5
134B:  BSF    0A.4
134C:  BCF    0A.3
....................          displayLongText("  mA  "); 
134D:  CLRF   78
134E:  MOVLW  07
134F:  MOVWF  77
1350:  MOVLW  37
1351:  MOVWF  04
1352:  BCF    03.7
1353:  MOVF   78,W
1354:  BCF    0A.4
1355:  CALL   03A
1356:  BSF    0A.4
1357:  MOVWF  00
1358:  INCF   78,F
1359:  INCF   04,F
135A:  DECFSZ 77,F
135B:  GOTO   353
135C:  CLRF   6A
135D:  MOVLW  37
135E:  MOVWF  69
135F:  CALL   000
....................          setDisplayPos(13);                      
1360:  MOVLW  0D
1361:  MOVWF  67
1362:  BCF    0A.4
1363:  BSF    0A.3
1364:  CALL   7D5
1365:  BSF    0A.4
1366:  BCF    0A.3
....................          displayLongText("WATT"); 
1367:  MOVLW  57
1368:  MOVWF  37
1369:  MOVLW  41
136A:  MOVWF  38
136B:  MOVLW  54
136C:  MOVWF  39
136D:  MOVWF  3A
136E:  CLRF   3B
136F:  CLRF   6A
1370:  MOVLW  37
1371:  MOVWF  69
1372:  CALL   000
....................          if(analog0<1000){ 
1373:  MOVF   2C,W
1374:  SUBLW  03
1375:  BTFSS  03.0
1376:  GOTO   38A
1377:  BTFSS  03.2
1378:  GOTO   37D
1379:  MOVF   2B,W
137A:  SUBLW  E7
137B:  BTFSS  03.0
137C:  GOTO   38A
....................             setDisplayPos(18); 
137D:  MOVLW  12
137E:  MOVWF  67
137F:  BCF    0A.4
1380:  BSF    0A.3
1381:  CALL   7D5
1382:  BSF    0A.4
1383:  BCF    0A.3
....................             displayValue(analog0); 
1384:  MOVF   2C,W
1385:  MOVWF  46
1386:  MOVF   2B,W
1387:  MOVWF  45
1388:  CALL   031
....................          } 
....................          else{ 
1389:  GOTO   396
....................             setDisplayPos(17); 
138A:  MOVLW  11
138B:  MOVWF  67
138C:  BCF    0A.4
138D:  BSF    0A.3
138E:  CALL   7D5
138F:  BSF    0A.4
1390:  BCF    0A.3
....................             displayValue(analog0); 
1391:  MOVF   2C,W
1392:  MOVWF  46
1393:  MOVF   2B,W
1394:  MOVWF  45
1395:  CALL   031
....................          } 
....................          if(ampere<1000){ 
1396:  MOVF   34,W
1397:  SUBLW  03
1398:  BTFSS  03.0
1399:  GOTO   3BE
139A:  BTFSS  03.2
139B:  GOTO   3A0
139C:  MOVF   33,W
139D:  SUBLW  E7
139E:  BTFSS  03.0
139F:  GOTO   3BE
....................             setDisplayPos(21); 
13A0:  MOVLW  15
13A1:  MOVWF  67
13A2:  BCF    0A.4
13A3:  BSF    0A.3
13A4:  CALL   7D5
13A5:  BSF    0A.4
13A6:  BCF    0A.3
....................             displayLongText("    "); 
13A7:  MOVLW  20
13A8:  MOVWF  37
13A9:  MOVWF  38
13AA:  MOVWF  39
13AB:  MOVWF  3A
13AC:  CLRF   3B
13AD:  CLRF   6A
13AE:  MOVLW  37
13AF:  MOVWF  69
13B0:  CALL   000
....................             setDisplayPos(25); 
13B1:  MOVLW  19
13B2:  MOVWF  67
13B3:  BCF    0A.4
13B4:  BSF    0A.3
13B5:  CALL   7D5
13B6:  BSF    0A.4
13B7:  BCF    0A.3
....................             displayValue(ampere); 
13B8:  MOVF   34,W
13B9:  MOVWF  46
13BA:  MOVF   33,W
13BB:  MOVWF  45
13BC:  CALL   031
....................          } 
....................          else{ 
13BD:  GOTO   3DA
....................             setDisplayPos(21); 
13BE:  MOVLW  15
13BF:  MOVWF  67
13C0:  BCF    0A.4
13C1:  BSF    0A.3
13C2:  CALL   7D5
13C3:  BSF    0A.4
13C4:  BCF    0A.3
....................             displayLongText("   "); 
13C5:  MOVLW  20
13C6:  MOVWF  37
13C7:  MOVWF  38
13C8:  MOVWF  39
13C9:  CLRF   3A
13CA:  CLRF   6A
13CB:  MOVLW  37
13CC:  MOVWF  69
13CD:  CALL   000
....................             setDisplayPos(24); 
13CE:  MOVLW  18
13CF:  MOVWF  67
13D0:  BCF    0A.4
13D1:  BSF    0A.3
13D2:  CALL   7D5
13D3:  BSF    0A.4
13D4:  BCF    0A.3
....................             displayValue(ampere); 
13D5:  MOVF   34,W
13D6:  MOVWF  46
13D7:  MOVF   33,W
13D8:  MOVWF  45
13D9:  CALL   031
....................          } 
....................          if(power<1000){ 
13DA:  MOVF   36,W
13DB:  SUBLW  03
13DC:  BTFSS  03.0
13DD:  GOTO   400
13DE:  BTFSS  03.2
13DF:  GOTO   3E4
13E0:  MOVF   35,W
13E1:  SUBLW  E7
13E2:  BTFSS  03.0
13E3:  GOTO   400
....................             setDisplayPos(28);                      
13E4:  MOVLW  1C
13E5:  MOVWF  67
13E6:  BCF    0A.4
13E7:  BSF    0A.3
13E8:  CALL   7D5
13E9:  BSF    0A.4
13EA:  BCF    0A.3
....................             displayLongText("  "); 
13EB:  MOVLW  20
13EC:  MOVWF  37
13ED:  MOVWF  38
13EE:  CLRF   39
13EF:  CLRF   6A
13F0:  MOVLW  37
13F1:  MOVWF  69
13F2:  CALL   000
....................             setDisplayPos(30); 
13F3:  MOVLW  1E
13F4:  MOVWF  67
13F5:  BCF    0A.4
13F6:  BSF    0A.3
13F7:  CALL   7D5
13F8:  BSF    0A.4
13F9:  BCF    0A.3
....................             displayValue(power); 
13FA:  MOVF   36,W
13FB:  MOVWF  46
13FC:  MOVF   35,W
13FD:  MOVWF  45
13FE:  CALL   031
....................          } 
....................          else{ 
13FF:  GOTO   41A
....................             setDisplayPos(28);                      
1400:  MOVLW  1C
1401:  MOVWF  67
1402:  BCF    0A.4
1403:  BSF    0A.3
1404:  CALL   7D5
1405:  BSF    0A.4
1406:  BCF    0A.3
....................             displayLongText(" "); 
1407:  MOVLW  20
1408:  MOVWF  37
1409:  CLRF   38
140A:  CLRF   6A
140B:  MOVLW  37
140C:  MOVWF  69
140D:  CALL   000
....................             setDisplayPos(29); 
140E:  MOVLW  1D
140F:  MOVWF  67
1410:  BCF    0A.4
1411:  BSF    0A.3
1412:  CALL   7D5
1413:  BSF    0A.4
1414:  BCF    0A.3
....................             displayValue(power); 
1415:  MOVF   36,W
1416:  MOVWF  46
1417:  MOVF   35,W
1418:  MOVWF  45
1419:  CALL   031
....................          } 
....................           
....................         
....................        } 
....................        else if(menu==2){ 
141A:  GOTO   529
141B:  MOVF   29,W
141C:  SUBLW  02
141D:  BTFSS  03.2
141E:  GOTO   508
....................          menu = checkleft(menu); 
141F:  MOVF   29,W
1420:  MOVWF  67
1421:  BCF    0A.4
1422:  BSF    0A.3
1423:  CALL   7BB
1424:  BSF    0A.4
1425:  BCF    0A.3
1426:  MOVF   78,W
1427:  MOVWF  29
....................          menu = checkright(menu); 
1428:  MOVF   29,W
1429:  MOVWF  67
142A:  BCF    0A.4
142B:  BSF    0A.3
142C:  CALL   7C8
142D:  BSF    0A.4
142E:  BCF    0A.3
142F:  MOVF   78,W
1430:  MOVWF  29
....................          setDisplayPos(1);                      
1431:  MOVLW  01
1432:  MOVWF  67
1433:  BCF    0A.4
1434:  BSF    0A.3
1435:  CALL   7D5
1436:  BSF    0A.4
1437:  BCF    0A.3
....................          displayLongText(" volt "); 
1438:  CLRF   78
1439:  MOVLW  07
143A:  MOVWF  77
143B:  MOVLW  3E
143C:  MOVWF  04
143D:  BCF    03.7
143E:  MOVF   78,W
143F:  BCF    0A.4
1440:  CALL   045
1441:  BSF    0A.4
1442:  MOVWF  00
1443:  INCF   78,F
1444:  INCF   04,F
1445:  DECFSZ 77,F
1446:  GOTO   43E
1447:  CLRF   6A
1448:  MOVLW  3E
1449:  MOVWF  69
144A:  CALL   000
....................          setDisplayPos(7);                      
144B:  MOVLW  07
144C:  MOVWF  67
144D:  BCF    0A.4
144E:  BSF    0A.3
144F:  CALL   7D5
1450:  BSF    0A.4
1451:  BCF    0A.3
....................          displayLongText("  mA  "); 
1452:  CLRF   78
1453:  MOVLW  07
1454:  MOVWF  77
1455:  MOVLW  3E
1456:  MOVWF  04
1457:  BCF    03.7
1458:  MOVF   78,W
1459:  BCF    0A.4
145A:  CALL   03A
145B:  BSF    0A.4
145C:  MOVWF  00
145D:  INCF   78,F
145E:  INCF   04,F
145F:  DECFSZ 77,F
1460:  GOTO   458
1461:  CLRF   6A
1462:  MOVLW  3E
1463:  MOVWF  69
1464:  CALL   000
....................          setDisplayPos(13);                      
1465:  MOVLW  0D
1466:  MOVWF  67
1467:  BCF    0A.4
1468:  BSF    0A.3
1469:  CALL   7D5
146A:  BSF    0A.4
146B:  BCF    0A.3
....................          displayLongText("WATT"); 
146C:  MOVLW  57
146D:  MOVWF  3E
146E:  MOVLW  41
146F:  MOVWF  3F
1470:  MOVLW  54
1471:  MOVWF  40
1472:  MOVWF  41
1473:  CLRF   42
1474:  CLRF   6A
1475:  MOVLW  3E
1476:  MOVWF  69
1477:  CALL   000
....................          setDisplayPos(18); 
1478:  MOVLW  12
1479:  MOVWF  67
147A:  BCF    0A.4
147B:  BSF    0A.3
147C:  CALL   7D5
147D:  BSF    0A.4
147E:  BCF    0A.3
....................          displayValue(230); 
147F:  CLRF   46
1480:  MOVLW  E6
1481:  MOVWF  45
1482:  CALL   031
....................          if(ampere<1000){ 
1483:  MOVF   34,W
1484:  SUBLW  03
1485:  BTFSS  03.0
1486:  GOTO   4AB
1487:  BTFSS  03.2
1488:  GOTO   48D
1489:  MOVF   33,W
148A:  SUBLW  E7
148B:  BTFSS  03.0
148C:  GOTO   4AB
....................             setDisplayPos(21); 
148D:  MOVLW  15
148E:  MOVWF  67
148F:  BCF    0A.4
1490:  BSF    0A.3
1491:  CALL   7D5
1492:  BSF    0A.4
1493:  BCF    0A.3
....................             displayLongText("    "); 
1494:  MOVLW  20
1495:  MOVWF  3E
1496:  MOVWF  3F
1497:  MOVWF  40
1498:  MOVWF  41
1499:  CLRF   42
149A:  CLRF   6A
149B:  MOVLW  3E
149C:  MOVWF  69
149D:  CALL   000
....................             setDisplayPos(25); 
149E:  MOVLW  19
149F:  MOVWF  67
14A0:  BCF    0A.4
14A1:  BSF    0A.3
14A2:  CALL   7D5
14A3:  BSF    0A.4
14A4:  BCF    0A.3
....................             displayValue(ampere); 
14A5:  MOVF   34,W
14A6:  MOVWF  46
14A7:  MOVF   33,W
14A8:  MOVWF  45
14A9:  CALL   031
....................          } 
....................          else{ 
14AA:  GOTO   4C7
....................             setDisplayPos(21); 
14AB:  MOVLW  15
14AC:  MOVWF  67
14AD:  BCF    0A.4
14AE:  BSF    0A.3
14AF:  CALL   7D5
14B0:  BSF    0A.4
14B1:  BCF    0A.3
....................             displayLongText("   "); 
14B2:  MOVLW  20
14B3:  MOVWF  3E
14B4:  MOVWF  3F
14B5:  MOVWF  40
14B6:  CLRF   41
14B7:  CLRF   6A
14B8:  MOVLW  3E
14B9:  MOVWF  69
14BA:  CALL   000
....................             setDisplayPos(24); 
14BB:  MOVLW  18
14BC:  MOVWF  67
14BD:  BCF    0A.4
14BE:  BSF    0A.3
14BF:  CALL   7D5
14C0:  BSF    0A.4
14C1:  BCF    0A.3
....................             displayValue(ampere); 
14C2:  MOVF   34,W
14C3:  MOVWF  46
14C4:  MOVF   33,W
14C5:  MOVWF  45
14C6:  CALL   031
....................          } 
....................          if(power<1000){ 
14C7:  MOVF   36,W
14C8:  SUBLW  03
14C9:  BTFSS  03.0
14CA:  GOTO   4ED
14CB:  BTFSS  03.2
14CC:  GOTO   4D1
14CD:  MOVF   35,W
14CE:  SUBLW  E7
14CF:  BTFSS  03.0
14D0:  GOTO   4ED
....................             setDisplayPos(28);                      
14D1:  MOVLW  1C
14D2:  MOVWF  67
14D3:  BCF    0A.4
14D4:  BSF    0A.3
14D5:  CALL   7D5
14D6:  BSF    0A.4
14D7:  BCF    0A.3
....................             displayLongText("  "); 
14D8:  MOVLW  20
14D9:  MOVWF  3E
14DA:  MOVWF  3F
14DB:  CLRF   40
14DC:  CLRF   6A
14DD:  MOVLW  3E
14DE:  MOVWF  69
14DF:  CALL   000
....................             setDisplayPos(30); 
14E0:  MOVLW  1E
14E1:  MOVWF  67
14E2:  BCF    0A.4
14E3:  BSF    0A.3
14E4:  CALL   7D5
14E5:  BSF    0A.4
14E6:  BCF    0A.3
....................             displayValue(power); 
14E7:  MOVF   36,W
14E8:  MOVWF  46
14E9:  MOVF   35,W
14EA:  MOVWF  45
14EB:  CALL   031
....................          } 
....................          else{ 
14EC:  GOTO   507
....................             setDisplayPos(28);                      
14ED:  MOVLW  1C
14EE:  MOVWF  67
14EF:  BCF    0A.4
14F0:  BSF    0A.3
14F1:  CALL   7D5
14F2:  BSF    0A.4
14F3:  BCF    0A.3
....................             displayLongText(" "); 
14F4:  MOVLW  20
14F5:  MOVWF  3E
14F6:  CLRF   3F
14F7:  CLRF   6A
14F8:  MOVLW  3E
14F9:  MOVWF  69
14FA:  CALL   000
....................             setDisplayPos(29); 
14FB:  MOVLW  1D
14FC:  MOVWF  67
14FD:  BCF    0A.4
14FE:  BSF    0A.3
14FF:  CALL   7D5
1500:  BSF    0A.4
1501:  BCF    0A.3
....................             displayValue(power); 
1502:  MOVF   36,W
1503:  MOVWF  46
1504:  MOVF   35,W
1505:  MOVWF  45
1506:  CALL   031
....................          } 
....................           
....................          
....................        } 
....................        else if(menu ==3){ 
1507:  GOTO   529
1508:  MOVF   29,W
1509:  SUBLW  03
150A:  BTFSS  03.2
150B:  GOTO   51F
....................             menu = checkleft(menu); 
150C:  MOVF   29,W
150D:  MOVWF  67
150E:  BCF    0A.4
150F:  BSF    0A.3
1510:  CALL   7BB
1511:  BSF    0A.4
1512:  BCF    0A.3
1513:  MOVF   78,W
1514:  MOVWF  29
....................             menu = checkright(menu); 
1515:  MOVF   29,W
1516:  MOVWF  67
1517:  BCF    0A.4
1518:  BSF    0A.3
1519:  CALL   7C8
151A:  BSF    0A.4
151B:  BCF    0A.3
151C:  MOVF   78,W
151D:  MOVWF  29
....................        } 
....................        else if(menu ==4){ 
151E:  GOTO   529
151F:  MOVF   29,W
1520:  SUBLW  04
1521:  BTFSS  03.2
1522:  GOTO   525
....................             menu4(); 
1523:  GOTO   05A
....................        } 
....................        else if(menu ==5){ 
1524:  GOTO   529
1525:  MOVF   29,W
1526:  SUBLW  05
1527:  BTFSC  03.2
....................             menu5(); 
1528:  GOTO   0FD
....................              
....................         
....................        } 
....................         
....................         
....................    
....................         
....................         
....................           
....................     } 
1529:  GOTO   219
.................... } 
....................  
....................  
.................... ///////////////// 
.................... //calculation Function 
.................... //////////////// 
.................... int16 amperecal(int16 analog){ 
0DFE:  MOVLW  FA
0DFF:  MOVWF  54
0E00:  MOVLW  A2
0E01:  MOVWF  53
0E02:  MOVLW  48
0E03:  MOVWF  52
0E04:  MOVLW  71
0E05:  MOVWF  51
0E06:  MOVLW  AC
0E07:  MOVWF  58
0E08:  MOVLW  19
0E09:  MOVWF  57
0E0A:  MOVLW  39
0E0B:  MOVWF  56
0E0C:  MOVLW  7C
0E0D:  MOVWF  55
0E0E:  MOVLW  10
0E0F:  MOVWF  5C
0E10:  MOVLW  98
0E11:  MOVWF  5B
0E12:  MOVLW  6A
0E13:  MOVWF  5A
0E14:  MOVLW  85
0E15:  MOVWF  59
0E16:  MOVLW  9A
0E17:  MOVWF  60
0E18:  MOVLW  F8
0E19:  MOVWF  5F
0E1A:  MOVLW  47
0E1B:  MOVWF  5E
0E1C:  MOVLW  8D
0E1D:  MOVWF  5D
....................    float32 analog_sim; 
152A:  SLEEP
....................    float32 ampere_sim; 
....................    int16 ampere; 
....................    float32 A = 0.000095671; 
....................    float32 B = 0.180762; 
....................    float32 C = 117.297; 
....................    float32 D = 25596.3; 
....................     
....................    analog_sim = analog; 
0E1E:  MOVF   46,W
0E1F:  BSF    03.5
0E20:  MOVWF  3D
0E21:  BCF    03.5
0E22:  MOVF   45,W
0E23:  BSF    03.5
0E24:  MOVWF  3C
0E25:  BCF    0A.3
0E26:  BCF    03.5
0E27:  CALL   18B
0E28:  BSF    0A.3
0E29:  MOVF   7A,W
0E2A:  MOVWF  4A
0E2B:  MOVF   79,W
0E2C:  MOVWF  49
0E2D:  MOVF   78,W
0E2E:  MOVWF  48
0E2F:  MOVF   77,W
0E30:  MOVWF  47
....................    ampere_sim =(A*( pow(analog_sim,3)))-(B*( pow(analog_sim,2)))+(C* analog_sim)-D; 
0E31:  MOVF   4A,W
0E32:  MOVWF  68
0E33:  MOVF   49,W
0E34:  MOVWF  67
0E35:  MOVF   48,W
0E36:  MOVWF  66
0E37:  MOVF   47,W
0E38:  MOVWF  65
0E39:  CLRF   6C
0E3A:  CLRF   6B
0E3B:  MOVLW  40
0E3C:  MOVWF  6A
0E3D:  MOVLW  80
0E3E:  MOVWF  69
0E3F:  CALL   419
0E40:  MOVF   54,W
0E41:  BSF    03.5
0E42:  MOVWF  3B
0E43:  BCF    03.5
0E44:  MOVF   53,W
0E45:  BSF    03.5
0E46:  MOVWF  3A
0E47:  BCF    03.5
0E48:  MOVF   52,W
0E49:  BSF    03.5
0E4A:  MOVWF  39
0E4B:  BCF    03.5
0E4C:  MOVF   51,W
0E4D:  BSF    03.5
0E4E:  MOVWF  38
0E4F:  MOVF   7A,W
0E50:  MOVWF  3F
0E51:  MOVF   79,W
0E52:  MOVWF  3E
0E53:  MOVF   78,W
0E54:  MOVWF  3D
0E55:  MOVF   77,W
0E56:  MOVWF  3C
0E57:  BCF    0A.3
0E58:  BCF    03.5
0E59:  CALL   2D8
0E5A:  BSF    0A.3
0E5B:  MOVF   7A,W
0E5C:  MOVWF  64
0E5D:  MOVF   79,W
0E5E:  MOVWF  63
0E5F:  MOVF   78,W
0E60:  MOVWF  62
0E61:  MOVF   77,W
0E62:  MOVWF  61
0E63:  MOVF   4A,W
0E64:  MOVWF  68
0E65:  MOVF   49,W
0E66:  MOVWF  67
0E67:  MOVF   48,W
0E68:  MOVWF  66
0E69:  MOVF   47,W
0E6A:  MOVWF  65
0E6B:  CLRF   6C
0E6C:  CLRF   6B
0E6D:  CLRF   6A
0E6E:  MOVLW  80
0E6F:  MOVWF  69
0E70:  CALL   419
0E71:  MOVF   58,W
0E72:  BSF    03.5
0E73:  MOVWF  3B
0E74:  BCF    03.5
0E75:  MOVF   57,W
0E76:  BSF    03.5
0E77:  MOVWF  3A
0E78:  BCF    03.5
0E79:  MOVF   56,W
0E7A:  BSF    03.5
0E7B:  MOVWF  39
0E7C:  BCF    03.5
0E7D:  MOVF   55,W
0E7E:  BSF    03.5
0E7F:  MOVWF  38
0E80:  MOVF   7A,W
0E81:  MOVWF  3F
0E82:  MOVF   79,W
0E83:  MOVWF  3E
0E84:  MOVF   78,W
0E85:  MOVWF  3D
0E86:  MOVF   77,W
0E87:  MOVWF  3C
0E88:  BCF    0A.3
0E89:  BCF    03.5
0E8A:  CALL   2D8
0E8B:  BSF    0A.3
0E8C:  CLRF   66
0E8D:  MOVF   04,W
0E8E:  MOVWF  65
0E8F:  BCF    66.0
0E90:  BTFSC  03.7
0E91:  BSF    66.0
0E92:  BSF    03.1
0E93:  MOVF   64,W
0E94:  BSF    03.5
0E95:  MOVWF  3F
0E96:  BCF    03.5
0E97:  MOVF   63,W
0E98:  BSF    03.5
0E99:  MOVWF  3E
0E9A:  BCF    03.5
0E9B:  MOVF   62,W
0E9C:  BSF    03.5
0E9D:  MOVWF  3D
0E9E:  BCF    03.5
0E9F:  MOVF   61,W
0EA0:  BSF    03.5
0EA1:  MOVWF  3C
0EA2:  MOVF   7A,W
0EA3:  MOVWF  43
0EA4:  MOVF   79,W
0EA5:  MOVWF  42
0EA6:  MOVF   78,W
0EA7:  MOVWF  41
0EA8:  MOVF   77,W
0EA9:  MOVWF  40
0EAA:  BCF    0A.3
0EAB:  BCF    03.5
0EAC:  CALL   34F
0EAD:  BSF    0A.3
0EAE:  MOVF   65,W
0EAF:  MOVWF  04
0EB0:  BCF    03.7
0EB1:  BTFSC  66.0
0EB2:  BSF    03.7
0EB3:  MOVF   7A,W
0EB4:  MOVWF  64
0EB5:  MOVF   79,W
0EB6:  MOVWF  63
0EB7:  MOVF   78,W
0EB8:  MOVWF  62
0EB9:  MOVF   77,W
0EBA:  MOVWF  61
0EBB:  MOVF   5C,W
0EBC:  BSF    03.5
0EBD:  MOVWF  3B
0EBE:  BCF    03.5
0EBF:  MOVF   5B,W
0EC0:  BSF    03.5
0EC1:  MOVWF  3A
0EC2:  BCF    03.5
0EC3:  MOVF   5A,W
0EC4:  BSF    03.5
0EC5:  MOVWF  39
0EC6:  BCF    03.5
0EC7:  MOVF   59,W
0EC8:  BSF    03.5
0EC9:  MOVWF  38
0ECA:  BCF    03.5
0ECB:  MOVF   4A,W
0ECC:  BSF    03.5
0ECD:  MOVWF  3F
0ECE:  BCF    03.5
0ECF:  MOVF   49,W
0ED0:  BSF    03.5
0ED1:  MOVWF  3E
0ED2:  BCF    03.5
0ED3:  MOVF   48,W
0ED4:  BSF    03.5
0ED5:  MOVWF  3D
0ED6:  BCF    03.5
0ED7:  MOVF   47,W
0ED8:  BSF    03.5
0ED9:  MOVWF  3C
0EDA:  BCF    0A.3
0EDB:  BCF    03.5
0EDC:  CALL   2D8
0EDD:  BSF    0A.3
0EDE:  CLRF   68
0EDF:  MOVF   04,W
0EE0:  MOVWF  67
0EE1:  BCF    68.0
0EE2:  BTFSC  03.7
0EE3:  BSF    68.0
0EE4:  BCF    03.1
0EE5:  MOVF   64,W
0EE6:  BSF    03.5
0EE7:  MOVWF  3F
0EE8:  BCF    03.5
0EE9:  MOVF   63,W
0EEA:  BSF    03.5
0EEB:  MOVWF  3E
0EEC:  BCF    03.5
0EED:  MOVF   62,W
0EEE:  BSF    03.5
0EEF:  MOVWF  3D
0EF0:  BCF    03.5
0EF1:  MOVF   61,W
0EF2:  BSF    03.5
0EF3:  MOVWF  3C
0EF4:  MOVF   7A,W
0EF5:  MOVWF  43
0EF6:  MOVF   79,W
0EF7:  MOVWF  42
0EF8:  MOVF   78,W
0EF9:  MOVWF  41
0EFA:  MOVF   77,W
0EFB:  MOVWF  40
0EFC:  BCF    0A.3
0EFD:  BCF    03.5
0EFE:  CALL   34F
0EFF:  BSF    0A.3
0F00:  MOVF   67,W
0F01:  MOVWF  04
0F02:  BCF    03.7
0F03:  BTFSC  68.0
0F04:  BSF    03.7
0F05:  MOVF   7A,W
0F06:  MOVWF  64
0F07:  MOVF   79,W
0F08:  MOVWF  63
0F09:  MOVF   78,W
0F0A:  MOVWF  62
0F0B:  MOVF   77,W
0F0C:  MOVWF  61
0F0D:  CLRF   6A
0F0E:  MOVF   04,W
0F0F:  MOVWF  69
0F10:  BCF    6A.0
0F11:  BTFSC  03.7
0F12:  BSF    6A.0
0F13:  BSF    03.1
0F14:  MOVF   7A,W
0F15:  BSF    03.5
0F16:  MOVWF  3F
0F17:  BCF    03.5
0F18:  MOVF   79,W
0F19:  BSF    03.5
0F1A:  MOVWF  3E
0F1B:  BCF    03.5
0F1C:  MOVF   78,W
0F1D:  BSF    03.5
0F1E:  MOVWF  3D
0F1F:  BCF    03.5
0F20:  MOVF   77,W
0F21:  BSF    03.5
0F22:  MOVWF  3C
0F23:  BCF    03.5
0F24:  MOVF   60,W
0F25:  BSF    03.5
0F26:  MOVWF  43
0F27:  BCF    03.5
0F28:  MOVF   5F,W
0F29:  BSF    03.5
0F2A:  MOVWF  42
0F2B:  BCF    03.5
0F2C:  MOVF   5E,W
0F2D:  BSF    03.5
0F2E:  MOVWF  41
0F2F:  BCF    03.5
0F30:  MOVF   5D,W
0F31:  BSF    03.5
0F32:  MOVWF  40
0F33:  BCF    0A.3
0F34:  BCF    03.5
0F35:  CALL   34F
0F36:  BSF    0A.3
0F37:  MOVF   69,W
0F38:  MOVWF  04
0F39:  BCF    03.7
0F3A:  BTFSC  6A.0
0F3B:  BSF    03.7
0F3C:  MOVF   7A,W
0F3D:  MOVWF  4E
0F3E:  MOVF   79,W
0F3F:  MOVWF  4D
0F40:  MOVF   78,W
0F41:  MOVWF  4C
0F42:  MOVF   77,W
0F43:  MOVWF  4B
....................    ampere = (int16) ampere_sim; 
0F44:  MOVF   4E,W
0F45:  BSF    03.5
0F46:  MOVWF  3B
0F47:  BCF    03.5
0F48:  MOVF   4D,W
0F49:  BSF    03.5
0F4A:  MOVWF  3A
0F4B:  BCF    03.5
0F4C:  MOVF   4C,W
0F4D:  BSF    03.5
0F4E:  MOVWF  39
0F4F:  BCF    03.5
0F50:  MOVF   4B,W
0F51:  BSF    03.5
0F52:  MOVWF  38
0F53:  BCF    0A.3
0F54:  BCF    03.5
0F55:  CALL   2B7
0F56:  BSF    0A.3
0F57:  MOVF   79,W
0F58:  MOVWF  50
0F59:  MOVF   78,W
0F5A:  MOVWF  4F
....................    return ampere; 
0F5B:  MOVF   4F,W
0F5C:  MOVWF  78
0F5D:  MOVF   50,W
0F5E:  MOVWF  79
.................... } 
0F5F:  BCF    0A.3
0F60:  BSF    0A.4
0F61:  GOTO   262 (RETURN)
.................... int16 powercal(int16 ampere){ 
....................  
....................  
.................... } 
....................  
....................  
....................  
....................  
.................... ///////////////// 
.................... //calculation Function 
.................... //////////////// 
....................  
....................  
....................  
.................... ///////////////// 
.................... //Menu Function 
.................... //////////////// 
....................  
....................  
.................... void menu4(){ 
....................      selectmenu = checkselect(selectmenu); 
105A:  MOVLW  00
105B:  BTFSC  2A.0
105C:  MOVLW  01
105D:  MOVWF  67
105E:  MOVWF  68
105F:  BCF    0A.4
1060:  BSF    0A.3
1061:  CALL   7F3
1062:  BSF    0A.4
1063:  BCF    0A.3
1064:  BCF    2A.0
1065:  BTFSC  78.0
1066:  BSF    2A.0
....................             if(selectmenu > 0){ 
1067:  MOVLW  00
1068:  BTFSC  2A.0
1069:  MOVLW  01
106A:  XORLW  00
106B:  BTFSC  03.2
106C:  GOTO   0B4
....................                REFERENCE_VALUE = calibrate(analog0); 
106D:  MOVF   2C,W
106E:  MOVWF  68
106F:  MOVF   2B,W
1070:  MOVWF  67
1075:  MOVF   79,W
1076:  MOVWF  2E
1077:  MOVF   78,W
1078:  MOVWF  2D
....................                selectmenu = 0; 
1079:  BCF    2A.0
....................                setDisplayPos(1);                      
107A:  MOVLW  01
107B:  MOVWF  67
107C:  BCF    0A.4
107D:  BSF    0A.3
107E:  CALL   7D5
107F:  BSF    0A.4
1080:  BCF    0A.3
....................                displayLongText("   CALIBRATE    "); 
1081:  CLRF   78
1082:  MOVLW  11
1083:  MOVWF  77
1084:  MOVLW  45
1085:  MOVWF  04
1086:  BCF    03.7
1087:  MOVF   78,W
1088:  BCF    0A.4
1089:  CALL   050
108A:  BSF    0A.4
108B:  MOVWF  00
108C:  INCF   78,F
108D:  INCF   04,F
108E:  DECFSZ 77,F
108F:  GOTO   087
1090:  CLRF   6A
1091:  MOVLW  45
1092:  MOVWF  69
1093:  CALL   000
....................                setDisplayPos(17);                      
1094:  MOVLW  11
1095:  MOVWF  67
1096:  BCF    0A.4
1097:  BSF    0A.3
1098:  CALL   7D5
1099:  BSF    0A.4
109A:  BCF    0A.3
....................                displayLongText("  OK !!! "); 
109B:  CLRF   78
109C:  MOVLW  0A
109D:  MOVWF  77
109E:  MOVLW  45
109F:  MOVWF  04
10A0:  BCF    03.7
10A1:  MOVF   78,W
10A2:  BCF    0A.4
10A3:  CALL   065
10A4:  BSF    0A.4
10A5:  MOVWF  00
10A6:  INCF   78,F
10A7:  INCF   04,F
10A8:  DECFSZ 77,F
10A9:  GOTO   0A1
10AA:  CLRF   6A
10AB:  MOVLW  45
10AC:  MOVWF  69
10AD:  CALL   000
....................                delay_ms(200); 
10AE:  MOVLW  C8
10AF:  MOVWF  67
10B0:  BCF    0A.4
10B1:  CALL   177
10B2:  BSF    0A.4
....................             } 
....................             else{ 
10B3:  GOTO   0FA
....................                menu = checkleft(menu); 
10B4:  MOVF   29,W
10B5:  MOVWF  67
10B6:  BCF    0A.4
10B7:  BSF    0A.3
10B8:  CALL   7BB
10B9:  BSF    0A.4
10BA:  BCF    0A.3
10BB:  MOVF   78,W
10BC:  MOVWF  29
....................                menu = checkright(menu); 
10BD:  MOVF   29,W
10BE:  MOVWF  67
10BF:  BCF    0A.4
10C0:  BSF    0A.3
10C1:  CALL   7C8
10C2:  BSF    0A.4
10C3:  BCF    0A.3
10C4:  MOVF   78,W
10C5:  MOVWF  29
....................                setDisplayPos(1);                      
10C6:  MOVLW  01
10C7:  MOVWF  67
10C8:  BCF    0A.4
10C9:  BSF    0A.3
10CA:  CALL   7D5
10CB:  BSF    0A.4
10CC:  BCF    0A.3
....................                displayLongText("   CALIBRATE    "); 
10CD:  CLRF   78
10CE:  MOVLW  11
10CF:  MOVWF  77
10D0:  MOVLW  56
10D1:  MOVWF  04
10D2:  BCF    03.7
10D3:  MOVF   78,W
10D4:  BCF    0A.4
10D5:  CALL   050
10D6:  BSF    0A.4
10D7:  MOVWF  00
10D8:  INCF   78,F
10D9:  INCF   04,F
10DA:  DECFSZ 77,F
10DB:  GOTO   0D3
10DC:  CLRF   6A
10DD:  MOVLW  56
10DE:  MOVWF  69
10DF:  CALL   000
....................                setDisplayPos(17);                      
10E0:  MOVLW  11
10E1:  MOVWF  67
10E2:  BCF    0A.4
10E3:  BSF    0A.3
10E4:  CALL   7D5
10E5:  BSF    0A.4
10E6:  BCF    0A.3
....................                displayLongText("  This Tool !!! "); 
10E7:  CLRF   78
10E8:  MOVLW  11
10E9:  MOVWF  77
10EA:  MOVLW  56
10EB:  MOVWF  04
10EC:  BCF    03.7
10ED:  MOVF   78,W
10EE:  BCF    0A.4
10EF:  CALL   073
10F0:  BSF    0A.4
10F1:  MOVWF  00
10F2:  INCF   78,F
10F3:  INCF   04,F
10F4:  DECFSZ 77,F
10F5:  GOTO   0ED
10F6:  CLRF   6A
10F7:  MOVLW  56
10F8:  MOVWF  69
10F9:  CALL   000
....................              
....................             } 
.................... } 
10FA:  BCF    0A.3
10FB:  BSF    0A.4
10FC:  GOTO   524 (RETURN)
....................  
.................... void menu5(){ 
....................    selectmenu = checkselect(selectmenu); 
10FD:  MOVLW  00
10FE:  BTFSC  2A.0
10FF:  MOVLW  01
1100:  MOVWF  65
1101:  MOVWF  68
1102:  BCF    0A.4
1103:  BSF    0A.3
1104:  CALL   7F3
1105:  BSF    0A.4
1106:  BCF    0A.3
1107:  BCF    2A.0
1108:  BTFSC  78.0
1109:  BSF    2A.0
....................             if(selectmenu > 0){ 
110A:  MOVLW  00
110B:  BTFSC  2A.0
110C:  MOVLW  01
110D:  XORLW  00
110E:  BTFSC  03.2
110F:  GOTO   153
....................                REFERENCE_VALUE = resetcalibrate(); 
1114:  MOVF   79,W
1115:  MOVWF  2E
1116:  MOVF   78,W
1117:  MOVWF  2D
....................                selectmenu = 0; 
1118:  BCF    2A.0
....................                setDisplayPos(1);                      
1119:  MOVLW  01
111A:  MOVWF  67
111B:  BCF    0A.4
111C:  BSF    0A.3
111D:  CALL   7D5
111E:  BSF    0A.4
111F:  BCF    0A.3
....................                displayLongText("RESET CALIBRATE"); 
1120:  CLRF   78
1121:  MOVLW  10
1122:  MOVWF  77
1123:  MOVLW  45
1124:  MOVWF  04
1125:  BCF    03.7
1126:  MOVF   78,W
1127:  BCF    0A.4
1128:  CALL   088
1129:  BSF    0A.4
112A:  MOVWF  00
112B:  INCF   78,F
112C:  INCF   04,F
112D:  DECFSZ 77,F
112E:  GOTO   126
112F:  CLRF   6A
1130:  MOVLW  45
1131:  MOVWF  69
1132:  CALL   000
....................                setDisplayPos(18);                      
1133:  MOVLW  12
1134:  MOVWF  67
1135:  BCF    0A.4
1136:  BSF    0A.3
1137:  CALL   7D5
1138:  BSF    0A.4
1139:  BCF    0A.3
....................                displayLongText("OK !!!"); 
113A:  CLRF   78
113B:  MOVLW  07
113C:  MOVWF  77
113D:  MOVLW  45
113E:  MOVWF  04
113F:  BCF    03.7
1140:  MOVF   78,W
1141:  BCF    0A.4
1142:  CALL   09C
1143:  BSF    0A.4
1144:  MOVWF  00
1145:  INCF   78,F
1146:  INCF   04,F
1147:  DECFSZ 77,F
1148:  GOTO   140
1149:  CLRF   6A
114A:  MOVLW  45
114B:  MOVWF  69
114C:  CALL   000
....................                delay_ms(200); 
114D:  MOVLW  C8
114E:  MOVWF  67
114F:  BCF    0A.4
1150:  CALL   177
1151:  BSF    0A.4
....................             } 
....................             else{ 
1152:  GOTO   199
....................                menu = checkleft(menu); 
1153:  MOVF   29,W
1154:  MOVWF  67
1155:  BCF    0A.4
1156:  BSF    0A.3
1157:  CALL   7BB
1158:  BSF    0A.4
1159:  BCF    0A.3
115A:  MOVF   78,W
115B:  MOVWF  29
....................                menu = checkright(menu); 
115C:  MOVF   29,W
115D:  MOVWF  67
115E:  BCF    0A.4
115F:  BSF    0A.3
1160:  CALL   7C8
1161:  BSF    0A.4
1162:  BCF    0A.3
1163:  MOVF   78,W
1164:  MOVWF  29
....................                setDisplayPos(1);                      
1165:  MOVLW  01
1166:  MOVWF  67
1167:  BCF    0A.4
1168:  BSF    0A.3
1169:  CALL   7D5
116A:  BSF    0A.4
116B:  BCF    0A.3
....................                displayLongText("RESET CALIBRATE"); 
116C:  CLRF   78
116D:  MOVLW  10
116E:  MOVWF  77
116F:  MOVLW  55
1170:  MOVWF  04
1171:  BCF    03.7
1172:  MOVF   78,W
1173:  BCF    0A.4
1174:  CALL   088
1175:  BSF    0A.4
1176:  MOVWF  00
1177:  INCF   78,F
1178:  INCF   04,F
1179:  DECFSZ 77,F
117A:  GOTO   172
117B:  CLRF   6A
117C:  MOVLW  55
117D:  MOVWF  69
117E:  CALL   000
....................                setDisplayPos(18);                      
117F:  MOVLW  12
1180:  MOVWF  67
1181:  BCF    0A.4
1182:  BSF    0A.3
1183:  CALL   7D5
1184:  BSF    0A.4
1185:  BCF    0A.3
....................                displayLongText("This Tool !!!"); 
1186:  CLRF   78
1187:  MOVLW  0E
1188:  MOVWF  77
1189:  MOVLW  55
118A:  MOVWF  04
118B:  BCF    03.7
118C:  MOVF   78,W
118D:  BCF    0A.4
118E:  CALL   0A7
118F:  BSF    0A.4
1190:  MOVWF  00
1191:  INCF   78,F
1192:  INCF   04,F
1193:  DECFSZ 77,F
1194:  GOTO   18C
1195:  CLRF   6A
1196:  MOVLW  55
1197:  MOVWF  69
1198:  CALL   000
....................              
....................             } 
....................     
....................  
.................... } 
1199:  BCF    0A.3
119A:  BSF    0A.4
119B:  GOTO   529 (RETURN)
....................  
....................  
.................... ///////////////// 
.................... //Menu Function 
.................... //////////////// 
....................  
....................  
....................  
.................... ///////////////// 
.................... //Calibrate Function 
.................... //////////////// 
....................  
.................... int16 calibrate(int16 analog){ 
....................    return analog; //You could use this function when there's no input electric device. 
1071:  MOVF   67,W
1072:  MOVWF  78
1073:  MOVF   68,W
1074:  MOVWF  79
....................  
....................  
.................... } 
.................... int16 resetcalibrate(){ 
....................    return 525;   //return old reference. 
1110:  MOVLW  0D
1111:  MOVWF  78
1112:  MOVLW  02
1113:  MOVWF  79
....................  
.................... } 
.................... ///////////////// 
.................... //Calibrate Function 
.................... //////////////// 
....................  
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
.................... int1 checkselect(int1 menu){ 
....................         
....................       if(selectUsed==0 && selectPush==1){ 
0FF3:  BTFSC  28.1
0FF4:  GOTO   7FD
0FF5:  BTFSS  28.0
0FF6:  GOTO   7FD
....................          selectUsed=1; 
0FF7:  BSF    28.1
....................          menu+=1; 
0FF8:  MOVLW  01
0FF9:  ADDWF  68,F
....................          clearDisplay(); 
0FFA:  BCF    0A.3
0FFB:  CALL   7EA
0FFC:  BSF    0A.3
....................        } 
....................     
....................        return menu; 
0FFD:  MOVF   68,W
0FFE:  MOVWF  78
.................... } 
0FFF:  RETURN
....................  
.................... int1 checkexit(int1 menu){ 
....................         
....................        if(exitUsed==0 && exitPush==1){ 
....................          exitUsed=1; 
....................          menu=1; 
....................          clearDisplay(); 
....................        } 
....................        else{ 
....................          menu=0; 
....................         
....................        } 
....................        return menu; 
.................... } 
....................  
.................... int checkleft(int menu){ 
....................         
....................        if(leftUsed==0 && leftPush==1){ 
0FBB:  BTFSC  28.5
0FBC:  GOTO   7C5
0FBD:  BTFSS  28.4
0FBE:  GOTO   7C5
....................          leftUsed=1; 
0FBF:  BSF    28.5
....................          menu-=1; 
0FC0:  MOVLW  01
0FC1:  SUBWF  67,F
....................          clearDisplay(); 
0FC2:  BCF    0A.3
0FC3:  CALL   7EA
0FC4:  BSF    0A.3
....................        } 
....................         
....................        return menu; 
0FC5:  MOVF   67,W
0FC6:  MOVWF  78
.................... } 
0FC7:  RETURN
....................  
.................... int checkright(int menu){ 
....................         
....................        if(rightUsed==0 && rightPush==1){ 
0FC8:  BTFSC  28.7
0FC9:  GOTO   7D2
0FCA:  BTFSS  28.6
0FCB:  GOTO   7D2
....................          rightUsed=1; 
0FCC:  BSF    28.7
....................          menu+=1; 
0FCD:  MOVLW  01
0FCE:  ADDWF  67,F
....................          clearDisplay(); 
0FCF:  BCF    0A.3
0FD0:  CALL   7EA
0FD1:  BSF    0A.3
....................        } 
....................         
....................        return menu; 
0FD2:  MOVF   67,W
0FD3:  MOVWF  78
.................... } 
0FD4:  RETURN
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void displayLongText(char* text) { 
....................  
.................... int i ; 
.................... i2c_start(); 
1000:  BSF    03.5
1001:  BSF    11.0
1002:  BTFSC  11.0
1003:  GOTO   002
.................... i2c_write(DISPLAY_ADDRESS); 
1004:  MOVLW  B4
1005:  BCF    03.5
1006:  MOVWF  6D
1007:  BCF    0A.4
1008:  CALL   7DA
1009:  BSF    0A.4
.................... i2c_write(DISPLAY_CMD_SEND_LONG_TEXT); 
100A:  MOVLW  05
100B:  MOVWF  6D
100C:  BCF    0A.4
100D:  CALL   7DA
100E:  BSF    0A.4
....................  
.................... for(i=0;text[i]!='\0';i++) 
100F:  CLRF   6B
1010:  MOVF   6B,W
1011:  ADDWF  69,W
1012:  MOVWF  04
1013:  BCF    03.7
1014:  BTFSC  6A.0
1015:  BSF    03.7
1016:  MOVF   00,F
1017:  BTFSC  03.2
1018:  GOTO   027
.................... { 
.................... i2c_write(text[i]); 
1019:  MOVF   6B,W
101A:  ADDWF  69,W
101B:  MOVWF  04
101C:  BCF    03.7
101D:  BTFSC  6A.0
101E:  BSF    03.7
101F:  MOVF   00,W
1020:  MOVWF  6C
1021:  MOVWF  6D
1022:  BCF    0A.4
1023:  CALL   7DA
1024:  BSF    0A.4
....................  
.................... } 
1025:  INCF   6B,F
1026:  GOTO   010
.................... i2c_write('\0'); 
1027:  CLRF   6D
1028:  BCF    0A.4
1029:  CALL   7DA
102A:  BSF    0A.4
.................... i2c_stop(); 
102B:  BSF    03.5
102C:  BSF    11.2
102D:  BTFSC  11.2
102E:  GOTO   02D
....................  
.................... //delay_ms(100); 
....................  
.................... } 
102F:  BCF    03.5
1030:  RETURN
....................  
....................  
.................... void displayValue(int16 value[]) { 
....................  
....................    i2c_start(); 
1031:  BSF    03.5
1032:  BSF    11.0
1033:  BTFSC  11.0
1034:  GOTO   033
....................    i2c_write(DISPLAY_ADDRESS); 
1035:  MOVLW  B4
1036:  BCF    03.5
1037:  MOVWF  6D
1038:  BCF    0A.4
1039:  CALL   7DA
103A:  BSF    0A.4
....................    i2c_write(DISPLAY_CMD_SEND_VALUE); 
103B:  MOVLW  02
103C:  MOVWF  6D
103D:  BCF    0A.4
103E:  CALL   7DA
103F:  BSF    0A.4
....................    i2c_write((int)(value>>8)); // high byte 
1040:  MOVF   46,W
1041:  CLRF   7A
1042:  MOVWF  47
1043:  MOVWF  6D
1044:  BCF    0A.4
1045:  CALL   7DA
1046:  BSF    0A.4
....................    i2c_write((int)(value & 0xFF)); // low byte 
1047:  MOVF   45,W
1048:  MOVWF  77
1049:  CLRF   7A
104A:  MOVF   45,W
104B:  MOVWF  47
104C:  MOVWF  6D
104D:  BCF    0A.4
104E:  CALL   7DA
104F:  BSF    0A.4
....................    i2c_write('\0'); 
1050:  CLRF   6D
1051:  BCF    0A.4
1052:  CALL   7DA
1053:  BSF    0A.4
....................    i2c_stop(); 
1054:  BSF    03.5
1055:  BSF    11.2
1056:  BTFSC  11.2
1057:  GOTO   056
....................     
.................... } 
1058:  BCF    03.5
1059:  RETURN
....................  
.................... void clearDisplay(){ 
....................  
....................    i2c_start(); 
07EA:  BSF    03.5
07EB:  BSF    11.0
07EC:  BTFSC  11.0
07ED:  GOTO   7EC
....................    i2c_write(DISPLAY_ADDRESS); 
07EE:  MOVLW  B4
07EF:  BCF    03.5
07F0:  MOVWF  6D
07F1:  CALL   7DA
....................    i2c_write(DISPLAY_CMD_CLS); 
07F2:  MOVLW  06
07F3:  MOVWF  6D
07F4:  CALL   7DA
....................    i2c_stop(); 
07F5:  BSF    03.5
07F6:  BSF    11.2
07F7:  BTFSC  11.2
07F8:  GOTO   7F7
.................... } 
07F9:  BCF    03.5
07FA:  RETURN
....................  
.................... void setDisplayPos(int pos){ 
....................    i2c_start(); 
0FD5:  BSF    03.5
0FD6:  BSF    11.0
0FD7:  BTFSC  11.0
0FD8:  GOTO   7D7
....................    i2c_write(DISPLAY_ADDRESS); 
0FD9:  MOVLW  B4
0FDA:  BCF    03.5
0FDB:  MOVWF  6D
0FDC:  BCF    0A.3
0FDD:  CALL   7DA
0FDE:  BSF    0A.3
....................    i2c_write(DISPLAY_CMD_SETPOS); 
0FDF:  MOVLW  08
0FE0:  MOVWF  6D
0FE1:  BCF    0A.3
0FE2:  CALL   7DA
0FE3:  BSF    0A.3
....................    i2c_write(pos); 
0FE4:  MOVF   67,W
0FE5:  MOVWF  6D
0FE6:  BCF    0A.3
0FE7:  CALL   7DA
0FE8:  BSF    0A.3
....................    i2c_write('\0'); 
0FE9:  CLRF   6D
0FEA:  BCF    0A.3
0FEB:  CALL   7DA
0FEC:  BSF    0A.3
....................    i2c_stop(); 
0FED:  BSF    03.5
0FEE:  BSF    11.2
0FEF:  BTFSC  11.2
0FF0:  GOTO   7EF
.................... } 
0FF1:  BCF    03.5
0FF2:  RETURN
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 

Configuration Fuses:
   Word  1: 2FC2   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
