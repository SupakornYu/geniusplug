CCS PCM C Compiler, Version 4.141, 64203               05-¡.¾.-14 03:29

               Filename:   C:\Users\pump\Documents\geniusplug\GeniusPlugPIC\Microcontroller\project1.lst

               ROM used:   5628 words (69%)
                           Largest free fragment is 2048
               RAM used:   43 (12%) at main() level
                           211 (57%) worst case
               Stack:     6 worst case (5 in main + 1 for interrupts)

0000:  MOVLW  12
0001:  MOVWF  0A
0002:  GOTO   2BE
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   032
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.0
001E:  GOTO   021
001F:  BTFSC  0C.0
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   0FE
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   14D
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
*
*
*
.................... #list 
....................  
.................... #device adc=10  // use 10-bit ADC 
.................... #device PASS_STRINGS=IN_RAM 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
04FF:  BSF    03.5
0500:  BCF    4F.0
....................    y = x; 
0501:  MOVF   43,W
0502:  MOVWF  48
0503:  MOVF   42,W
0504:  MOVWF  47
0505:  MOVF   41,W
0506:  MOVWF  46
0507:  MOVF   40,W
0508:  MOVWF  45
....................  
....................    if (x < 0) 
0509:  MOVF   43,W
050A:  MOVWF  53
050B:  MOVF   42,W
050C:  MOVWF  52
050D:  MOVF   41,W
050E:  MOVWF  51
050F:  MOVF   40,W
0510:  MOVWF  50
0511:  CLRF   57
0512:  CLRF   56
0513:  CLRF   55
0514:  CLRF   54
0515:  BCF    03.5
0516:  CALL   214
0517:  BTFSS  03.0
0518:  GOTO   51F
....................    { 
....................       s = 1; 
0519:  BSF    03.5
051A:  BSF    4F.0
....................       y = -y; 
051B:  MOVF   46,W
051C:  XORLW  80
051D:  MOVWF  46
051E:  BCF    03.5
....................    } 
....................  
....................    if (y <= 32768.0) 
051F:  BSF    03.5
0520:  MOVF   48,W
0521:  MOVWF  53
0522:  MOVF   47,W
0523:  MOVWF  52
0524:  MOVF   46,W
0525:  MOVWF  51
0526:  MOVF   45,W
0527:  MOVWF  50
0528:  CLRF   57
0529:  CLRF   56
052A:  CLRF   55
052B:  MOVLW  8E
052C:  MOVWF  54
052D:  BCF    03.5
052E:  CALL   214
052F:  BTFSC  03.0
0530:  GOTO   533
0531:  BTFSS  03.2
0532:  GOTO   550
....................       res = (float32)(unsigned int16)y; 
0533:  BSF    03.5
0534:  MOVF   48,W
0535:  MOVWF  53
0536:  MOVF   47,W
0537:  MOVWF  52
0538:  MOVF   46,W
0539:  MOVWF  51
053A:  MOVF   45,W
053B:  MOVWF  50
053C:  BCF    03.5
053D:  CALL   321
053E:  MOVF   79,W
053F:  BSF    03.5
0540:  MOVWF  55
0541:  MOVF   78,W
0542:  MOVWF  54
0543:  BCF    03.5
0544:  CALL   15D
0545:  MOVF   7A,W
0546:  BSF    03.5
0547:  MOVWF  4C
0548:  MOVF   79,W
0549:  MOVWF  4B
054A:  MOVF   78,W
054B:  MOVWF  4A
054C:  MOVF   77,W
054D:  MOVWF  49
....................  
....................  else if (y < 10000000.0) 
054E:  GOTO   628
054F:  BCF    03.5
0550:  BSF    03.5
0551:  MOVF   48,W
0552:  MOVWF  53
0553:  MOVF   47,W
0554:  MOVWF  52
0555:  MOVF   46,W
0556:  MOVWF  51
0557:  MOVF   45,W
0558:  MOVWF  50
0559:  MOVLW  80
055A:  MOVWF  57
055B:  MOVLW  96
055C:  MOVWF  56
055D:  MOVLW  18
055E:  MOVWF  55
055F:  MOVLW  96
0560:  MOVWF  54
0561:  BCF    03.5
0562:  CALL   214
0563:  BTFSS  03.0
0564:  GOTO   61F
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
0565:  BSF    03.5
0566:  MOVF   48,W
0567:  MOVWF  53
0568:  MOVF   47,W
0569:  MOVWF  52
056A:  MOVF   46,W
056B:  MOVWF  51
056C:  MOVF   45,W
056D:  MOVWF  50
056E:  CLRF   57
056F:  CLRF   56
0570:  CLRF   55
0571:  MOVLW  70
0572:  MOVWF  54
0573:  BCF    03.5
0574:  CALL   342
0575:  MOVF   7A,W
0576:  BSF    03.5
0577:  MOVWF  53
0578:  MOVF   79,W
0579:  MOVWF  52
057A:  MOVF   78,W
057B:  MOVWF  51
057C:  MOVF   77,W
057D:  MOVWF  50
057E:  BCF    03.5
057F:  CALL   321
0580:  MOVF   79,W
0581:  BSF    03.5
0582:  MOVWF  4E
0583:  MOVF   78,W
0584:  MOVWF  4D
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
0585:  MOVF   48,W
0586:  MOVWF  53
0587:  MOVF   47,W
0588:  MOVWF  52
0589:  MOVF   46,W
058A:  MOVWF  51
058B:  MOVF   45,W
058C:  MOVWF  50
058D:  CLRF   57
058E:  CLRF   56
058F:  CLRF   55
0590:  MOVLW  70
0591:  MOVWF  54
0592:  BCF    03.5
0593:  CALL   342
0594:  MOVF   7A,W
0595:  BSF    03.5
0596:  MOVWF  53
0597:  MOVF   79,W
0598:  MOVWF  52
0599:  MOVF   78,W
059A:  MOVWF  51
059B:  MOVF   77,W
059C:  MOVWF  50
059D:  MOVF   4E,W
059E:  MOVWF  55
059F:  MOVF   4D,W
05A0:  MOVWF  54
05A1:  BCF    03.5
05A2:  CALL   15D
05A3:  BSF    03.1
05A4:  BSF    03.5
05A5:  MOVF   53,W
05A6:  MOVWF  57
05A7:  MOVF   52,W
05A8:  MOVWF  56
05A9:  MOVF   51,W
05AA:  MOVWF  55
05AB:  MOVF   50,W
05AC:  MOVWF  54
05AD:  MOVF   7A,W
05AE:  MOVWF  5B
05AF:  MOVF   79,W
05B0:  MOVWF  5A
05B1:  MOVF   78,W
05B2:  MOVWF  59
05B3:  MOVF   77,W
05B4:  MOVWF  58
05B5:  BCF    03.5
05B6:  CALL   3B9
05B7:  BSF    03.5
05B8:  CLRF   53
05B9:  CLRF   52
05BA:  CLRF   51
05BB:  MOVLW  8E
05BC:  MOVWF  50
05BD:  MOVF   7A,W
05BE:  MOVWF  57
05BF:  MOVF   79,W
05C0:  MOVWF  56
05C1:  MOVF   78,W
05C2:  MOVWF  55
05C3:  MOVF   77,W
05C4:  MOVWF  54
05C5:  BCF    03.5
05C6:  CALL   342
05C7:  MOVF   7A,W
05C8:  BSF    03.5
05C9:  MOVWF  48
05CA:  MOVF   79,W
05CB:  MOVWF  47
05CC:  MOVF   78,W
05CD:  MOVWF  46
05CE:  MOVF   77,W
05CF:  MOVWF  45
....................       res = 32768.0*(float32)l; 
05D0:  MOVF   4E,W
05D1:  MOVWF  55
05D2:  MOVF   4D,W
05D3:  MOVWF  54
05D4:  BCF    03.5
05D5:  CALL   15D
05D6:  BSF    03.5
05D7:  CLRF   53
05D8:  CLRF   52
05D9:  CLRF   51
05DA:  MOVLW  8E
05DB:  MOVWF  50
05DC:  MOVF   7A,W
05DD:  MOVWF  57
05DE:  MOVF   79,W
05DF:  MOVWF  56
05E0:  MOVF   78,W
05E1:  MOVWF  55
05E2:  MOVF   77,W
05E3:  MOVWF  54
05E4:  BCF    03.5
05E5:  CALL   342
05E6:  MOVF   7A,W
05E7:  BSF    03.5
05E8:  MOVWF  4C
05E9:  MOVF   79,W
05EA:  MOVWF  4B
05EB:  MOVF   78,W
05EC:  MOVWF  4A
05ED:  MOVF   77,W
05EE:  MOVWF  49
....................       res += (float32)(unsigned int16)y; 
05EF:  MOVF   48,W
05F0:  MOVWF  53
05F1:  MOVF   47,W
05F2:  MOVWF  52
05F3:  MOVF   46,W
05F4:  MOVWF  51
05F5:  MOVF   45,W
05F6:  MOVWF  50
05F7:  BCF    03.5
05F8:  CALL   321
05F9:  MOVF   79,W
05FA:  BSF    03.5
05FB:  MOVWF  55
05FC:  MOVF   78,W
05FD:  MOVWF  54
05FE:  BCF    03.5
05FF:  CALL   15D
0600:  BCF    03.1
0601:  BSF    03.5
0602:  MOVF   4C,W
0603:  MOVWF  57
0604:  MOVF   4B,W
0605:  MOVWF  56
0606:  MOVF   4A,W
0607:  MOVWF  55
0608:  MOVF   49,W
0609:  MOVWF  54
060A:  MOVF   7A,W
060B:  MOVWF  5B
060C:  MOVF   79,W
060D:  MOVWF  5A
060E:  MOVF   78,W
060F:  MOVWF  59
0610:  MOVF   77,W
0611:  MOVWF  58
0612:  BCF    03.5
0613:  CALL   3B9
0614:  MOVF   7A,W
0615:  BSF    03.5
0616:  MOVWF  4C
0617:  MOVF   79,W
0618:  MOVWF  4B
0619:  MOVF   78,W
061A:  MOVWF  4A
061B:  MOVF   77,W
061C:  MOVWF  49
....................    } 
....................  
....................  else 
061D:  GOTO   628
061E:  BCF    03.5
....................   res = y; 
061F:  BSF    03.5
0620:  MOVF   48,W
0621:  MOVWF  4C
0622:  MOVF   47,W
0623:  MOVWF  4B
0624:  MOVF   46,W
0625:  MOVWF  4A
0626:  MOVF   45,W
0627:  MOVWF  49
....................  
....................  y = y - (float32)(unsigned int16)y; 
0628:  MOVF   48,W
0629:  MOVWF  53
062A:  MOVF   47,W
062B:  MOVWF  52
062C:  MOVF   46,W
062D:  MOVWF  51
062E:  MOVF   45,W
062F:  MOVWF  50
0630:  BCF    03.5
0631:  CALL   321
0632:  MOVF   79,W
0633:  BSF    03.5
0634:  MOVWF  55
0635:  MOVF   78,W
0636:  MOVWF  54
0637:  BCF    03.5
0638:  CALL   15D
0639:  BSF    03.1
063A:  BSF    03.5
063B:  MOVF   48,W
063C:  MOVWF  57
063D:  MOVF   47,W
063E:  MOVWF  56
063F:  MOVF   46,W
0640:  MOVWF  55
0641:  MOVF   45,W
0642:  MOVWF  54
0643:  MOVF   7A,W
0644:  MOVWF  5B
0645:  MOVF   79,W
0646:  MOVWF  5A
0647:  MOVF   78,W
0648:  MOVWF  59
0649:  MOVF   77,W
064A:  MOVWF  58
064B:  BCF    03.5
064C:  CALL   3B9
064D:  MOVF   7A,W
064E:  BSF    03.5
064F:  MOVWF  48
0650:  MOVF   79,W
0651:  MOVWF  47
0652:  MOVF   78,W
0653:  MOVWF  46
0654:  MOVF   77,W
0655:  MOVWF  45
....................  
....................  if (s) 
0656:  BTFSS  4F.0
0657:  GOTO   65B
....................   res = -res; 
0658:  MOVF   4A,W
0659:  XORLW  80
065A:  MOVWF  4A
....................  
....................  if (y != 0) 
065B:  MOVF   48,W
065C:  MOVWF  53
065D:  MOVF   47,W
065E:  MOVWF  52
065F:  MOVF   46,W
0660:  MOVWF  51
0661:  MOVF   45,W
0662:  MOVWF  50
0663:  CLRF   57
0664:  CLRF   56
0665:  CLRF   55
0666:  CLRF   54
0667:  BCF    03.5
0668:  CALL   214
0669:  BTFSC  03.2
066A:  GOTO   6A8
....................  { 
....................   if (s == 1 && n == 0) 
066B:  BSF    03.5
066C:  BTFSS  4F.0
066D:  GOTO   68A
066E:  MOVF   44,F
066F:  BTFSS  03.2
0670:  GOTO   68A
....................    res -= 1.0; 
0671:  BSF    03.1
0672:  MOVF   4C,W
0673:  MOVWF  57
0674:  MOVF   4B,W
0675:  MOVWF  56
0676:  MOVF   4A,W
0677:  MOVWF  55
0678:  MOVF   49,W
0679:  MOVWF  54
067A:  CLRF   5B
067B:  CLRF   5A
067C:  CLRF   59
067D:  MOVLW  7F
067E:  MOVWF  58
067F:  BCF    03.5
0680:  CALL   3B9
0681:  MOVF   7A,W
0682:  BSF    03.5
0683:  MOVWF  4C
0684:  MOVF   79,W
0685:  MOVWF  4B
0686:  MOVF   78,W
0687:  MOVWF  4A
0688:  MOVF   77,W
0689:  MOVWF  49
....................  
....................   if (s == 0 && n == 1) 
068A:  BTFSC  4F.0
068B:  GOTO   6A7
068C:  DECFSZ 44,W
068D:  GOTO   6A7
....................    res += 1.0; 
068E:  BCF    03.1
068F:  MOVF   4C,W
0690:  MOVWF  57
0691:  MOVF   4B,W
0692:  MOVWF  56
0693:  MOVF   4A,W
0694:  MOVWF  55
0695:  MOVF   49,W
0696:  MOVWF  54
0697:  CLRF   5B
0698:  CLRF   5A
0699:  CLRF   59
069A:  MOVLW  7F
069B:  MOVWF  58
069C:  BCF    03.5
069D:  CALL   3B9
069E:  MOVF   7A,W
069F:  BSF    03.5
06A0:  MOVWF  4C
06A1:  MOVF   79,W
06A2:  MOVWF  4B
06A3:  MOVF   78,W
06A4:  MOVWF  4A
06A5:  MOVF   77,W
06A6:  MOVWF  49
06A7:  BCF    03.5
....................  } 
....................  if (x == 0) 
06A8:  BSF    03.5
06A9:  MOVF   43,W
06AA:  MOVWF  53
06AB:  MOVF   42,W
06AC:  MOVWF  52
06AD:  MOVF   41,W
06AE:  MOVWF  51
06AF:  MOVF   40,W
06B0:  MOVWF  50
06B1:  CLRF   57
06B2:  CLRF   56
06B3:  CLRF   55
06B4:  CLRF   54
06B5:  BCF    03.5
06B6:  CALL   214
06B7:  BTFSS  03.2
06B8:  GOTO   6BF
....................     res = 0; 
06B9:  BSF    03.5
06BA:  CLRF   4C
06BB:  CLRF   4B
06BC:  CLRF   4A
06BD:  CLRF   49
06BE:  BCF    03.5
....................  
....................  return (res); 
06BF:  BSF    03.5
06C0:  MOVF   49,W
06C1:  MOVWF  77
06C2:  MOVF   4A,W
06C3:  MOVWF  78
06C4:  MOVF   4B,W
06C5:  MOVWF  79
06C6:  MOVF   4C,W
06C7:  MOVWF  7A
.................... } 
06C8:  BCF    03.5
06C9:  RETURN
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
075C:  MOVF   3F,W
075D:  MOVWF  43
075E:  MOVF   3E,W
075F:  MOVWF  42
0760:  MOVF   3D,W
0761:  MOVWF  41
0762:  MOVF   3C,W
0763:  MOVWF  40
0764:  CLRF   44
0765:  BCF    03.5
0766:  CALL   4FF
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
072B:  MOVF   3F,W
072C:  MOVWF  43
072D:  MOVF   3E,W
072E:  MOVWF  42
072F:  MOVF   3D,W
0730:  MOVWF  41
0731:  MOVF   3C,W
0732:  MOVWF  40
0733:  MOVLW  01
0734:  MOVWF  44
0735:  BCF    03.5
0736:  CALL   4FF
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
06CA:  BSF    03.5
06CB:  MOVF   33,W
06CC:  MOVWF  53
06CD:  MOVF   32,W
06CE:  MOVWF  52
06CF:  MOVF   31,W
06D0:  MOVWF  51
06D1:  MOVF   30,W
06D2:  MOVWF  50
06D3:  CLRF   57
06D4:  CLRF   56
06D5:  CLRF   55
06D6:  CLRF   54
06D7:  BCF    03.5
06D8:  CALL   214
06D9:  BTFSC  03.2
06DA:  GOTO   797
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
06DB:  BSF    03.5
06DC:  MOVF   2F,W
06DD:  MOVWF  4C
06DE:  MOVF   2E,W
06DF:  MOVWF  4B
06E0:  MOVF   2D,W
06E1:  MOVWF  4A
06E2:  MOVF   2C,W
06E3:  MOVWF  49
06E4:  MOVF   33,W
06E5:  MOVWF  50
06E6:  MOVF   32,W
06E7:  MOVWF  4F
06E8:  MOVF   31,W
06E9:  MOVWF  4E
06EA:  MOVF   30,W
06EB:  MOVWF  4D
06EC:  BCF    03.5
06ED:  CALL   255
06EE:  MOVF   7A,W
06EF:  BSF    03.5
06F0:  MOVWF  3B
06F1:  MOVF   79,W
06F2:  MOVWF  3A
06F3:  MOVF   78,W
06F4:  MOVWF  39
06F5:  MOVF   77,W
06F6:  MOVWF  38
06F7:  MOVF   3B,W
06F8:  MOVWF  53
06F9:  MOVF   3A,W
06FA:  MOVWF  52
06FB:  MOVF   39,W
06FC:  MOVWF  51
06FD:  MOVF   38,W
06FE:  MOVWF  50
06FF:  CLRF   57
0700:  CLRF   56
0701:  CLRF   55
0702:  CLRF   54
0703:  BCF    03.5
0704:  CALL   214
0705:  BTFSS  03.0
0706:  GOTO   738
0707:  BSF    03.5
0708:  MOVF   2F,W
0709:  MOVWF  4C
070A:  MOVF   2E,W
070B:  MOVWF  4B
070C:  MOVF   2D,W
070D:  MOVWF  4A
070E:  MOVF   2C,W
070F:  MOVWF  49
0710:  MOVF   33,W
0711:  MOVWF  50
0712:  MOVF   32,W
0713:  MOVWF  4F
0714:  MOVF   31,W
0715:  MOVWF  4E
0716:  MOVF   30,W
0717:  MOVWF  4D
0718:  BCF    03.5
0719:  CALL   255
071A:  MOVF   7A,W
071B:  BSF    03.5
071C:  MOVWF  3B
071D:  MOVF   79,W
071E:  MOVWF  3A
071F:  MOVF   78,W
0720:  MOVWF  39
0721:  MOVF   77,W
0722:  MOVWF  38
0723:  MOVF   3B,W
0724:  MOVWF  3F
0725:  MOVF   3A,W
0726:  MOVWF  3E
0727:  MOVF   39,W
0728:  MOVWF  3D
0729:  MOVF   38,W
072A:  MOVWF  3C
0737:  GOTO   767
0738:  BSF    03.5
0739:  MOVF   2F,W
073A:  MOVWF  4C
073B:  MOVF   2E,W
073C:  MOVWF  4B
073D:  MOVF   2D,W
073E:  MOVWF  4A
073F:  MOVF   2C,W
0740:  MOVWF  49
0741:  MOVF   33,W
0742:  MOVWF  50
0743:  MOVF   32,W
0744:  MOVWF  4F
0745:  MOVF   31,W
0746:  MOVWF  4E
0747:  MOVF   30,W
0748:  MOVWF  4D
0749:  BCF    03.5
074A:  CALL   255
074B:  MOVF   7A,W
074C:  BSF    03.5
074D:  MOVWF  3B
074E:  MOVF   79,W
074F:  MOVWF  3A
0750:  MOVF   78,W
0751:  MOVWF  39
0752:  MOVF   77,W
0753:  MOVWF  38
0754:  MOVF   3B,W
0755:  MOVWF  3F
0756:  MOVF   3A,W
0757:  MOVWF  3E
0758:  MOVF   39,W
0759:  MOVWF  3D
075A:  MOVF   38,W
075B:  MOVWF  3C
0767:  MOVF   7A,W
0768:  BSF    03.5
0769:  MOVWF  37
076A:  MOVF   79,W
076B:  MOVWF  36
076C:  MOVF   78,W
076D:  MOVWF  35
076E:  MOVF   77,W
076F:  MOVWF  34
....................       return(x-(i*y)); 
0770:  MOVF   37,W
0771:  MOVWF  53
0772:  MOVF   36,W
0773:  MOVWF  52
0774:  MOVF   35,W
0775:  MOVWF  51
0776:  MOVF   34,W
0777:  MOVWF  50
0778:  MOVF   33,W
0779:  MOVWF  57
077A:  MOVF   32,W
077B:  MOVWF  56
077C:  MOVF   31,W
077D:  MOVWF  55
077E:  MOVF   30,W
077F:  MOVWF  54
0780:  BCF    03.5
0781:  CALL   342
0782:  BSF    03.1
0783:  BSF    03.5
0784:  MOVF   2F,W
0785:  MOVWF  57
0786:  MOVF   2E,W
0787:  MOVWF  56
0788:  MOVF   2D,W
0789:  MOVWF  55
078A:  MOVF   2C,W
078B:  MOVWF  54
078C:  MOVF   7A,W
078D:  MOVWF  5B
078E:  MOVF   79,W
078F:  MOVWF  5A
0790:  MOVF   78,W
0791:  MOVWF  59
0792:  MOVF   77,W
0793:  MOVWF  58
0794:  BCF    03.5
0795:  CALL   3B9
0796:  GOTO   797
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
0797:  RETURN
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
09EC:  BSF    03.5
09ED:  MOVF   33,W
09EE:  MOVWF  53
09EF:  MOVF   32,W
09F0:  MOVWF  52
09F1:  MOVF   31,W
09F2:  MOVWF  51
09F3:  MOVF   30,W
09F4:  MOVWF  50
09F5:  MOVLW  3B
09F6:  MOVWF  57
09F7:  MOVLW  AA
09F8:  MOVWF  56
09F9:  MOVLW  38
09FA:  MOVWF  55
09FB:  MOVLW  7F
09FC:  MOVWF  54
09FD:  BCF    0A.3
09FE:  BCF    03.5
09FF:  CALL   342
0A00:  BSF    0A.3
0A01:  MOVF   7A,W
0A02:  BSF    03.5
0A03:  MOVWF  53
0A04:  MOVF   79,W
0A05:  MOVWF  52
0A06:  MOVF   78,W
0A07:  MOVWF  51
0A08:  MOVF   77,W
0A09:  MOVWF  50
0A0A:  BCF    0A.3
0A0B:  BCF    03.5
0A0C:  CALL   321
0A0D:  BSF    0A.3
0A0E:  MOVF   78,W
0A0F:  BSF    03.5
0A10:  MOVWF  40
....................    s = 0; 
0A11:  BCF    41.0
....................    y = x; 
0A12:  MOVF   33,W
0A13:  MOVWF  37
0A14:  MOVF   32,W
0A15:  MOVWF  36
0A16:  MOVF   31,W
0A17:  MOVWF  35
0A18:  MOVF   30,W
0A19:  MOVWF  34
....................  
....................    if (x < 0) 
0A1A:  MOVF   33,W
0A1B:  MOVWF  53
0A1C:  MOVF   32,W
0A1D:  MOVWF  52
0A1E:  MOVF   31,W
0A1F:  MOVWF  51
0A20:  MOVF   30,W
0A21:  MOVWF  50
0A22:  CLRF   57
0A23:  CLRF   56
0A24:  CLRF   55
0A25:  CLRF   54
0A26:  BCF    0A.3
0A27:  BCF    03.5
0A28:  CALL   214
0A29:  BSF    0A.3
0A2A:  BTFSS  03.0
0A2B:  GOTO   234
....................    { 
....................       s = 1; 
0A2C:  BSF    03.5
0A2D:  BSF    41.0
....................       n = -n; 
0A2E:  COMF   40,F
0A2F:  INCF   40,F
....................       y = -y; 
0A30:  MOVF   35,W
0A31:  XORLW  80
0A32:  MOVWF  35
0A33:  BCF    03.5
....................    } 
....................  
....................    res = 0.0; 
0A34:  BSF    03.5
0A35:  CLRF   3B
0A36:  CLRF   3A
0A37:  CLRF   39
0A38:  CLRF   38
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
0A39:  CLRF   43
0A3A:  MOVLW  B8
0A3B:  MOVWF  42
0A3C:  MOVF   42,W
0A3D:  MOVWF  04
0A3E:  BCF    03.7
0A3F:  BTFSC  43.0
0A40:  BSF    03.7
0A41:  MOVLW  7F
0A42:  ADDWF  40,W
0A43:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
0A44:  MOVF   37,W
0A45:  MOVWF  53
0A46:  MOVF   36,W
0A47:  MOVWF  52
0A48:  MOVF   35,W
0A49:  MOVWF  51
0A4A:  MOVF   34,W
0A4B:  MOVWF  50
0A4C:  MOVLW  3B
0A4D:  MOVWF  57
0A4E:  MOVLW  AA
0A4F:  MOVWF  56
0A50:  MOVLW  38
0A51:  MOVWF  55
0A52:  MOVLW  7F
0A53:  MOVWF  54
0A54:  BCF    0A.3
0A55:  BCF    03.5
0A56:  CALL   342
0A57:  BSF    0A.3
0A58:  MOVF   7A,W
0A59:  BSF    03.5
0A5A:  MOVWF  45
0A5B:  MOVF   79,W
0A5C:  MOVWF  44
0A5D:  MOVF   78,W
0A5E:  MOVWF  43
0A5F:  MOVF   77,W
0A60:  MOVWF  42
0A61:  CLRF   47
0A62:  MOVF   40,W
0A63:  MOVWF  46
0A64:  BTFSC  46.7
0A65:  DECF   47,F
0A66:  BCF    0A.3
0A67:  BCF    03.5
0A68:  CALL   798
0A69:  BSF    0A.3
0A6A:  BSF    03.1
0A6B:  BSF    03.5
0A6C:  MOVF   45,W
0A6D:  MOVWF  57
0A6E:  MOVF   44,W
0A6F:  MOVWF  56
0A70:  MOVF   43,W
0A71:  MOVWF  55
0A72:  MOVF   42,W
0A73:  MOVWF  54
0A74:  MOVF   7A,W
0A75:  MOVWF  5B
0A76:  MOVF   79,W
0A77:  MOVWF  5A
0A78:  MOVF   78,W
0A79:  MOVWF  59
0A7A:  MOVF   77,W
0A7B:  MOVWF  58
0A7C:  BCF    0A.3
0A7D:  BCF    03.5
0A7E:  CALL   3B9
0A7F:  BSF    0A.3
0A80:  MOVF   7A,W
0A81:  BSF    03.5
0A82:  MOVWF  37
0A83:  MOVF   79,W
0A84:  MOVWF  36
0A85:  MOVF   78,W
0A86:  MOVWF  35
0A87:  MOVF   77,W
0A88:  MOVWF  34
....................  
....................    r = pe[0]*y + pe[1]; 
0A89:  MOVLW  7C
0A8A:  MOVWF  53
0A8B:  MOVLW  88
0A8C:  MOVWF  52
0A8D:  MOVLW  59
0A8E:  MOVWF  51
0A8F:  MOVLW  72
0A90:  MOVWF  50
0A91:  MOVF   37,W
0A92:  MOVWF  57
0A93:  MOVF   36,W
0A94:  MOVWF  56
0A95:  MOVF   35,W
0A96:  MOVWF  55
0A97:  MOVF   34,W
0A98:  MOVWF  54
0A99:  BCF    0A.3
0A9A:  BCF    03.5
0A9B:  CALL   342
0A9C:  BSF    0A.3
0A9D:  MOVF   7A,W
0A9E:  BSF    03.5
0A9F:  MOVWF  45
0AA0:  MOVF   79,W
0AA1:  MOVWF  44
0AA2:  MOVF   78,W
0AA3:  MOVWF  43
0AA4:  MOVF   77,W
0AA5:  MOVWF  42
0AA6:  BCF    03.1
0AA7:  MOVF   45,W
0AA8:  MOVWF  57
0AA9:  MOVF   44,W
0AAA:  MOVWF  56
0AAB:  MOVF   43,W
0AAC:  MOVWF  55
0AAD:  MOVF   42,W
0AAE:  MOVWF  54
0AAF:  MOVLW  E0
0AB0:  MOVWF  5B
0AB1:  MOVLW  97
0AB2:  MOVWF  5A
0AB3:  MOVLW  26
0AB4:  MOVWF  59
0AB5:  MOVLW  75
0AB6:  MOVWF  58
0AB7:  BCF    0A.3
0AB8:  BCF    03.5
0AB9:  CALL   3B9
0ABA:  BSF    0A.3
0ABB:  MOVF   7A,W
0ABC:  BSF    03.5
0ABD:  MOVWF  3F
0ABE:  MOVF   79,W
0ABF:  MOVWF  3E
0AC0:  MOVF   78,W
0AC1:  MOVWF  3D
0AC2:  MOVF   77,W
0AC3:  MOVWF  3C
....................    r = r*y + pe[2]; 
0AC4:  MOVF   3F,W
0AC5:  MOVWF  53
0AC6:  MOVF   3E,W
0AC7:  MOVWF  52
0AC8:  MOVF   3D,W
0AC9:  MOVWF  51
0ACA:  MOVF   3C,W
0ACB:  MOVWF  50
0ACC:  MOVF   37,W
0ACD:  MOVWF  57
0ACE:  MOVF   36,W
0ACF:  MOVWF  56
0AD0:  MOVF   35,W
0AD1:  MOVWF  55
0AD2:  MOVF   34,W
0AD3:  MOVWF  54
0AD4:  BCF    0A.3
0AD5:  BCF    03.5
0AD6:  CALL   342
0AD7:  BSF    0A.3
0AD8:  MOVF   7A,W
0AD9:  BSF    03.5
0ADA:  MOVWF  45
0ADB:  MOVF   79,W
0ADC:  MOVWF  44
0ADD:  MOVF   78,W
0ADE:  MOVWF  43
0ADF:  MOVF   77,W
0AE0:  MOVWF  42
0AE1:  BCF    03.1
0AE2:  MOVF   45,W
0AE3:  MOVWF  57
0AE4:  MOVF   44,W
0AE5:  MOVWF  56
0AE6:  MOVF   43,W
0AE7:  MOVWF  55
0AE8:  MOVF   42,W
0AE9:  MOVWF  54
0AEA:  MOVLW  C4
0AEB:  MOVWF  5B
0AEC:  MOVLW  1D
0AED:  MOVWF  5A
0AEE:  MOVLW  1E
0AEF:  MOVWF  59
0AF0:  MOVLW  78
0AF1:  MOVWF  58
0AF2:  BCF    0A.3
0AF3:  BCF    03.5
0AF4:  CALL   3B9
0AF5:  BSF    0A.3
0AF6:  MOVF   7A,W
0AF7:  BSF    03.5
0AF8:  MOVWF  3F
0AF9:  MOVF   79,W
0AFA:  MOVWF  3E
0AFB:  MOVF   78,W
0AFC:  MOVWF  3D
0AFD:  MOVF   77,W
0AFE:  MOVWF  3C
....................    r = r*y + pe[3]; 
0AFF:  MOVF   3F,W
0B00:  MOVWF  53
0B01:  MOVF   3E,W
0B02:  MOVWF  52
0B03:  MOVF   3D,W
0B04:  MOVWF  51
0B05:  MOVF   3C,W
0B06:  MOVWF  50
0B07:  MOVF   37,W
0B08:  MOVWF  57
0B09:  MOVF   36,W
0B0A:  MOVWF  56
0B0B:  MOVF   35,W
0B0C:  MOVWF  55
0B0D:  MOVF   34,W
0B0E:  MOVWF  54
0B0F:  BCF    0A.3
0B10:  BCF    03.5
0B11:  CALL   342
0B12:  BSF    0A.3
0B13:  MOVF   7A,W
0B14:  BSF    03.5
0B15:  MOVWF  45
0B16:  MOVF   79,W
0B17:  MOVWF  44
0B18:  MOVF   78,W
0B19:  MOVWF  43
0B1A:  MOVF   77,W
0B1B:  MOVWF  42
0B1C:  BCF    03.1
0B1D:  MOVF   45,W
0B1E:  MOVWF  57
0B1F:  MOVF   44,W
0B20:  MOVWF  56
0B21:  MOVF   43,W
0B22:  MOVWF  55
0B23:  MOVF   42,W
0B24:  MOVWF  54
0B25:  MOVLW  5E
0B26:  MOVWF  5B
0B27:  MOVLW  50
0B28:  MOVWF  5A
0B29:  MOVLW  63
0B2A:  MOVWF  59
0B2B:  MOVLW  7A
0B2C:  MOVWF  58
0B2D:  BCF    0A.3
0B2E:  BCF    03.5
0B2F:  CALL   3B9
0B30:  BSF    0A.3
0B31:  MOVF   7A,W
0B32:  BSF    03.5
0B33:  MOVWF  3F
0B34:  MOVF   79,W
0B35:  MOVWF  3E
0B36:  MOVF   78,W
0B37:  MOVWF  3D
0B38:  MOVF   77,W
0B39:  MOVWF  3C
....................    r = r*y + pe[4]; 
0B3A:  MOVF   3F,W
0B3B:  MOVWF  53
0B3C:  MOVF   3E,W
0B3D:  MOVWF  52
0B3E:  MOVF   3D,W
0B3F:  MOVWF  51
0B40:  MOVF   3C,W
0B41:  MOVWF  50
0B42:  MOVF   37,W
0B43:  MOVWF  57
0B44:  MOVF   36,W
0B45:  MOVWF  56
0B46:  MOVF   35,W
0B47:  MOVWF  55
0B48:  MOVF   34,W
0B49:  MOVWF  54
0B4A:  BCF    0A.3
0B4B:  BCF    03.5
0B4C:  CALL   342
0B4D:  BSF    0A.3
0B4E:  MOVF   7A,W
0B4F:  BSF    03.5
0B50:  MOVWF  45
0B51:  MOVF   79,W
0B52:  MOVWF  44
0B53:  MOVF   78,W
0B54:  MOVWF  43
0B55:  MOVF   77,W
0B56:  MOVWF  42
0B57:  BCF    03.1
0B58:  MOVF   45,W
0B59:  MOVWF  57
0B5A:  MOVF   44,W
0B5B:  MOVWF  56
0B5C:  MOVF   43,W
0B5D:  MOVWF  55
0B5E:  MOVF   42,W
0B5F:  MOVWF  54
0B60:  MOVLW  1A
0B61:  MOVWF  5B
0B62:  MOVLW  FE
0B63:  MOVWF  5A
0B64:  MOVLW  75
0B65:  MOVWF  59
0B66:  MOVLW  7C
0B67:  MOVWF  58
0B68:  BCF    0A.3
0B69:  BCF    03.5
0B6A:  CALL   3B9
0B6B:  BSF    0A.3
0B6C:  MOVF   7A,W
0B6D:  BSF    03.5
0B6E:  MOVWF  3F
0B6F:  MOVF   79,W
0B70:  MOVWF  3E
0B71:  MOVF   78,W
0B72:  MOVWF  3D
0B73:  MOVF   77,W
0B74:  MOVWF  3C
....................    r = r*y + pe[5]; 
0B75:  MOVF   3F,W
0B76:  MOVWF  53
0B77:  MOVF   3E,W
0B78:  MOVWF  52
0B79:  MOVF   3D,W
0B7A:  MOVWF  51
0B7B:  MOVF   3C,W
0B7C:  MOVWF  50
0B7D:  MOVF   37,W
0B7E:  MOVWF  57
0B7F:  MOVF   36,W
0B80:  MOVWF  56
0B81:  MOVF   35,W
0B82:  MOVWF  55
0B83:  MOVF   34,W
0B84:  MOVWF  54
0B85:  BCF    0A.3
0B86:  BCF    03.5
0B87:  CALL   342
0B88:  BSF    0A.3
0B89:  MOVF   7A,W
0B8A:  BSF    03.5
0B8B:  MOVWF  45
0B8C:  MOVF   79,W
0B8D:  MOVWF  44
0B8E:  MOVF   78,W
0B8F:  MOVWF  43
0B90:  MOVF   77,W
0B91:  MOVWF  42
0B92:  BCF    03.1
0B93:  MOVF   45,W
0B94:  MOVWF  57
0B95:  MOVF   44,W
0B96:  MOVWF  56
0B97:  MOVF   43,W
0B98:  MOVWF  55
0B99:  MOVF   42,W
0B9A:  MOVWF  54
0B9B:  MOVLW  18
0B9C:  MOVWF  5B
0B9D:  MOVLW  72
0B9E:  MOVWF  5A
0B9F:  MOVLW  31
0BA0:  MOVWF  59
0BA1:  MOVLW  7E
0BA2:  MOVWF  58
0BA3:  BCF    0A.3
0BA4:  BCF    03.5
0BA5:  CALL   3B9
0BA6:  BSF    0A.3
0BA7:  MOVF   7A,W
0BA8:  BSF    03.5
0BA9:  MOVWF  3F
0BAA:  MOVF   79,W
0BAB:  MOVWF  3E
0BAC:  MOVF   78,W
0BAD:  MOVWF  3D
0BAE:  MOVF   77,W
0BAF:  MOVWF  3C
....................  
....................    res = res*(1.0 + y*r); 
0BB0:  MOVF   37,W
0BB1:  MOVWF  53
0BB2:  MOVF   36,W
0BB3:  MOVWF  52
0BB4:  MOVF   35,W
0BB5:  MOVWF  51
0BB6:  MOVF   34,W
0BB7:  MOVWF  50
0BB8:  MOVF   3F,W
0BB9:  MOVWF  57
0BBA:  MOVF   3E,W
0BBB:  MOVWF  56
0BBC:  MOVF   3D,W
0BBD:  MOVWF  55
0BBE:  MOVF   3C,W
0BBF:  MOVWF  54
0BC0:  BCF    0A.3
0BC1:  BCF    03.5
0BC2:  CALL   342
0BC3:  BSF    0A.3
0BC4:  BCF    03.1
0BC5:  BSF    03.5
0BC6:  CLRF   57
0BC7:  CLRF   56
0BC8:  CLRF   55
0BC9:  MOVLW  7F
0BCA:  MOVWF  54
0BCB:  MOVF   7A,W
0BCC:  MOVWF  5B
0BCD:  MOVF   79,W
0BCE:  MOVWF  5A
0BCF:  MOVF   78,W
0BD0:  MOVWF  59
0BD1:  MOVF   77,W
0BD2:  MOVWF  58
0BD3:  BCF    0A.3
0BD4:  BCF    03.5
0BD5:  CALL   3B9
0BD6:  BSF    0A.3
0BD7:  BSF    03.5
0BD8:  MOVF   3B,W
0BD9:  MOVWF  53
0BDA:  MOVF   3A,W
0BDB:  MOVWF  52
0BDC:  MOVF   39,W
0BDD:  MOVWF  51
0BDE:  MOVF   38,W
0BDF:  MOVWF  50
0BE0:  MOVF   7A,W
0BE1:  MOVWF  57
0BE2:  MOVF   79,W
0BE3:  MOVWF  56
0BE4:  MOVF   78,W
0BE5:  MOVWF  55
0BE6:  MOVF   77,W
0BE7:  MOVWF  54
0BE8:  BCF    0A.3
0BE9:  BCF    03.5
0BEA:  CALL   342
0BEB:  BSF    0A.3
0BEC:  MOVF   7A,W
0BED:  BSF    03.5
0BEE:  MOVWF  3B
0BEF:  MOVF   79,W
0BF0:  MOVWF  3A
0BF1:  MOVF   78,W
0BF2:  MOVWF  39
0BF3:  MOVF   77,W
0BF4:  MOVWF  38
....................  
....................    if (s) 
0BF5:  BTFSS  41.0
0BF6:  GOTO   411
....................       res = 1.0/res; 
0BF7:  CLRF   4C
0BF8:  CLRF   4B
0BF9:  CLRF   4A
0BFA:  MOVLW  7F
0BFB:  MOVWF  49
0BFC:  MOVF   3B,W
0BFD:  MOVWF  50
0BFE:  MOVF   3A,W
0BFF:  MOVWF  4F
0C00:  MOVF   39,W
0C01:  MOVWF  4E
0C02:  MOVF   38,W
0C03:  MOVWF  4D
0C04:  BCF    0A.3
0C05:  BCF    03.5
0C06:  CALL   255
0C07:  BSF    0A.3
0C08:  MOVF   7A,W
0C09:  BSF    03.5
0C0A:  MOVWF  3B
0C0B:  MOVF   79,W
0C0C:  MOVWF  3A
0C0D:  MOVF   78,W
0C0E:  MOVWF  39
0C0F:  MOVF   77,W
0C10:  MOVWF  38
....................    return(res); 
0C11:  MOVF   38,W
0C12:  MOVWF  77
0C13:  MOVF   39,W
0C14:  MOVWF  78
0C15:  MOVF   3A,W
0C16:  MOVWF  79
0C17:  MOVF   3B,W
0C18:  MOVWF  7A
.................... } 
0C19:  BCF    03.5
0C1A:  RETURN
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
0800:  BSF    03.5
0801:  MOVF   33,W
0802:  MOVWF  37
0803:  MOVF   32,W
0804:  MOVWF  36
0805:  MOVF   31,W
0806:  MOVWF  35
0807:  MOVF   30,W
0808:  MOVWF  34
....................  
....................    if (y != 1.0) 
0809:  MOVF   37,W
080A:  MOVWF  53
080B:  MOVF   36,W
080C:  MOVWF  52
080D:  MOVF   35,W
080E:  MOVWF  51
080F:  MOVF   34,W
0810:  MOVWF  50
0811:  CLRF   57
0812:  CLRF   56
0813:  CLRF   55
0814:  MOVLW  7F
0815:  MOVWF  54
0816:  BCF    0A.3
0817:  BCF    03.5
0818:  CALL   214
0819:  BSF    0A.3
081A:  BTFSC  03.2
081B:  GOTO   1DD
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
081C:  BSF    03.5
081D:  CLRF   46
081E:  MOVLW  B4
081F:  MOVWF  45
0820:  MOVF   45,W
0821:  MOVWF  04
0822:  BCF    03.7
0823:  BTFSC  46.0
0824:  BSF    03.7
0825:  MOVLW  7E
0826:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
0827:  BSF    03.1
0828:  MOVF   37,W
0829:  MOVWF  57
082A:  MOVF   36,W
082B:  MOVWF  56
082C:  MOVF   35,W
082D:  MOVWF  55
082E:  MOVF   34,W
082F:  MOVWF  54
0830:  CLRF   5B
0831:  CLRF   5A
0832:  CLRF   59
0833:  MOVLW  7F
0834:  MOVWF  58
0835:  BCF    0A.3
0836:  BCF    03.5
0837:  CALL   3B9
0838:  BSF    0A.3
0839:  MOVF   7A,W
083A:  BSF    03.5
083B:  MOVWF  48
083C:  MOVF   79,W
083D:  MOVWF  47
083E:  MOVF   78,W
083F:  MOVWF  46
0840:  MOVF   77,W
0841:  MOVWF  45
0842:  BCF    03.1
0843:  MOVF   37,W
0844:  MOVWF  57
0845:  MOVF   36,W
0846:  MOVWF  56
0847:  MOVF   35,W
0848:  MOVWF  55
0849:  MOVF   34,W
084A:  MOVWF  54
084B:  CLRF   5B
084C:  CLRF   5A
084D:  CLRF   59
084E:  MOVLW  7F
084F:  MOVWF  58
0850:  BCF    0A.3
0851:  BCF    03.5
0852:  CALL   3B9
0853:  BSF    0A.3
0854:  BSF    03.5
0855:  MOVF   48,W
0856:  MOVWF  4C
0857:  MOVF   47,W
0858:  MOVWF  4B
0859:  MOVF   46,W
085A:  MOVWF  4A
085B:  MOVF   45,W
085C:  MOVWF  49
085D:  MOVF   7A,W
085E:  MOVWF  50
085F:  MOVF   79,W
0860:  MOVWF  4F
0861:  MOVF   78,W
0862:  MOVWF  4E
0863:  MOVF   77,W
0864:  MOVWF  4D
0865:  BCF    0A.3
0866:  BCF    03.5
0867:  CALL   255
0868:  BSF    0A.3
0869:  MOVF   7A,W
086A:  BSF    03.5
086B:  MOVWF  37
086C:  MOVF   79,W
086D:  MOVWF  36
086E:  MOVF   78,W
086F:  MOVWF  35
0870:  MOVF   77,W
0871:  MOVWF  34
....................  
....................       y2=y*y; 
0872:  MOVF   37,W
0873:  MOVWF  53
0874:  MOVF   36,W
0875:  MOVWF  52
0876:  MOVF   35,W
0877:  MOVWF  51
0878:  MOVF   34,W
0879:  MOVWF  50
087A:  MOVF   37,W
087B:  MOVWF  57
087C:  MOVF   36,W
087D:  MOVWF  56
087E:  MOVF   35,W
087F:  MOVWF  55
0880:  MOVF   34,W
0881:  MOVWF  54
0882:  BCF    0A.3
0883:  BCF    03.5
0884:  CALL   342
0885:  BSF    0A.3
0886:  MOVF   7A,W
0887:  BSF    03.5
0888:  MOVWF  43
0889:  MOVF   79,W
088A:  MOVWF  42
088B:  MOVF   78,W
088C:  MOVWF  41
088D:  MOVF   77,W
088E:  MOVWF  40
....................  
....................       res = pl[0]*y2 + pl[1]; 
088F:  MOVLW  99
0890:  MOVWF  53
0891:  MOVLW  47
0892:  MOVWF  52
0893:  MOVLW  8A
0894:  MOVWF  51
0895:  MOVLW  7F
0896:  MOVWF  50
0897:  MOVF   43,W
0898:  MOVWF  57
0899:  MOVF   42,W
089A:  MOVWF  56
089B:  MOVF   41,W
089C:  MOVWF  55
089D:  MOVF   40,W
089E:  MOVWF  54
089F:  BCF    0A.3
08A0:  BCF    03.5
08A1:  CALL   342
08A2:  BSF    0A.3
08A3:  MOVF   7A,W
08A4:  BSF    03.5
08A5:  MOVWF  48
08A6:  MOVF   79,W
08A7:  MOVWF  47
08A8:  MOVF   78,W
08A9:  MOVWF  46
08AA:  MOVF   77,W
08AB:  MOVWF  45
08AC:  BCF    03.1
08AD:  MOVF   48,W
08AE:  MOVWF  57
08AF:  MOVF   47,W
08B0:  MOVWF  56
08B1:  MOVF   46,W
08B2:  MOVWF  55
08B3:  MOVF   45,W
08B4:  MOVWF  54
08B5:  CLRF   5B
08B6:  CLRF   5A
08B7:  CLRF   59
08B8:  MOVLW  80
08B9:  MOVWF  58
08BA:  BCF    0A.3
08BB:  BCF    03.5
08BC:  CALL   3B9
08BD:  BSF    0A.3
08BE:  MOVF   7A,W
08BF:  BSF    03.5
08C0:  MOVWF  3B
08C1:  MOVF   79,W
08C2:  MOVWF  3A
08C3:  MOVF   78,W
08C4:  MOVWF  39
08C5:  MOVF   77,W
08C6:  MOVWF  38
....................  
....................       r = ql[0]*y2 + ql[1]; 
08C7:  MOVLW  4C
08C8:  MOVWF  53
08C9:  MOVLW  F3
08CA:  MOVWF  52
08CB:  MOVLW  3A
08CC:  MOVWF  51
08CD:  MOVLW  7B
08CE:  MOVWF  50
08CF:  MOVF   43,W
08D0:  MOVWF  57
08D1:  MOVF   42,W
08D2:  MOVWF  56
08D3:  MOVF   41,W
08D4:  MOVWF  55
08D5:  MOVF   40,W
08D6:  MOVWF  54
08D7:  BCF    0A.3
08D8:  BCF    03.5
08D9:  CALL   342
08DA:  BSF    0A.3
08DB:  MOVF   7A,W
08DC:  BSF    03.5
08DD:  MOVWF  48
08DE:  MOVF   79,W
08DF:  MOVWF  47
08E0:  MOVF   78,W
08E1:  MOVWF  46
08E2:  MOVF   77,W
08E3:  MOVWF  45
08E4:  BCF    03.1
08E5:  MOVF   48,W
08E6:  MOVWF  57
08E7:  MOVF   47,W
08E8:  MOVWF  56
08E9:  MOVF   46,W
08EA:  MOVWF  55
08EB:  MOVF   45,W
08EC:  MOVWF  54
08ED:  MOVLW  2B
08EE:  MOVWF  5B
08EF:  MOVLW  9D
08F0:  MOVWF  5A
08F1:  MOVLW  DF
08F2:  MOVWF  59
08F3:  MOVLW  7E
08F4:  MOVWF  58
08F5:  BCF    0A.3
08F6:  BCF    03.5
08F7:  CALL   3B9
08F8:  BSF    0A.3
08F9:  MOVF   7A,W
08FA:  BSF    03.5
08FB:  MOVWF  3F
08FC:  MOVF   79,W
08FD:  MOVWF  3E
08FE:  MOVF   78,W
08FF:  MOVWF  3D
0900:  MOVF   77,W
0901:  MOVWF  3C
....................       r = r*y2 + 1.0; 
0902:  MOVF   3F,W
0903:  MOVWF  53
0904:  MOVF   3E,W
0905:  MOVWF  52
0906:  MOVF   3D,W
0907:  MOVWF  51
0908:  MOVF   3C,W
0909:  MOVWF  50
090A:  MOVF   43,W
090B:  MOVWF  57
090C:  MOVF   42,W
090D:  MOVWF  56
090E:  MOVF   41,W
090F:  MOVWF  55
0910:  MOVF   40,W
0911:  MOVWF  54
0912:  BCF    0A.3
0913:  BCF    03.5
0914:  CALL   342
0915:  BSF    0A.3
0916:  MOVF   7A,W
0917:  BSF    03.5
0918:  MOVWF  48
0919:  MOVF   79,W
091A:  MOVWF  47
091B:  MOVF   78,W
091C:  MOVWF  46
091D:  MOVF   77,W
091E:  MOVWF  45
091F:  BCF    03.1
0920:  MOVF   48,W
0921:  MOVWF  57
0922:  MOVF   47,W
0923:  MOVWF  56
0924:  MOVF   46,W
0925:  MOVWF  55
0926:  MOVF   45,W
0927:  MOVWF  54
0928:  CLRF   5B
0929:  CLRF   5A
092A:  CLRF   59
092B:  MOVLW  7F
092C:  MOVWF  58
092D:  BCF    0A.3
092E:  BCF    03.5
092F:  CALL   3B9
0930:  BSF    0A.3
0931:  MOVF   7A,W
0932:  BSF    03.5
0933:  MOVWF  3F
0934:  MOVF   79,W
0935:  MOVWF  3E
0936:  MOVF   78,W
0937:  MOVWF  3D
0938:  MOVF   77,W
0939:  MOVWF  3C
....................  
....................       res = y*res/r; 
093A:  MOVF   37,W
093B:  MOVWF  53
093C:  MOVF   36,W
093D:  MOVWF  52
093E:  MOVF   35,W
093F:  MOVWF  51
0940:  MOVF   34,W
0941:  MOVWF  50
0942:  MOVF   3B,W
0943:  MOVWF  57
0944:  MOVF   3A,W
0945:  MOVWF  56
0946:  MOVF   39,W
0947:  MOVWF  55
0948:  MOVF   38,W
0949:  MOVWF  54
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  CALL   342
094D:  BSF    0A.3
094E:  MOVF   7A,W
094F:  BSF    03.5
0950:  MOVWF  48
0951:  MOVF   79,W
0952:  MOVWF  47
0953:  MOVF   78,W
0954:  MOVWF  46
0955:  MOVF   77,W
0956:  MOVWF  45
0957:  MOVF   48,W
0958:  MOVWF  4C
0959:  MOVF   47,W
095A:  MOVWF  4B
095B:  MOVF   46,W
095C:  MOVWF  4A
095D:  MOVF   45,W
095E:  MOVWF  49
095F:  MOVF   3F,W
0960:  MOVWF  50
0961:  MOVF   3E,W
0962:  MOVWF  4F
0963:  MOVF   3D,W
0964:  MOVWF  4E
0965:  MOVF   3C,W
0966:  MOVWF  4D
0967:  BCF    0A.3
0968:  BCF    03.5
0969:  CALL   255
096A:  BSF    0A.3
096B:  MOVF   7A,W
096C:  BSF    03.5
096D:  MOVWF  3B
096E:  MOVF   79,W
096F:  MOVWF  3A
0970:  MOVF   78,W
0971:  MOVWF  39
0972:  MOVF   77,W
0973:  MOVWF  38
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
0974:  CLRF   46
0975:  MOVLW  B0
0976:  MOVWF  45
0977:  MOVF   45,W
0978:  MOVWF  04
0979:  BCF    03.7
097A:  BTFSC  46.0
097B:  BSF    03.7
097C:  MOVLW  7E
097D:  SUBWF  00,W
097E:  MOVWF  44
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
097F:  BTFSS  44.7
0980:  GOTO   196
....................          r = -(float32)-n; 
0981:  MOVF   44,W
0982:  SUBLW  00
0983:  CLRF   47
0984:  MOVWF  46
0985:  BTFSC  46.7
0986:  DECF   47,F
0987:  BCF    0A.3
0988:  BCF    03.5
0989:  CALL   798
098A:  BSF    0A.3
098B:  MOVF   77,W
098C:  BSF    03.5
098D:  MOVWF  3C
098E:  MOVF   78,W
098F:  XORLW  80
0990:  MOVWF  3D
0991:  MOVF   79,W
0992:  MOVWF  3E
0993:  MOVF   7A,W
0994:  MOVWF  3F
....................       else 
0995:  GOTO   1A8
....................          r = (float32)n; 
0996:  CLRF   47
0997:  MOVF   44,W
0998:  MOVWF  46
0999:  BTFSC  46.7
099A:  DECF   47,F
099B:  BCF    0A.3
099C:  BCF    03.5
099D:  CALL   798
099E:  BSF    0A.3
099F:  MOVF   7A,W
09A0:  BSF    03.5
09A1:  MOVWF  3F
09A2:  MOVF   79,W
09A3:  MOVWF  3E
09A4:  MOVF   78,W
09A5:  MOVWF  3D
09A6:  MOVF   77,W
09A7:  MOVWF  3C
....................  
....................       res += r*LN2; 
09A8:  MOVF   3F,W
09A9:  MOVWF  53
09AA:  MOVF   3E,W
09AB:  MOVWF  52
09AC:  MOVF   3D,W
09AD:  MOVWF  51
09AE:  MOVF   3C,W
09AF:  MOVWF  50
09B0:  MOVLW  18
09B1:  MOVWF  57
09B2:  MOVLW  72
09B3:  MOVWF  56
09B4:  MOVLW  31
09B5:  MOVWF  55
09B6:  MOVLW  7E
09B7:  MOVWF  54
09B8:  BCF    0A.3
09B9:  BCF    03.5
09BA:  CALL   342
09BB:  BSF    0A.3
09BC:  BCF    03.1
09BD:  BSF    03.5
09BE:  MOVF   3B,W
09BF:  MOVWF  57
09C0:  MOVF   3A,W
09C1:  MOVWF  56
09C2:  MOVF   39,W
09C3:  MOVWF  55
09C4:  MOVF   38,W
09C5:  MOVWF  54
09C6:  MOVF   7A,W
09C7:  MOVWF  5B
09C8:  MOVF   79,W
09C9:  MOVWF  5A
09CA:  MOVF   78,W
09CB:  MOVWF  59
09CC:  MOVF   77,W
09CD:  MOVWF  58
09CE:  BCF    0A.3
09CF:  BCF    03.5
09D0:  CALL   3B9
09D1:  BSF    0A.3
09D2:  MOVF   7A,W
09D3:  BSF    03.5
09D4:  MOVWF  3B
09D5:  MOVF   79,W
09D6:  MOVWF  3A
09D7:  MOVF   78,W
09D8:  MOVWF  39
09D9:  MOVF   77,W
09DA:  MOVWF  38
....................    } 
....................  
....................    else 
09DB:  GOTO   1E2
09DC:  BCF    03.5
....................       res = 0.0; 
09DD:  BSF    03.5
09DE:  CLRF   3B
09DF:  CLRF   3A
09E0:  CLRF   39
09E1:  CLRF   38
....................  
....................    return(res); 
09E2:  MOVF   38,W
09E3:  MOVWF  77
09E4:  MOVF   39,W
09E5:  MOVWF  78
09E6:  MOVF   3A,W
09E7:  MOVWF  79
09E8:  MOVF   3B,W
09E9:  MOVWF  7A
.................... } 
09EA:  BCF    03.5
09EB:  RETURN
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
0C1B:  BSF    03.5
0C1C:  MOVF   27,W
0C1D:  MOVWF  53
0C1E:  MOVF   26,W
0C1F:  MOVWF  52
0C20:  MOVF   25,W
0C21:  MOVWF  51
0C22:  MOVF   24,W
0C23:  MOVWF  50
0C24:  CLRF   57
0C25:  CLRF   56
0C26:  CLRF   55
0C27:  CLRF   54
0C28:  BCF    0A.3
0C29:  BCF    03.5
0C2A:  CALL   214
0C2B:  BSF    0A.3
0C2C:  BTFSS  03.0
0C2D:  GOTO   514
0C2E:  BSF    03.5
0C2F:  MOVF   2B,W
0C30:  MOVWF  2F
0C31:  MOVF   2A,W
0C32:  MOVWF  2E
0C33:  MOVF   29,W
0C34:  MOVWF  2D
0C35:  MOVF   28,W
0C36:  MOVWF  2C
0C37:  CLRF   33
0C38:  CLRF   32
0C39:  CLRF   31
0C3A:  MOVLW  7F
0C3B:  MOVWF  30
0C3C:  BCF    0A.3
0C3D:  BCF    03.5
0C3E:  CALL   6CA
0C3F:  BSF    0A.3
0C40:  MOVF   7A,W
0C41:  BSF    03.5
0C42:  MOVWF  2F
0C43:  MOVF   79,W
0C44:  MOVWF  2E
0C45:  MOVF   78,W
0C46:  MOVWF  2D
0C47:  MOVF   77,W
0C48:  MOVWF  2C
0C49:  MOVF   2F,W
0C4A:  MOVWF  53
0C4B:  MOVF   2E,W
0C4C:  MOVWF  52
0C4D:  MOVF   2D,W
0C4E:  MOVWF  51
0C4F:  MOVF   2C,W
0C50:  MOVWF  50
0C51:  CLRF   57
0C52:  CLRF   56
0C53:  CLRF   55
0C54:  CLRF   54
0C55:  BCF    0A.3
0C56:  BCF    03.5
0C57:  CALL   214
0C58:  BSF    0A.3
0C59:  BTFSS  03.2
0C5A:  GOTO   514
....................       if(fmod(y, 2) == 0) { 
0C5B:  BSF    03.5
0C5C:  MOVF   2B,W
0C5D:  MOVWF  2F
0C5E:  MOVF   2A,W
0C5F:  MOVWF  2E
0C60:  MOVF   29,W
0C61:  MOVWF  2D
0C62:  MOVF   28,W
0C63:  MOVWF  2C
0C64:  CLRF   33
0C65:  CLRF   32
0C66:  CLRF   31
0C67:  MOVLW  80
0C68:  MOVWF  30
0C69:  BCF    0A.3
0C6A:  BCF    03.5
0C6B:  CALL   6CA
0C6C:  BSF    0A.3
0C6D:  MOVF   7A,W
0C6E:  BSF    03.5
0C6F:  MOVWF  2F
0C70:  MOVF   79,W
0C71:  MOVWF  2E
0C72:  MOVF   78,W
0C73:  MOVWF  2D
0C74:  MOVF   77,W
0C75:  MOVWF  2C
0C76:  MOVF   2F,W
0C77:  MOVWF  53
0C78:  MOVF   2E,W
0C79:  MOVWF  52
0C7A:  MOVF   2D,W
0C7B:  MOVWF  51
0C7C:  MOVF   2C,W
0C7D:  MOVWF  50
0C7E:  CLRF   57
0C7F:  CLRF   56
0C80:  CLRF   55
0C81:  CLRF   54
0C82:  BCF    0A.3
0C83:  BCF    03.5
0C84:  CALL   214
0C85:  BSF    0A.3
0C86:  BTFSS  03.2
0C87:  GOTO   4CD
....................          return (exp(log(-x) * y)); 
0C88:  BSF    03.5
0C89:  MOVF   24,W
0C8A:  MOVWF  2C
0C8B:  MOVF   25,W
0C8C:  XORLW  80
0C8D:  MOVWF  2D
0C8E:  MOVF   26,W
0C8F:  MOVWF  2E
0C90:  MOVF   27,W
0C91:  MOVWF  2F
0C92:  MOVWF  33
0C93:  MOVF   2E,W
0C94:  MOVWF  32
0C95:  MOVF   2D,W
0C96:  MOVWF  31
0C97:  MOVF   2C,W
0C98:  MOVWF  30
0C99:  BCF    03.5
0C9A:  CALL   000
0C9B:  MOVF   7A,W
0C9C:  BSF    03.5
0C9D:  MOVWF  2F
0C9E:  MOVF   79,W
0C9F:  MOVWF  2E
0CA0:  MOVF   78,W
0CA1:  MOVWF  2D
0CA2:  MOVF   77,W
0CA3:  MOVWF  2C
0CA4:  MOVF   2F,W
0CA5:  MOVWF  53
0CA6:  MOVF   2E,W
0CA7:  MOVWF  52
0CA8:  MOVF   2D,W
0CA9:  MOVWF  51
0CAA:  MOVF   2C,W
0CAB:  MOVWF  50
0CAC:  MOVF   2B,W
0CAD:  MOVWF  57
0CAE:  MOVF   2A,W
0CAF:  MOVWF  56
0CB0:  MOVF   29,W
0CB1:  MOVWF  55
0CB2:  MOVF   28,W
0CB3:  MOVWF  54
0CB4:  BCF    0A.3
0CB5:  BCF    03.5
0CB6:  CALL   342
0CB7:  BSF    0A.3
0CB8:  MOVF   7A,W
0CB9:  BSF    03.5
0CBA:  MOVWF  2F
0CBB:  MOVF   79,W
0CBC:  MOVWF  2E
0CBD:  MOVF   78,W
0CBE:  MOVWF  2D
0CBF:  MOVF   77,W
0CC0:  MOVWF  2C
0CC1:  MOVF   2F,W
0CC2:  MOVWF  33
0CC3:  MOVF   2E,W
0CC4:  MOVWF  32
0CC5:  MOVF   2D,W
0CC6:  MOVWF  31
0CC7:  MOVF   2C,W
0CC8:  MOVWF  30
0CC9:  BCF    03.5
0CCA:  CALL   1EC
0CCB:  GOTO   5BD
....................       } else { 
0CCC:  GOTO   513
....................          return (-exp(log(-x) * y)); 
0CCD:  BSF    03.5
0CCE:  MOVF   24,W
0CCF:  MOVWF  2C
0CD0:  MOVF   25,W
0CD1:  XORLW  80
0CD2:  MOVWF  2D
0CD3:  MOVF   26,W
0CD4:  MOVWF  2E
0CD5:  MOVF   27,W
0CD6:  MOVWF  2F
0CD7:  MOVWF  33
0CD8:  MOVF   2E,W
0CD9:  MOVWF  32
0CDA:  MOVF   2D,W
0CDB:  MOVWF  31
0CDC:  MOVF   2C,W
0CDD:  MOVWF  30
0CDE:  BCF    03.5
0CDF:  CALL   000
0CE0:  MOVF   7A,W
0CE1:  BSF    03.5
0CE2:  MOVWF  2F
0CE3:  MOVF   79,W
0CE4:  MOVWF  2E
0CE5:  MOVF   78,W
0CE6:  MOVWF  2D
0CE7:  MOVF   77,W
0CE8:  MOVWF  2C
0CE9:  MOVF   2F,W
0CEA:  MOVWF  53
0CEB:  MOVF   2E,W
0CEC:  MOVWF  52
0CED:  MOVF   2D,W
0CEE:  MOVWF  51
0CEF:  MOVF   2C,W
0CF0:  MOVWF  50
0CF1:  MOVF   2B,W
0CF2:  MOVWF  57
0CF3:  MOVF   2A,W
0CF4:  MOVWF  56
0CF5:  MOVF   29,W
0CF6:  MOVWF  55
0CF7:  MOVF   28,W
0CF8:  MOVWF  54
0CF9:  BCF    0A.3
0CFA:  BCF    03.5
0CFB:  CALL   342
0CFC:  BSF    0A.3
0CFD:  MOVF   7A,W
0CFE:  BSF    03.5
0CFF:  MOVWF  2F
0D00:  MOVF   79,W
0D01:  MOVWF  2E
0D02:  MOVF   78,W
0D03:  MOVWF  2D
0D04:  MOVF   77,W
0D05:  MOVWF  2C
0D06:  MOVF   2F,W
0D07:  MOVWF  33
0D08:  MOVF   2E,W
0D09:  MOVWF  32
0D0A:  MOVF   2D,W
0D0B:  MOVWF  31
0D0C:  MOVF   2C,W
0D0D:  MOVWF  30
0D0E:  BCF    03.5
0D0F:  CALL   1EC
0D10:  MOVLW  80
0D11:  XORWF  78,F
0D12:  GOTO   5BD
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
0D13:  GOTO   5BD
0D14:  BSF    03.5
0D15:  MOVF   27,W
0D16:  MOVWF  53
0D17:  MOVF   26,W
0D18:  MOVWF  52
0D19:  MOVF   25,W
0D1A:  MOVWF  51
0D1B:  MOVF   24,W
0D1C:  MOVWF  50
0D1D:  CLRF   57
0D1E:  CLRF   56
0D1F:  CLRF   55
0D20:  CLRF   54
0D21:  BCF    0A.3
0D22:  BCF    03.5
0D23:  CALL   214
0D24:  BSF    0A.3
0D25:  BTFSS  03.0
0D26:  GOTO   55A
0D27:  BSF    03.5
0D28:  MOVF   2B,W
0D29:  MOVWF  2F
0D2A:  MOVF   2A,W
0D2B:  MOVWF  2E
0D2C:  MOVF   29,W
0D2D:  MOVWF  2D
0D2E:  MOVF   28,W
0D2F:  MOVWF  2C
0D30:  CLRF   33
0D31:  CLRF   32
0D32:  CLRF   31
0D33:  MOVLW  7F
0D34:  MOVWF  30
0D35:  BCF    0A.3
0D36:  BCF    03.5
0D37:  CALL   6CA
0D38:  BSF    0A.3
0D39:  MOVF   7A,W
0D3A:  BSF    03.5
0D3B:  MOVWF  2F
0D3C:  MOVF   79,W
0D3D:  MOVWF  2E
0D3E:  MOVF   78,W
0D3F:  MOVWF  2D
0D40:  MOVF   77,W
0D41:  MOVWF  2C
0D42:  MOVF   2F,W
0D43:  MOVWF  53
0D44:  MOVF   2E,W
0D45:  MOVWF  52
0D46:  MOVF   2D,W
0D47:  MOVWF  51
0D48:  MOVF   2C,W
0D49:  MOVWF  50
0D4A:  CLRF   57
0D4B:  CLRF   56
0D4C:  CLRF   55
0D4D:  CLRF   54
0D4E:  BCF    0A.3
0D4F:  BCF    03.5
0D50:  CALL   214
0D51:  BSF    0A.3
0D52:  BTFSC  03.2
0D53:  GOTO   55A
....................       return 0; 
0D54:  CLRF   77
0D55:  CLRF   78
0D56:  CLRF   79
0D57:  CLRF   7A
0D58:  GOTO   5BD
....................    } else { 
0D59:  GOTO   5BD
....................       if(x != 0 || 0 >= y) { 
0D5A:  BSF    03.5
0D5B:  MOVF   27,W
0D5C:  MOVWF  53
0D5D:  MOVF   26,W
0D5E:  MOVWF  52
0D5F:  MOVF   25,W
0D60:  MOVWF  51
0D61:  MOVF   24,W
0D62:  MOVWF  50
0D63:  CLRF   57
0D64:  CLRF   56
0D65:  CLRF   55
0D66:  CLRF   54
0D67:  BCF    0A.3
0D68:  BCF    03.5
0D69:  CALL   214
0D6A:  BSF    0A.3
0D6B:  BTFSS  03.2
0D6C:  GOTO   582
0D6D:  BSF    03.5
0D6E:  MOVF   2B,W
0D6F:  MOVWF  53
0D70:  MOVF   2A,W
0D71:  MOVWF  52
0D72:  MOVF   29,W
0D73:  MOVWF  51
0D74:  MOVF   28,W
0D75:  MOVWF  50
0D76:  CLRF   57
0D77:  CLRF   56
0D78:  CLRF   55
0D79:  CLRF   54
0D7A:  BCF    0A.3
0D7B:  BCF    03.5
0D7C:  CALL   214
0D7D:  BSF    0A.3
0D7E:  BTFSC  03.0
0D7F:  GOTO   582
0D80:  BTFSS  03.2
0D81:  GOTO   5BD
....................          return (exp(log(x) * y)); 
0D82:  BSF    03.5
0D83:  MOVF   27,W
0D84:  MOVWF  33
0D85:  MOVF   26,W
0D86:  MOVWF  32
0D87:  MOVF   25,W
0D88:  MOVWF  31
0D89:  MOVF   24,W
0D8A:  MOVWF  30
0D8B:  BCF    03.5
0D8C:  CALL   000
0D8D:  MOVF   7A,W
0D8E:  BSF    03.5
0D8F:  MOVWF  2F
0D90:  MOVF   79,W
0D91:  MOVWF  2E
0D92:  MOVF   78,W
0D93:  MOVWF  2D
0D94:  MOVF   77,W
0D95:  MOVWF  2C
0D96:  MOVF   2F,W
0D97:  MOVWF  53
0D98:  MOVF   2E,W
0D99:  MOVWF  52
0D9A:  MOVF   2D,W
0D9B:  MOVWF  51
0D9C:  MOVF   2C,W
0D9D:  MOVWF  50
0D9E:  MOVF   2B,W
0D9F:  MOVWF  57
0DA0:  MOVF   2A,W
0DA1:  MOVWF  56
0DA2:  MOVF   29,W
0DA3:  MOVWF  55
0DA4:  MOVF   28,W
0DA5:  MOVWF  54
0DA6:  BCF    0A.3
0DA7:  BCF    03.5
0DA8:  CALL   342
0DA9:  BSF    0A.3
0DAA:  MOVF   7A,W
0DAB:  BSF    03.5
0DAC:  MOVWF  2F
0DAD:  MOVF   79,W
0DAE:  MOVWF  2E
0DAF:  MOVF   78,W
0DB0:  MOVWF  2D
0DB1:  MOVF   77,W
0DB2:  MOVWF  2C
0DB3:  MOVF   2F,W
0DB4:  MOVWF  33
0DB5:  MOVF   2E,W
0DB6:  MOVWF  32
0DB7:  MOVF   2D,W
0DB8:  MOVWF  31
0DB9:  MOVF   2C,W
0DBA:  MOVWF  30
0DBB:  BCF    03.5
0DBC:  CALL   1EC
....................       } 
....................    } 
.................... } 
0DBD:  RETURN
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES HS //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin disabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //No brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brownout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #use delay(clock=20000000) 
0200:  MOVLW  B1
0201:  MOVWF  04
0202:  BCF    03.7
0203:  MOVF   00,W
0204:  BTFSC  03.2
0205:  GOTO   213
0206:  MOVLW  06
0207:  MOVWF  78
0208:  CLRF   77
0209:  DECFSZ 77,F
020A:  GOTO   209
020B:  DECFSZ 78,F
020C:  GOTO   208
020D:  MOVLW  7B
020E:  MOVWF  77
020F:  DECFSZ 77,F
0210:  GOTO   20F
0211:  DECFSZ 00,F
0212:  GOTO   206
0213:  RETURN
.................... // Config the serial port hardware on the PIC 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define DISPLAY_ADDRESS 0xB4 
.................... #define REGISTER_SIZE  8    
.................... #define DISPLAY_CMD_SEND_VALUE 2 
.................... #define DISPLAY_CMD_SEND_LONG_TEXT 5 
.................... #define DISPLAY_CMD_CLS 6 
.................... #define DISPLAY_CMD_SETPOS 8 
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... // setup the I2C port 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
017C:  BCF    14.7
017D:  BCF    0C.3
017E:  BSF    03.5
017F:  MOVF   37,W
0180:  BCF    03.5
0181:  MOVWF  13
0182:  MOVLW  02
0183:  BTFSC  14.7
0184:  GOTO   18C
0185:  BTFSS  0C.3
0186:  GOTO   185
0187:  MOVLW  00
0188:  BSF    03.5
0189:  BTFSC  11.6
018A:  MOVLW  01
018B:  BCF    03.5
018C:  MOVWF  78
018D:  RETURN
....................  
.................... //PIC16 Write Internal EEPROM 
.................... #rom 0x2100={0x00} 
....................  
.................... int16 readUnitValueInEEPROM(); 
.................... void writeUnitValueInEEPROM(); 
.................... void clearUnitValueInEEPROM(); 
....................  
.................... int1 selectPush =0,selectUsed=1; 
.................... int1 exitPush =0,exitUsed =1; 
.................... int1 leftPush =0,leftUsed =1; 
.................... int1 rightPush =0,rightUsed =1; 
.................... //move from main 
.................... int menu = 1; 
.................... int1 selectmenu = 0; 
.................... int16 analog0; 
.................... int16 REFERENCE_VALUE = 525; 
.................... int16 power = 0; 
.................... int checkfor_unit = 0; 
.................... int16 unit = readUnitValueInEEPROM(); 
.................... int1 billcheck = 0; 
.................... float32 unit_sim = (float32) unit; //write function get from eerom here 
.................... float32 bill_sim = 0; 
.................... int16 bill = 0; 
.................... int1 status_power_on = 0; 
.................... int16 power_off_value = 0; 
....................  
....................  
.................... #INT_RB 
.................... void rb_isr(void) { 
....................    if(input(PIN_B3)==0 && selectUsed==0) // input(PIN_B3) == 0 is touching 
00FE:  BSF    03.5
00FF:  BSF    06.3
0100:  BCF    03.5
0101:  BTFSC  06.3
0102:  GOTO   107
0103:  BTFSC  28.1
0104:  GOTO   107
....................    { 
....................          selectPush = 1; 
0105:  BSF    28.0
....................    } 
....................    else if(input(PIN_B3)==1 && selectUsed==1) 
0106:  GOTO   149
0107:  BSF    03.5
0108:  BSF    06.3
0109:  BCF    03.5
010A:  BTFSS  06.3
010B:  GOTO   111
010C:  BTFSS  28.1
010D:  GOTO   111
....................    {       
....................          selectPush = 0; 
010E:  BCF    28.0
....................          selectUsed = 0; 
010F:  BCF    28.1
....................    } 
....................     
....................    else if(input(PIN_B2)==0 && exitUsed==0) // input(PIN_B3) == 0 is touching 
0110:  GOTO   149
0111:  BSF    03.5
0112:  BSF    06.2
0113:  BCF    03.5
0114:  BTFSC  06.2
0115:  GOTO   11A
0116:  BTFSC  28.3
0117:  GOTO   11A
....................    { 
....................          exitPush = 1; 
0118:  BSF    28.2
....................    } 
....................    else if(input(PIN_B2)==1 && exitUsed==1) 
0119:  GOTO   149
011A:  BSF    03.5
011B:  BSF    06.2
011C:  BCF    03.5
011D:  BTFSS  06.2
011E:  GOTO   124
011F:  BTFSS  28.3
0120:  GOTO   124
....................    {       
....................          exitPush = 0; 
0121:  BCF    28.2
....................          exitUsed = 0; 
0122:  BCF    28.3
....................    } 
....................    else if(input(PIN_B1)==0 && leftUsed==0) // input(PIN_B3) == 0 is touching 
0123:  GOTO   149
0124:  BSF    03.5
0125:  BSF    06.1
0126:  BCF    03.5
0127:  BTFSC  06.1
0128:  GOTO   12D
0129:  BTFSC  28.5
012A:  GOTO   12D
....................    { 
....................          leftPush = 1; 
012B:  BSF    28.4
....................    } 
....................    else if(input(PIN_B1)==1 && leftUsed==1) 
012C:  GOTO   149
012D:  BSF    03.5
012E:  BSF    06.1
012F:  BCF    03.5
0130:  BTFSS  06.1
0131:  GOTO   137
0132:  BTFSS  28.5
0133:  GOTO   137
....................    {       
....................          leftPush = 0; 
0134:  BCF    28.4
....................          leftUsed = 0; 
0135:  BCF    28.5
....................    } 
....................    else if(input(PIN_B4)==0 && rightUsed==0) // input(PIN_B3) == 0 is touching 
0136:  GOTO   149
0137:  BSF    03.5
0138:  BSF    06.4
0139:  BCF    03.5
013A:  BTFSC  06.4
013B:  GOTO   140
013C:  BTFSC  28.7
013D:  GOTO   140
....................    { 
....................          rightPush = 1; 
013E:  BSF    28.6
....................    } 
....................    else if(input(PIN_B4)==1 && rightUsed==1) 
013F:  GOTO   149
0140:  BSF    03.5
0141:  BSF    06.4
0142:  BCF    03.5
0143:  BTFSS  06.4
0144:  GOTO   149
0145:  BTFSS  28.7
0146:  GOTO   149
....................    {       
....................          rightPush = 0; 
0147:  BCF    28.6
....................          rightUsed = 0; 
0148:  BCF    28.7
....................    } 
....................    //if you wanna check the other button you have to write in this function with input(parameter); 
.................... } 
....................  
....................  
0149:  BCF    0B.0
014A:  BCF    0A.3
014B:  BCF    0A.4
014C:  GOTO   021
.................... #INT_TIMER1 
.................... void timer1_isr() 
.................... { 
....................    set_timer1(3036); //  
014D:  MOVLW  0B
014E:  MOVWF  0F
014F:  MOVLW  DC
0150:  MOVWF  0E
....................    checkfor_unit+=1; 
0151:  MOVLW  01
0152:  ADDWF  31,F
....................    if(checkfor_unit > 49) 
0153:  MOVF   31,W
0154:  SUBLW  31
0155:  BTFSC  03.0
0156:  GOTO   159
....................    { 
....................      checkfor_unit =0; 
0157:  CLRF   31
....................      billcheck = 1; 
0158:  BSF    2A.1
....................       
....................    } 
....................     
....................  
.................... }  
....................  
....................  
....................  
0159:  BCF    0C.0
015A:  BCF    0A.3
015B:  BCF    0A.4
015C:  GOTO   021
.................... void displayLongText(char* text); 
.................... void displayValue(int16 value[]); 
.................... void clearDisplay(); 
.................... void setDisplayPos(int pos); 
.................... int1 checkselect(int1 menu); 
.................... int1 checkexit(int1 menu); 
.................... int checkleft(int menu); 
.................... int checkright(int menu); 
.................... int16 calibrate(int16 analog); 
.................... int16 resetcalibrate(); 
.................... int16 amperecal(int16 analog); 
.................... void powercal(int16 ampere); 
.................... void unitcal(); 
.................... void menucalibrate(); 
.................... void menuresetcalibrate(); 
.................... void billcal(); 
.................... void menushutdown(); 
....................  
.................... void menuresetunit(); 
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!// This is the main device register 
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!int deviceRegister[REGISTER_SIZE]={0}; // device register 
....................  
....................  
....................  
....................  
.................... void main() { 
12BE:  BSF    03.5
12BF:  BSF    03.6
12C0:  BSF    07.3
12C1:  MOVLW  08
12C2:  BCF    03.6
12C3:  MOVWF  19
12C4:  MOVLW  02
12C5:  MOVWF  1A
12C6:  MOVLW  A6
12C7:  MOVWF  18
12C8:  MOVLW  90
12C9:  BCF    03.5
12CA:  MOVWF  18
12CB:  MOVLW  FF
12CC:  MOVWF  27
12CD:  BSF    27.3
12CE:  MOVF   27,W
12CF:  BSF    03.5
12D0:  MOVWF  07
12D1:  BCF    03.5
12D2:  BSF    27.4
12D3:  MOVF   27,W
12D4:  BSF    03.5
12D5:  MOVWF  07
12D6:  MOVLW  31
12D7:  MOVWF  13
12D8:  MOVLW  29
12D9:  BCF    03.5
12DA:  MOVWF  14
12DB:  BSF    03.5
12DC:  BSF    14.7
12DD:  BCF    14.6
12DE:  MOVLW  FF
12DF:  MOVWF  13
12E0:  MOVLW  28
12E1:  BCF    03.5
12E2:  MOVWF  14
12E3:  BCF    28.0
12E4:  BSF    28.1
12E5:  BCF    28.2
12E6:  BSF    28.3
12E7:  BCF    28.4
12E8:  BSF    28.5
12E9:  BCF    28.6
12EA:  BSF    28.7
12EB:  MOVLW  01
12EC:  MOVWF  29
12ED:  BCF    2A.0
12EE:  MOVLW  02
12EF:  MOVWF  2E
12F0:  MOVLW  0D
12F1:  MOVWF  2D
12F2:  CLRF   30
12F3:  CLRF   2F
12F4:  CLRF   31
130F:  MOVF   79,W
1310:  MOVWF  33
1311:  MOVF   78,W
1312:  MOVWF  32
1313:  BCF    2A.1
1314:  MOVF   33,W
1315:  BSF    03.5
1316:  MOVWF  55
1317:  BCF    03.5
1318:  MOVF   32,W
1319:  BSF    03.5
131A:  MOVWF  54
131B:  BCF    0A.4
131C:  BCF    03.5
131D:  CALL   15D
131E:  BSF    0A.4
131F:  MOVF   7A,W
1320:  MOVWF  37
1321:  MOVF   79,W
1322:  MOVWF  36
1323:  MOVF   78,W
1324:  MOVWF  35
1325:  MOVF   77,W
1326:  MOVWF  34
1327:  CLRF   3B
1328:  CLRF   3A
1329:  CLRF   39
132A:  CLRF   38
132B:  CLRF   3D
132C:  CLRF   3C
132D:  BCF    2A.2
132E:  CLRF   3F
132F:  CLRF   3E
1330:  BSF    03.5
1331:  BSF    03.6
1332:  MOVF   09,W
1333:  ANDLW  C0
1334:  MOVWF  09
1335:  BCF    03.6
1336:  BCF    1F.4
1337:  BCF    1F.5
1338:  MOVLW  00
1339:  BSF    03.6
133A:  MOVWF  08
133B:  BCF    03.5
133C:  CLRF   07
133D:  CLRF   08
133E:  CLRF   09
....................     
....................      
....................   
....................      
....................  
....................  
....................     int16 ampere; 
....................      
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
133F:  MOVLW  35
1340:  BCF    03.6
1341:  MOVWF  10
....................     set_timer1(3036);  
1342:  MOVLW  0B
1343:  MOVWF  0F
1344:  MOVLW  DC
1345:  MOVWF  0E
....................     enable_interrupts(INT_TIMER1); 
1346:  BSF    03.5
1347:  BSF    0C.0
....................      
....................     
....................     enable_interrupts(INT_RB3);    // generate interrupt when B7 changes 
1348:  BCF    03.5
1349:  BSF    0B.3
134A:  BSF    03.5
134B:  BSF    16.3
....................     enable_interrupts(INT_RB2); 
134C:  BCF    03.5
134D:  BSF    0B.3
134E:  BSF    03.5
134F:  BSF    16.2
....................     enable_interrupts(INT_RB1); 
1350:  BCF    03.5
1351:  BSF    0B.3
1352:  BSF    03.5
1353:  BSF    16.1
....................     enable_interrupts(INT_RB4); 
1354:  BCF    03.5
1355:  BSF    0B.3
1356:  BSF    03.5
1357:  BSF    16.4
....................     enable_interrupts(GLOBAL); 
1358:  MOVLW  C0
1359:  BCF    03.5
135A:  IORWF  0B,F
....................      
....................     setup_adc_ports(sAN1); // setup PIN A0 as analog input 
135B:  BSF    03.5
135C:  BSF    03.6
135D:  MOVF   09,W
135E:  ANDLW  C0
135F:  MOVWF  09
1360:  BCF    03.6
1361:  BCF    1F.4
1362:  BCF    1F.5
1363:  MOVLW  02
1364:  BSF    03.6
1365:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
1366:  BCF    03.5
1367:  BCF    03.6
1368:  BSF    1F.6
1369:  BSF    1F.7
136A:  BSF    03.5
136B:  BSF    1F.7
136C:  BCF    03.5
136D:  BSF    1F.0
....................   
....................     output_low(PIN_C5); //off Relay 
136E:  BCF    27.5
136F:  MOVF   27,W
1370:  BSF    03.5
1371:  MOVWF  07
1372:  BCF    03.5
1373:  BCF    07.5
....................     output_low(PIN_B5); //off led for power off status 
1374:  BSF    03.5
1375:  BCF    06.5
1376:  BCF    03.5
1377:  BCF    06.5
....................     //printf("Sampling:\r\n"); 
....................     set_adc_channel( 1 ); // set the ADC channel to read  
1378:  MOVLW  04
1379:  MOVWF  78
137A:  MOVF   1F,W
137B:  ANDLW  C3
137C:  IORWF  78,W
137D:  MOVWF  1F
....................     delay_us(100); // wait for the sensor reading to finish 
137E:  MOVLW  A6
137F:  MOVWF  77
1380:  DECFSZ 77,F
1381:  GOTO   380
1382:  NOP
....................   
....................     while (1) { 
....................         
....................      if(status_power_on <= 0){ 
1383:  MOVLW  00
1384:  BTFSC  2A.2
1385:  MOVLW  01
1386:  XORLW  00
1387:  BTFSS  03.2
1388:  GOTO   3C8
....................        menu=1; 
1389:  MOVLW  01
138A:  MOVWF  29
....................        power_off_value = 0; 
138B:  CLRF   3F
138C:  CLRF   3E
....................        output_low(PIN_B0); 
138D:  BSF    03.5
138E:  BCF    06.0
138F:  BCF    03.5
1390:  BCF    06.0
....................        output_low(PIN_B6); 
1391:  BSF    03.5
1392:  BCF    06.6
1393:  BCF    03.5
1394:  BCF    06.6
....................        status_power_on = checkselect(status_power_on); 
1395:  MOVLW  00
1396:  BTFSC  2A.2
1397:  MOVLW  01
1398:  MOVWF  5E
1399:  BSF    03.5
139A:  MOVWF  32
139B:  BCF    0A.4
139C:  BCF    03.5
139D:  CALL   1A1
139E:  BSF    0A.4
139F:  BCF    2A.2
13A0:  BTFSC  78.0
13A1:  BSF    2A.2
....................        setDisplayPos(5);                      
13A2:  MOVLW  05
13A3:  BSF    03.5
13A4:  MOVWF  31
13A5:  BCF    0A.4
13A6:  BCF    03.5
13A7:  CALL   1B5
13A8:  BSF    0A.4
....................        displayLongText("Welcome");  
13A9:  CLRF   78
13AA:  MOVLW  08
13AB:  MOVWF  77
13AC:  MOVLW  42
13AD:  MOVWF  04
13AE:  BCF    03.7
13AF:  MOVF   78,W
13B0:  BCF    0A.4
13B1:  CALL   038
13B2:  BSF    0A.4
13B3:  MOVWF  00
13B4:  INCF   78,F
13B5:  INCF   04,F
13B6:  DECFSZ 77,F
13B7:  GOTO   3AF
13B8:  BSF    03.5
13B9:  CLRF   34
13BA:  MOVLW  42
13BB:  MOVWF  33
13BC:  BCF    0A.4
13BD:  BCF    03.5
13BE:  CALL   1D1
13BF:  BSF    0A.4
....................        delay_ms(100); 
13C0:  MOVLW  64
13C1:  BSF    03.5
13C2:  MOVWF  31
13C3:  BCF    0A.4
13C4:  BCF    03.5
13C5:  CALL   200
13C6:  BSF    0A.4
....................       
....................      } 
....................      else{ 
13C7:  GOTO   617
....................        output_high(PIN_B6); 
13C8:  BSF    03.5
13C9:  BCF    06.6
13CA:  BCF    03.5
13CB:  BSF    06.6
....................        output_high(PIN_B0); 
13CC:  BSF    03.5
13CD:  BCF    06.0
13CE:  BCF    03.5
13CF:  BSF    06.0
....................        analog0 = read_adc(); 
13D0:  BSF    1F.1
13D1:  BTFSC  1F.1
13D2:  GOTO   3D1
13D3:  BSF    03.5
13D4:  MOVF   1E,W
13D5:  BCF    03.5
13D6:  MOVWF  2B
13D7:  MOVF   1E,W
13D8:  MOVWF  2C
....................         
....................        delay_ms(100); //100 
13D9:  MOVLW  64
13DA:  BSF    03.5
13DB:  MOVWF  31
13DC:  BCF    0A.4
13DD:  BCF    03.5
13DE:  CALL   200
13DF:  BSF    0A.4
....................        
....................         
....................         
....................        if(REFERENCE_VALUE>525){ 
13E0:  MOVF   2E,W
13E1:  SUBLW  01
13E2:  BTFSC  03.0
13E3:  GOTO   3FB
13E4:  XORLW  FF
13E5:  BTFSS  03.2
13E6:  GOTO   3EB
13E7:  MOVF   2D,W
13E8:  SUBLW  0D
13E9:  BTFSC  03.0
13EA:  GOTO   3FB
....................          analog0 = (analog0-(REFERENCE_VALUE-525)); 
13EB:  MOVLW  0D
13EC:  SUBWF  2D,W
13ED:  MOVWF  77
13EE:  MOVF   2E,W
13EF:  MOVWF  7A
13F0:  MOVLW  02
13F1:  BTFSS  03.0
13F2:  MOVLW  03
13F3:  SUBWF  7A,F
13F4:  MOVF   77,W
13F5:  SUBWF  2B,F
13F6:  MOVF   7A,W
13F7:  BTFSS  03.0
13F8:  INCFSZ 7A,W
13F9:  SUBWF  2C,F
....................        } 
....................        else if(REFERENCE_VALUE<525){ 
13FA:  GOTO   414
13FB:  MOVF   2E,W
13FC:  SUBLW  02
13FD:  BTFSS  03.0
13FE:  GOTO   414
13FF:  BTFSS  03.2
1400:  GOTO   405
1401:  MOVF   2D,W
1402:  SUBLW  0C
1403:  BTFSS  03.0
1404:  GOTO   414
....................          analog0 = (analog0+(525-REFERENCE_VALUE));   
1405:  MOVF   2D,W
1406:  SUBLW  0D
1407:  MOVWF  77
1408:  MOVLW  02
1409:  MOVWF  7A
140A:  MOVF   2E,W
140B:  BTFSS  03.0
140C:  INCFSZ 2E,W
140D:  SUBWF  7A,F
140E:  MOVF   77,W
140F:  ADDWF  2B,F
1410:  MOVF   7A,W
1411:  BTFSC  03.0
1412:  INCFSZ 7A,W
1413:  ADDWF  2C,F
....................        }  
....................        //decrese or increse analog0 to fit in graph that we solve because we solve at 0,525 at 0 mA 
....................         
....................      
....................        ampere = amperecal(analog0); 
1414:  MOVF   2C,W
1415:  MOVWF  5F
1416:  MOVF   2B,W
1417:  MOVWF  5E
1418:  BCF    0A.4
1419:  BSF    0A.3
141A:  GOTO   5BE
141B:  BSF    0A.4
141C:  BCF    0A.3
141D:  MOVF   79,W
141E:  MOVWF  41
141F:  MOVF   78,W
1420:  MOVWF  40
....................        powercal(ampere); 
1421:  MOVF   41,W
1422:  MOVWF  5F
1423:  MOVF   40,W
1424:  MOVWF  5E
1425:  BCF    0A.4
1426:  BSF    0A.3
1427:  GOTO   714
1428:  BSF    0A.4
1429:  BCF    0A.3
....................        if(billcheck == 1){ 
142A:  BTFSS  2A.1
142B:  GOTO   435
....................          unitcal(); 
142C:  BCF    0A.4
142D:  BSF    0A.3
142E:  GOTO   75A
142F:  BSF    0A.4
1430:  BCF    0A.3
....................          billcheck = 0; 
1431:  BCF    2A.1
....................          clearDisplay(); //if you don't want to clear display every time follow sampling unit.You can erase here. 
1432:  BCF    0A.4
1433:  CALL   18E
1434:  BSF    0A.4
....................         
....................        } 
....................        billcal(); 
1435:  BCF    0A.4
1436:  GOTO   7BF
1437:  BSF    0A.4
....................        //printf("Sensor value = %Lu\r\n",analog0 ); 
....................        //printf("AMPERE = %Lu\r\n",ampere );  //sent to computer 
....................        //printf("POWER = %Lu\r\n",power ); 
....................        //delay_ms(500); 
....................         
....................     
....................         
....................        if(menu>=8){ 
1438:  MOVF   29,W
1439:  SUBLW  07
143A:  BTFSC  03.0
143B:  GOTO   43F
....................           
....................          menu%=8; 
143C:  MOVLW  07
143D:  ANDWF  29,F
....................          //menu+=1; 
....................        } 
....................        else if(menu<=0) 
143E:  GOTO   617
143F:  MOVF   29,F
1440:  BTFSS  03.2
1441:  GOTO   445
....................        { menu=1; 
1442:  MOVLW  01
1443:  MOVWF  29
....................        } 
....................        else if(menu==1){ 
1444:  GOTO   617
1445:  DECFSZ 29,W
1446:  GOTO   4F3
....................           
....................           
....................          setDisplayPos(1);                      
1447:  MOVLW  01
1448:  BSF    03.5
1449:  MOVWF  31
144A:  BCF    0A.4
144B:  BCF    03.5
144C:  CALL   1B5
144D:  BSF    0A.4
....................          displayLongText("SENSOR"); 
144E:  CLRF   78
144F:  MOVLW  07
1450:  MOVWF  77
1451:  MOVLW  4A
1452:  MOVWF  04
1453:  BCF    03.7
1454:  MOVF   78,W
1455:  BCF    0A.4
1456:  CALL   044
1457:  BSF    0A.4
1458:  MOVWF  00
1459:  INCF   78,F
145A:  INCF   04,F
145B:  DECFSZ 77,F
145C:  GOTO   454
145D:  BSF    03.5
145E:  CLRF   34
145F:  MOVLW  4A
1460:  MOVWF  33
1461:  BCF    0A.4
1462:  BCF    03.5
1463:  CALL   1D1
1464:  BSF    0A.4
....................          setDisplayPos(7);                      
1465:  MOVLW  07
1466:  BSF    03.5
1467:  MOVWF  31
1468:  BCF    0A.4
1469:  BCF    03.5
146A:  CALL   1B5
146B:  BSF    0A.4
....................          displayLongText("  mA  "); 
146C:  CLRF   78
146D:  MOVLW  07
146E:  MOVWF  77
146F:  MOVLW  4A
1470:  MOVWF  04
1471:  BCF    03.7
1472:  MOVF   78,W
1473:  BCF    0A.4
1474:  CALL   04F
1475:  BSF    0A.4
1476:  MOVWF  00
1477:  INCF   78,F
1478:  INCF   04,F
1479:  DECFSZ 77,F
147A:  GOTO   472
147B:  BSF    03.5
147C:  CLRF   34
147D:  MOVLW  4A
147E:  MOVWF  33
147F:  BCF    0A.4
1480:  BCF    03.5
1481:  CALL   1D1
1482:  BSF    0A.4
....................          setDisplayPos(13);                      
1483:  MOVLW  0D
1484:  BSF    03.5
1485:  MOVWF  31
1486:  BCF    0A.4
1487:  BCF    03.5
1488:  CALL   1B5
1489:  BSF    0A.4
....................          displayLongText("WATT"); 
148A:  MOVLW  57
148B:  MOVWF  4A
148C:  MOVLW  41
148D:  MOVWF  4B
148E:  MOVLW  54
148F:  MOVWF  4C
1490:  MOVWF  4D
1491:  CLRF   4E
1492:  BSF    03.5
1493:  CLRF   34
1494:  MOVLW  4A
1495:  MOVWF  33
1496:  BCF    0A.4
1497:  BCF    03.5
1498:  CALL   1D1
1499:  BSF    0A.4
....................           
....................          setDisplayPos(18); 
149A:  MOVLW  12
149B:  BSF    03.5
149C:  MOVWF  31
149D:  BCF    0A.4
149E:  BCF    03.5
149F:  CALL   1B5
14A0:  BSF    0A.4
....................          displayValue(analog0); 
14A1:  MOVF   2C,W
14A2:  MOVWF  5F
14A3:  MOVF   2B,W
14A4:  MOVWF  5E
14A5:  CALL   000
....................          setDisplayPos(21); 
14A6:  MOVLW  15
14A7:  BSF    03.5
14A8:  MOVWF  31
14A9:  BCF    0A.4
14AA:  BCF    03.5
14AB:  CALL   1B5
14AC:  BSF    0A.4
....................          displayLongText("   "); 
14AD:  MOVLW  20
14AE:  MOVWF  4A
14AF:  MOVWF  4B
14B0:  MOVWF  4C
14B1:  CLRF   4D
14B2:  BSF    03.5
14B3:  CLRF   34
14B4:  MOVLW  4A
14B5:  MOVWF  33
14B6:  BCF    0A.4
14B7:  BCF    03.5
14B8:  CALL   1D1
14B9:  BSF    0A.4
....................          setDisplayPos(24); 
14BA:  MOVLW  18
14BB:  BSF    03.5
14BC:  MOVWF  31
14BD:  BCF    0A.4
14BE:  BCF    03.5
14BF:  CALL   1B5
14C0:  BSF    0A.4
....................          displayValue(ampere); 
14C1:  MOVF   41,W
14C2:  MOVWF  5F
14C3:  MOVF   40,W
14C4:  MOVWF  5E
14C5:  CALL   000
....................          setDisplayPos(28);                      
14C6:  MOVLW  1C
14C7:  BSF    03.5
14C8:  MOVWF  31
14C9:  BCF    0A.4
14CA:  BCF    03.5
14CB:  CALL   1B5
14CC:  BSF    0A.4
....................          displayLongText(" "); 
14CD:  MOVLW  20
14CE:  MOVWF  4A
14CF:  CLRF   4B
14D0:  BSF    03.5
14D1:  CLRF   34
14D2:  MOVLW  4A
14D3:  MOVWF  33
14D4:  BCF    0A.4
14D5:  BCF    03.5
14D6:  CALL   1D1
14D7:  BSF    0A.4
....................          setDisplayPos(29); 
14D8:  MOVLW  1D
14D9:  BSF    03.5
14DA:  MOVWF  31
14DB:  BCF    0A.4
14DC:  BCF    03.5
14DD:  CALL   1B5
14DE:  BSF    0A.4
....................          displayValue(power); 
14DF:  MOVF   30,W
14E0:  MOVWF  5F
14E1:  MOVF   2F,W
14E2:  MOVWF  5E
14E3:  CALL   000
....................          menu = checkleft(menu); 
14E4:  MOVF   29,W
14E5:  BSF    03.5
14E6:  MOVWF  31
14E7:  BCF    03.5
14E8:  CALL   031
14E9:  MOVF   78,W
14EA:  MOVWF  29
....................          menu = checkright(menu); 
14EB:  MOVF   29,W
14EC:  BSF    03.5
14ED:  MOVWF  31
14EE:  BCF    03.5
14EF:  CALL   047
14F0:  MOVF   78,W
14F1:  MOVWF  29
....................           
....................           
....................         
....................        } 
....................        else if(menu==2){ 
14F2:  GOTO   617
14F3:  MOVF   29,W
14F4:  SUBLW  02
14F5:  BTFSS  03.2
14F6:  GOTO   5A2
....................           
....................          setDisplayPos(1);                      
14F7:  MOVLW  01
14F8:  BSF    03.5
14F9:  MOVWF  31
14FA:  BCF    0A.4
14FB:  BCF    03.5
14FC:  CALL   1B5
14FD:  BSF    0A.4
....................          displayLongText(" volt "); 
14FE:  CLRF   78
14FF:  MOVLW  07
1500:  MOVWF  77
1501:  MOVLW  51
1502:  MOVWF  04
1503:  BCF    03.7
1504:  MOVF   78,W
1505:  BCF    0A.4
1506:  CALL   05A
1507:  BSF    0A.4
1508:  MOVWF  00
1509:  INCF   78,F
150A:  INCF   04,F
150B:  DECFSZ 77,F
150C:  GOTO   504
150D:  BSF    03.5
150E:  CLRF   34
150F:  MOVLW  51
1510:  MOVWF  33
1511:  BCF    0A.4
1512:  BCF    03.5
1513:  CALL   1D1
1514:  BSF    0A.4
....................          setDisplayPos(7);                      
1515:  MOVLW  07
1516:  BSF    03.5
1517:  MOVWF  31
1518:  BCF    0A.4
1519:  BCF    03.5
151A:  CALL   1B5
151B:  BSF    0A.4
....................          displayLongText("  mA  "); 
151C:  CLRF   78
151D:  MOVLW  07
151E:  MOVWF  77
151F:  MOVLW  51
1520:  MOVWF  04
1521:  BCF    03.7
1522:  MOVF   78,W
1523:  BCF    0A.4
1524:  CALL   04F
1525:  BSF    0A.4
1526:  MOVWF  00
1527:  INCF   78,F
1528:  INCF   04,F
1529:  DECFSZ 77,F
152A:  GOTO   522
152B:  BSF    03.5
152C:  CLRF   34
152D:  MOVLW  51
152E:  MOVWF  33
152F:  BCF    0A.4
1530:  BCF    03.5
1531:  CALL   1D1
1532:  BSF    0A.4
....................          setDisplayPos(13);                      
1533:  MOVLW  0D
1534:  BSF    03.5
1535:  MOVWF  31
1536:  BCF    0A.4
1537:  BCF    03.5
1538:  CALL   1B5
1539:  BSF    0A.4
....................          displayLongText("WATT"); 
153A:  MOVLW  57
153B:  MOVWF  51
153C:  MOVLW  41
153D:  MOVWF  52
153E:  MOVLW  54
153F:  MOVWF  53
1540:  MOVWF  54
1541:  CLRF   55
1542:  BSF    03.5
1543:  CLRF   34
1544:  MOVLW  51
1545:  MOVWF  33
1546:  BCF    0A.4
1547:  BCF    03.5
1548:  CALL   1D1
1549:  BSF    0A.4
....................          setDisplayPos(18); 
154A:  MOVLW  12
154B:  BSF    03.5
154C:  MOVWF  31
154D:  BCF    0A.4
154E:  BCF    03.5
154F:  CALL   1B5
1550:  BSF    0A.4
....................          displayValue(230); 
1551:  CLRF   5F
1552:  MOVLW  E6
1553:  MOVWF  5E
1554:  CALL   000
....................           
....................          setDisplayPos(21); 
1555:  MOVLW  15
1556:  BSF    03.5
1557:  MOVWF  31
1558:  BCF    0A.4
1559:  BCF    03.5
155A:  CALL   1B5
155B:  BSF    0A.4
....................          displayLongText("   "); 
155C:  MOVLW  20
155D:  MOVWF  51
155E:  MOVWF  52
155F:  MOVWF  53
1560:  CLRF   54
1561:  BSF    03.5
1562:  CLRF   34
1563:  MOVLW  51
1564:  MOVWF  33
1565:  BCF    0A.4
1566:  BCF    03.5
1567:  CALL   1D1
1568:  BSF    0A.4
....................          setDisplayPos(24); 
1569:  MOVLW  18
156A:  BSF    03.5
156B:  MOVWF  31
156C:  BCF    0A.4
156D:  BCF    03.5
156E:  CALL   1B5
156F:  BSF    0A.4
....................          displayValue(ampere); 
1570:  MOVF   41,W
1571:  MOVWF  5F
1572:  MOVF   40,W
1573:  MOVWF  5E
1574:  CALL   000
....................          setDisplayPos(28);                      
1575:  MOVLW  1C
1576:  BSF    03.5
1577:  MOVWF  31
1578:  BCF    0A.4
1579:  BCF    03.5
157A:  CALL   1B5
157B:  BSF    0A.4
....................          displayLongText(" "); 
157C:  MOVLW  20
157D:  MOVWF  51
157E:  CLRF   52
157F:  BSF    03.5
1580:  CLRF   34
1581:  MOVLW  51
1582:  MOVWF  33
1583:  BCF    0A.4
1584:  BCF    03.5
1585:  CALL   1D1
1586:  BSF    0A.4
....................          setDisplayPos(29); 
1587:  MOVLW  1D
1588:  BSF    03.5
1589:  MOVWF  31
158A:  BCF    0A.4
158B:  BCF    03.5
158C:  CALL   1B5
158D:  BSF    0A.4
....................          displayValue(power); 
158E:  MOVF   30,W
158F:  MOVWF  5F
1590:  MOVF   2F,W
1591:  MOVWF  5E
1592:  CALL   000
....................          menu = checkleft(menu); 
1593:  MOVF   29,W
1594:  BSF    03.5
1595:  MOVWF  31
1596:  BCF    03.5
1597:  CALL   031
1598:  MOVF   78,W
1599:  MOVWF  29
....................          menu = checkright(menu); 
159A:  MOVF   29,W
159B:  BSF    03.5
159C:  MOVWF  31
159D:  BCF    03.5
159E:  CALL   047
159F:  MOVF   78,W
15A0:  MOVWF  29
....................           
....................          
....................        } 
....................        else if(menu ==3){ 
15A1:  GOTO   617
15A2:  MOVF   29,W
15A3:  SUBLW  03
15A4:  BTFSS  03.2
15A5:  GOTO   601
....................              
....................             setDisplayPos(1); 
15A6:  MOVLW  01
15A7:  BSF    03.5
15A8:  MOVWF  31
15A9:  BCF    0A.4
15AA:  BCF    03.5
15AB:  CALL   1B5
15AC:  BSF    0A.4
....................             displayLongText(" Unit"); 
15AD:  MOVLW  20
15AE:  MOVWF  58
15AF:  MOVLW  55
15B0:  MOVWF  59
15B1:  MOVLW  6E
15B2:  MOVWF  5A
15B3:  MOVLW  69
15B4:  MOVWF  5B
15B5:  MOVLW  74
15B6:  MOVWF  5C
15B7:  CLRF   5D
15B8:  BSF    03.5
15B9:  CLRF   34
15BA:  MOVLW  58
15BB:  MOVWF  33
15BC:  BCF    0A.4
15BD:  BCF    03.5
15BE:  CALL   1D1
15BF:  BSF    0A.4
....................             setDisplayPos(8); 
15C0:  MOVLW  08
15C1:  BSF    03.5
15C2:  MOVWF  31
15C3:  BCF    0A.4
15C4:  BCF    03.5
15C5:  CALL   1B5
15C6:  BSF    0A.4
....................             displayValue(unit); 
15C7:  MOVF   33,W
15C8:  MOVWF  5F
15C9:  MOVF   32,W
15CA:  MOVWF  5E
15CB:  CALL   000
....................             setDisplayPos(17); 
15CC:  MOVLW  11
15CD:  BSF    03.5
15CE:  MOVWF  31
15CF:  BCF    0A.4
15D0:  BCF    03.5
15D1:  CALL   1B5
15D2:  BSF    0A.4
....................             displayLongText(" Baht"); 
15D3:  MOVLW  20
15D4:  MOVWF  58
15D5:  MOVLW  42
15D6:  MOVWF  59
15D7:  MOVLW  61
15D8:  MOVWF  5A
15D9:  MOVLW  68
15DA:  MOVWF  5B
15DB:  MOVLW  74
15DC:  MOVWF  5C
15DD:  CLRF   5D
15DE:  BSF    03.5
15DF:  CLRF   34
15E0:  MOVLW  58
15E1:  MOVWF  33
15E2:  BCF    0A.4
15E3:  BCF    03.5
15E4:  CALL   1D1
15E5:  BSF    0A.4
....................             setDisplayPos(24); 
15E6:  MOVLW  18
15E7:  BSF    03.5
15E8:  MOVWF  31
15E9:  BCF    0A.4
15EA:  BCF    03.5
15EB:  CALL   1B5
15EC:  BSF    0A.4
....................             displayValue(bill); 
15ED:  MOVF   3D,W
15EE:  MOVWF  5F
15EF:  MOVF   3C,W
15F0:  MOVWF  5E
15F1:  CALL   000
....................             menu = checkleft(menu); 
15F2:  MOVF   29,W
15F3:  BSF    03.5
15F4:  MOVWF  31
15F5:  BCF    03.5
15F6:  CALL   031
15F7:  MOVF   78,W
15F8:  MOVWF  29
....................             menu = checkright(menu); 
15F9:  MOVF   29,W
15FA:  BSF    03.5
15FB:  MOVWF  31
15FC:  BCF    03.5
15FD:  CALL   047
15FE:  MOVF   78,W
15FF:  MOVWF  29
....................        } 
....................        else if(menu ==4){ 
1600:  GOTO   617
1601:  MOVF   29,W
1602:  SUBLW  04
1603:  BTFSS  03.2
1604:  GOTO   607
....................             menucalibrate(); 
1605:  GOTO   05D
....................        } 
....................        else if(menu ==5){ 
1606:  GOTO   617
1607:  MOVF   29,W
1608:  SUBLW  05
1609:  BTFSS  03.2
160A:  GOTO   60D
....................             menuresetcalibrate(); 
160B:  GOTO   112
....................        } 
....................        else if(menu ==6){ 
160C:  GOTO   617
160D:  MOVF   29,W
160E:  SUBLW  06
160F:  BTFSS  03.2
1610:  GOTO   613
....................             menuresetunit(); 
1611:  GOTO   1BF
....................        } 
....................        else if(menu ==7){ 
1612:  GOTO   617
1613:  MOVF   29,W
1614:  SUBLW  07
1615:  BTFSC  03.2
....................             menushutdown(); 
1616:  GOTO   268
....................        } 
....................         
....................         
....................    
....................         
....................         
....................      }    
....................     } 
1617:  GOTO   383
.................... } 
....................  
....................  
.................... ///////////////////////////// 
.................... //Unit Value memory Function 
.................... ///////////////////////////// 
.................... int16 readUnitValueInEEPROM(){ 
....................     
1618:  SLEEP
....................    int16 readUnit; 
....................     
....................    readUnit = read_eeprom(0x00) << 8; // address 10 is high_byte 
12F5:  BSF    03.6
12F6:  CLRF   0D
12F7:  BSF    03.5
12F8:  BCF    0C.7
12F9:  BSF    0C.0
12FA:  BCF    03.5
12FB:  MOVF   0C,W
12FC:  BCF    03.6
12FD:  MOVWF  5F
12FE:  CLRF   5E
....................    readUnit += read_eeprom(0x01) ;    // address 11 is low_byte 
12FF:  MOVLW  01
1300:  BSF    03.6
1301:  MOVWF  0D
1302:  BSF    03.5
1303:  BCF    0C.7
1304:  BSF    0C.0
1305:  BCF    03.5
1306:  MOVF   0C,W
1307:  BCF    03.6
1308:  ADDWF  5E,F
1309:  BTFSC  03.0
130A:  INCF   5F,F
....................    return readUnit; 
130B:  MOVF   5E,W
130C:  MOVWF  78
130D:  MOVF   5F,W
130E:  MOVWF  79
.................... } 
....................  
....................  
.................... void writeUnitValueInEEPROM(){ 
....................    int con_h,con_l; 
....................     
....................    con_l = unit & 0xff; 
0FB5:  MOVF   32,W
0FB6:  MOVWF  5F
....................    con_h = unit >> 8; 
0FB7:  MOVF   33,W
0FB8:  MOVWF  5E
....................     
....................    write_eeprom(0x00,con_h); 
0FB9:  MOVF   0B,W
0FBA:  MOVWF  77
0FBB:  BCF    0B.7
0FBC:  BSF    03.6
0FBD:  CLRF   0D
0FBE:  BCF    03.6
0FBF:  MOVF   5E,W
0FC0:  BSF    03.6
0FC1:  MOVWF  0C
0FC2:  BSF    03.5
0FC3:  BCF    0C.7
0FC4:  BSF    0C.2
0FC5:  MOVLW  55
0FC6:  MOVWF  0D
0FC7:  MOVLW  AA
0FC8:  MOVWF  0D
0FC9:  BSF    0C.1
0FCA:  BTFSC  0C.1
0FCB:  GOTO   7CA
0FCC:  BCF    0C.2
0FCD:  MOVF   77,W
0FCE:  BCF    03.5
0FCF:  BCF    03.6
0FD0:  IORWF  0B,F
....................    write_eeprom(0x01,con_l); 
0FD1:  MOVF   0B,W
0FD2:  MOVWF  77
0FD3:  BCF    0B.7
0FD4:  MOVLW  01
0FD5:  BSF    03.6
0FD6:  MOVWF  0D
0FD7:  BCF    03.6
0FD8:  MOVF   5F,W
0FD9:  BSF    03.6
0FDA:  MOVWF  0C
0FDB:  BSF    03.5
0FDC:  BCF    0C.7
0FDD:  BSF    0C.2
0FDE:  MOVLW  55
0FDF:  MOVWF  0D
0FE0:  MOVLW  AA
0FE1:  MOVWF  0D
0FE2:  BSF    0C.1
0FE3:  BTFSC  0C.1
0FE4:  GOTO   7E3
0FE5:  BCF    0C.2
0FE6:  MOVF   77,W
0FE7:  BCF    03.5
0FE8:  BCF    03.6
0FE9:  IORWF  0B,F
....................  
.................... } 
....................  
.................... void clearUnitValueInEEPROM(){ 
....................    unit = 0; 
11D2:  CLRF   33
11D3:  CLRF   32
....................    unit_sim = (float32) unit; 
11D4:  MOVF   33,W
11D5:  BSF    03.5
11D6:  MOVWF  55
11D7:  BCF    03.5
11D8:  MOVF   32,W
11D9:  BSF    03.5
11DA:  MOVWF  54
11DB:  BCF    0A.4
11DC:  BCF    03.5
11DD:  CALL   15D
11DE:  BSF    0A.4
11DF:  MOVF   7A,W
11E0:  MOVWF  37
11E1:  MOVF   79,W
11E2:  MOVWF  36
11E3:  MOVF   78,W
11E4:  MOVWF  35
11E5:  MOVF   77,W
11E6:  MOVWF  34
....................    write_eeprom(0x00,0); 
11E7:  MOVF   0B,W
11E8:  MOVWF  77
11E9:  BCF    0B.7
11EA:  BSF    03.6
11EB:  CLRF   0D
11EC:  CLRF   0C
11ED:  BSF    03.5
11EE:  BCF    0C.7
11EF:  BSF    0C.2
11F0:  MOVLW  55
11F1:  MOVWF  0D
11F2:  MOVLW  AA
11F3:  MOVWF  0D
11F4:  BSF    0C.1
11F5:  BTFSC  0C.1
11F6:  GOTO   1F5
11F7:  BCF    0C.2
11F8:  MOVF   77,W
11F9:  BCF    03.5
11FA:  BCF    03.6
11FB:  IORWF  0B,F
....................    write_eeprom(0x01,0); 
11FC:  MOVF   0B,W
11FD:  MOVWF  77
11FE:  BCF    0B.7
11FF:  MOVLW  01
1200:  BSF    03.6
1201:  MOVWF  0D
1202:  CLRF   0C
1203:  BSF    03.5
1204:  BCF    0C.7
1205:  BSF    0C.2
1206:  MOVLW  55
1207:  MOVWF  0D
1208:  MOVLW  AA
1209:  MOVWF  0D
120A:  BSF    0C.1
120B:  BTFSC  0C.1
120C:  GOTO   20B
120D:  BCF    0C.2
120E:  MOVF   77,W
120F:  BCF    03.5
1210:  BCF    03.6
1211:  IORWF  0B,F
....................  
.................... } 
....................  
....................  
....................  
.................... ///////////////////////////// 
.................... //Unit Value memory Function 
.................... ///////////////////////////// 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... ///////////////// 
.................... //calculation Function 
.................... //////////////// 
.................... void powercal(int16 ampere){ 
0F14:  CLRF   63
0F15:  CLRF   62
0F16:  CLRF   61
0F17:  CLRF   60
....................    float32 power_sim = 0; 
....................    power_sim =  0.230*ampere; //((230*ampere)*1000) 
0F18:  MOVF   5F,W
0F19:  BSF    03.5
0F1A:  MOVWF  55
0F1B:  BCF    03.5
0F1C:  MOVF   5E,W
0F1D:  BSF    03.5
0F1E:  MOVWF  54
0F1F:  BCF    0A.3
0F20:  BCF    03.5
0F21:  CALL   15D
0F22:  BSF    0A.3
0F23:  MOVLW  1F
0F24:  BSF    03.5
0F25:  MOVWF  53
0F26:  MOVLW  85
0F27:  MOVWF  52
0F28:  MOVLW  6B
0F29:  MOVWF  51
0F2A:  MOVLW  7C
0F2B:  MOVWF  50
0F2C:  MOVF   7A,W
0F2D:  MOVWF  57
0F2E:  MOVF   79,W
0F2F:  MOVWF  56
0F30:  MOVF   78,W
0F31:  MOVWF  55
0F32:  MOVF   77,W
0F33:  MOVWF  54
0F34:  BCF    0A.3
0F35:  BCF    03.5
0F36:  CALL   342
0F37:  BSF    0A.3
0F38:  MOVF   7A,W
0F39:  MOVWF  63
0F3A:  MOVF   79,W
0F3B:  MOVWF  62
0F3C:  MOVF   78,W
0F3D:  MOVWF  61
0F3E:  MOVF   77,W
0F3F:  MOVWF  60
....................    power = (int16) power_sim; 
0F40:  MOVF   63,W
0F41:  BSF    03.5
0F42:  MOVWF  53
0F43:  BCF    03.5
0F44:  MOVF   62,W
0F45:  BSF    03.5
0F46:  MOVWF  52
0F47:  BCF    03.5
0F48:  MOVF   61,W
0F49:  BSF    03.5
0F4A:  MOVWF  51
0F4B:  BCF    03.5
0F4C:  MOVF   60,W
0F4D:  BSF    03.5
0F4E:  MOVWF  50
0F4F:  BCF    0A.3
0F50:  BCF    03.5
0F51:  CALL   321
0F52:  BSF    0A.3
0F53:  MOVF   79,W
0F54:  MOVWF  30
0F55:  MOVF   78,W
0F56:  MOVWF  2F
.................... } 
0F57:  BCF    0A.3
0F58:  BSF    0A.4
0F59:  GOTO   428 (RETURN)
....................  
....................  
.................... int16 amperecal(int16 analog){ 
0DBE:  MOVLW  FA
0DBF:  MOVWF  6D
0DC0:  MOVLW  A2
0DC1:  MOVWF  6C
0DC2:  MOVLW  48
0DC3:  MOVWF  6B
0DC4:  MOVLW  71
0DC5:  MOVWF  6A
0DC6:  MOVLW  AC
0DC7:  MOVWF  71
0DC8:  MOVLW  19
0DC9:  MOVWF  70
0DCA:  MOVLW  39
0DCB:  MOVWF  6F
0DCC:  MOVLW  7C
0DCD:  MOVWF  6E
0DCE:  MOVLW  10
0DCF:  MOVWF  75
0DD0:  MOVLW  98
0DD1:  MOVWF  74
0DD2:  MOVLW  6A
0DD3:  MOVWF  73
0DD4:  MOVLW  85
0DD5:  MOVWF  72
0DD6:  MOVLW  9A
0DD7:  MOVWF  7E
0DD8:  MOVLW  F8
0DD9:  MOVWF  7D
0DDA:  MOVLW  47
0DDB:  MOVWF  7C
0DDC:  MOVLW  8D
0DDD:  MOVWF  7B
....................    float32 analog_sim; 
....................    float32 ampere_sim; 
....................    int16 ampere; 
....................    float32 A = 0.000095671; 
....................    float32 B = 0.180762; 
....................    float32 C = 117.297; 
....................    float32 D = 25596.3; 
....................     
....................    analog_sim = analog; 
0DDE:  MOVF   5F,W
0DDF:  BSF    03.5
0DE0:  MOVWF  55
0DE1:  BCF    03.5
0DE2:  MOVF   5E,W
0DE3:  BSF    03.5
0DE4:  MOVWF  54
0DE5:  BCF    0A.3
0DE6:  BCF    03.5
0DE7:  CALL   15D
0DE8:  BSF    0A.3
0DE9:  MOVF   7A,W
0DEA:  MOVWF  63
0DEB:  MOVF   79,W
0DEC:  MOVWF  62
0DED:  MOVF   78,W
0DEE:  MOVWF  61
0DEF:  MOVF   77,W
0DF0:  MOVWF  60
....................    ampere_sim =(A*( pow(analog_sim,3)))-(B*( pow(analog_sim,2)))+(C* analog_sim)-D; 
0DF1:  MOVF   63,W
0DF2:  BSF    03.5
0DF3:  MOVWF  27
0DF4:  BCF    03.5
0DF5:  MOVF   62,W
0DF6:  BSF    03.5
0DF7:  MOVWF  26
0DF8:  BCF    03.5
0DF9:  MOVF   61,W
0DFA:  BSF    03.5
0DFB:  MOVWF  25
0DFC:  BCF    03.5
0DFD:  MOVF   60,W
0DFE:  BSF    03.5
0DFF:  MOVWF  24
0E00:  CLRF   2B
0E01:  CLRF   2A
0E02:  MOVLW  40
0E03:  MOVWF  29
0E04:  MOVLW  80
0E05:  MOVWF  28
0E06:  BCF    03.5
0E07:  CALL   41B
0E08:  MOVF   6D,W
0E09:  BSF    03.5
0E0A:  MOVWF  53
0E0B:  BCF    03.5
0E0C:  MOVF   6C,W
0E0D:  BSF    03.5
0E0E:  MOVWF  52
0E0F:  BCF    03.5
0E10:  MOVF   6B,W
0E11:  BSF    03.5
0E12:  MOVWF  51
0E13:  BCF    03.5
0E14:  MOVF   6A,W
0E15:  BSF    03.5
0E16:  MOVWF  50
0E17:  MOVF   7A,W
0E18:  MOVWF  57
0E19:  MOVF   79,W
0E1A:  MOVWF  56
0E1B:  MOVF   78,W
0E1C:  MOVWF  55
0E1D:  MOVF   77,W
0E1E:  MOVWF  54
0E1F:  BCF    0A.3
0E20:  BCF    03.5
0E21:  CALL   342
0E22:  BSF    0A.3
0E23:  MOVF   7A,W
0E24:  BSF    03.5
0E25:  MOVWF  23
0E26:  MOVF   79,W
0E27:  MOVWF  22
0E28:  MOVF   78,W
0E29:  MOVWF  21
0E2A:  MOVF   77,W
0E2B:  MOVWF  20
0E2C:  BCF    03.5
0E2D:  MOVF   63,W
0E2E:  BSF    03.5
0E2F:  MOVWF  27
0E30:  BCF    03.5
0E31:  MOVF   62,W
0E32:  BSF    03.5
0E33:  MOVWF  26
0E34:  BCF    03.5
0E35:  MOVF   61,W
0E36:  BSF    03.5
0E37:  MOVWF  25
0E38:  BCF    03.5
0E39:  MOVF   60,W
0E3A:  BSF    03.5
0E3B:  MOVWF  24
0E3C:  CLRF   2B
0E3D:  CLRF   2A
0E3E:  CLRF   29
0E3F:  MOVLW  80
0E40:  MOVWF  28
0E41:  BCF    03.5
0E42:  CALL   41B
0E43:  MOVF   71,W
0E44:  BSF    03.5
0E45:  MOVWF  53
0E46:  MOVF   70,W
0E47:  MOVWF  52
0E48:  BCF    03.5
0E49:  MOVF   6F,W
0E4A:  BSF    03.5
0E4B:  MOVWF  51
0E4C:  BCF    03.5
0E4D:  MOVF   6E,W
0E4E:  BSF    03.5
0E4F:  MOVWF  50
0E50:  MOVF   7A,W
0E51:  MOVWF  57
0E52:  MOVF   79,W
0E53:  MOVWF  56
0E54:  MOVF   78,W
0E55:  MOVWF  55
0E56:  MOVF   77,W
0E57:  MOVWF  54
0E58:  BCF    0A.3
0E59:  BCF    03.5
0E5A:  CALL   342
0E5B:  BSF    0A.3
0E5C:  BSF    03.5
0E5D:  CLRF   25
0E5E:  MOVF   04,W
0E5F:  MOVWF  24
0E60:  BCF    25.0
0E61:  BTFSC  03.7
0E62:  BSF    25.0
0E63:  BSF    03.1
0E64:  MOVF   23,W
0E65:  MOVWF  57
0E66:  MOVF   22,W
0E67:  MOVWF  56
0E68:  MOVF   21,W
0E69:  MOVWF  55
0E6A:  MOVF   20,W
0E6B:  MOVWF  54
0E6C:  MOVF   7A,W
0E6D:  MOVWF  5B
0E6E:  MOVF   79,W
0E6F:  MOVWF  5A
0E70:  MOVF   78,W
0E71:  MOVWF  59
0E72:  MOVF   77,W
0E73:  MOVWF  58
0E74:  BCF    0A.3
0E75:  BCF    03.5
0E76:  CALL   3B9
0E77:  BSF    0A.3
0E78:  BSF    03.5
0E79:  MOVF   24,W
0E7A:  MOVWF  04
0E7B:  BCF    03.7
0E7C:  BTFSC  25.0
0E7D:  BSF    03.7
0E7E:  MOVF   7A,W
0E7F:  MOVWF  23
0E80:  MOVF   79,W
0E81:  MOVWF  22
0E82:  MOVF   78,W
0E83:  MOVWF  21
0E84:  MOVF   77,W
0E85:  MOVWF  20
0E86:  MOVF   75,W
0E87:  MOVWF  53
0E88:  MOVF   74,W
0E89:  MOVWF  52
0E8A:  MOVF   73,W
0E8B:  MOVWF  51
0E8C:  MOVF   72,W
0E8D:  MOVWF  50
0E8E:  BCF    03.5
0E8F:  MOVF   63,W
0E90:  BSF    03.5
0E91:  MOVWF  57
0E92:  BCF    03.5
0E93:  MOVF   62,W
0E94:  BSF    03.5
0E95:  MOVWF  56
0E96:  BCF    03.5
0E97:  MOVF   61,W
0E98:  BSF    03.5
0E99:  MOVWF  55
0E9A:  BCF    03.5
0E9B:  MOVF   60,W
0E9C:  BSF    03.5
0E9D:  MOVWF  54
0E9E:  BCF    0A.3
0E9F:  BCF    03.5
0EA0:  CALL   342
0EA1:  BSF    0A.3
0EA2:  BSF    03.5
0EA3:  CLRF   27
0EA4:  MOVF   04,W
0EA5:  MOVWF  26
0EA6:  BCF    27.0
0EA7:  BTFSC  03.7
0EA8:  BSF    27.0
0EA9:  BCF    03.1
0EAA:  MOVF   23,W
0EAB:  MOVWF  57
0EAC:  MOVF   22,W
0EAD:  MOVWF  56
0EAE:  MOVF   21,W
0EAF:  MOVWF  55
0EB0:  MOVF   20,W
0EB1:  MOVWF  54
0EB2:  MOVF   7A,W
0EB3:  MOVWF  5B
0EB4:  MOVF   79,W
0EB5:  MOVWF  5A
0EB6:  MOVF   78,W
0EB7:  MOVWF  59
0EB8:  MOVF   77,W
0EB9:  MOVWF  58
0EBA:  BCF    0A.3
0EBB:  BCF    03.5
0EBC:  CALL   3B9
0EBD:  BSF    0A.3
0EBE:  BSF    03.5
0EBF:  MOVF   26,W
0EC0:  MOVWF  04
0EC1:  BCF    03.7
0EC2:  BTFSC  27.0
0EC3:  BSF    03.7
0EC4:  MOVF   7A,W
0EC5:  MOVWF  23
0EC6:  MOVF   79,W
0EC7:  MOVWF  22
0EC8:  MOVF   78,W
0EC9:  MOVWF  21
0ECA:  MOVF   77,W
0ECB:  MOVWF  20
0ECC:  CLRF   29
0ECD:  MOVF   04,W
0ECE:  MOVWF  28
0ECF:  BCF    29.0
0ED0:  BTFSC  03.7
0ED1:  BSF    29.0
0ED2:  BSF    03.1
0ED3:  MOVF   23,W
0ED4:  MOVWF  57
0ED5:  MOVF   22,W
0ED6:  MOVWF  56
0ED7:  MOVF   21,W
0ED8:  MOVWF  55
0ED9:  MOVF   20,W
0EDA:  MOVWF  54
0EDB:  MOVF   7E,W
0EDC:  MOVWF  5B
0EDD:  MOVF   7D,W
0EDE:  MOVWF  5A
0EDF:  MOVF   7C,W
0EE0:  MOVWF  59
0EE1:  MOVF   7B,W
0EE2:  MOVWF  58
0EE3:  BCF    0A.3
0EE4:  BCF    03.5
0EE5:  CALL   3B9
0EE6:  BSF    0A.3
0EE7:  BSF    03.5
0EE8:  MOVF   28,W
0EE9:  MOVWF  04
0EEA:  BCF    03.7
0EEB:  BTFSC  29.0
0EEC:  BSF    03.7
0EED:  MOVF   7A,W
0EEE:  BCF    03.5
0EEF:  MOVWF  67
0EF0:  MOVF   79,W
0EF1:  MOVWF  66
0EF2:  MOVF   78,W
0EF3:  MOVWF  65
0EF4:  MOVF   77,W
0EF5:  MOVWF  64
....................    ampere = (int16) ampere_sim; 
0EF6:  MOVF   67,W
0EF7:  BSF    03.5
0EF8:  MOVWF  53
0EF9:  BCF    03.5
0EFA:  MOVF   66,W
0EFB:  BSF    03.5
0EFC:  MOVWF  52
0EFD:  BCF    03.5
0EFE:  MOVF   65,W
0EFF:  BSF    03.5
0F00:  MOVWF  51
0F01:  BCF    03.5
0F02:  MOVF   64,W
0F03:  BSF    03.5
0F04:  MOVWF  50
0F05:  BCF    0A.3
0F06:  BCF    03.5
0F07:  CALL   321
0F08:  BSF    0A.3
0F09:  MOVF   79,W
0F0A:  MOVWF  69
0F0B:  MOVF   78,W
0F0C:  MOVWF  68
....................    return ampere; 
0F0D:  MOVF   68,W
0F0E:  MOVWF  78
0F0F:  MOVF   69,W
0F10:  MOVWF  79
.................... } 
0F11:  BCF    0A.3
0F12:  BSF    0A.4
0F13:  GOTO   41B (RETURN)
....................  
.................... void unitcal(){ 
....................    //unit+=1; 
....................    //unit_sim = unit_sim + (power*1.388E-6); //(power*0.001*(5/3600)) 
....................    unit_sim = unit_sim + (power*1.388E1); 
0F5A:  MOVF   30,W
0F5B:  BSF    03.5
0F5C:  MOVWF  55
0F5D:  BCF    03.5
0F5E:  MOVF   2F,W
0F5F:  BSF    03.5
0F60:  MOVWF  54
0F61:  BCF    0A.3
0F62:  BCF    03.5
0F63:  CALL   15D
0F64:  BSF    0A.3
0F65:  MOVF   7A,W
0F66:  BSF    03.5
0F67:  MOVWF  53
0F68:  MOVF   79,W
0F69:  MOVWF  52
0F6A:  MOVF   78,W
0F6B:  MOVWF  51
0F6C:  MOVF   77,W
0F6D:  MOVWF  50
0F6E:  MOVLW  7B
0F6F:  MOVWF  57
0F70:  MOVLW  14
0F71:  MOVWF  56
0F72:  MOVLW  5E
0F73:  MOVWF  55
0F74:  MOVLW  82
0F75:  MOVWF  54
0F76:  BCF    0A.3
0F77:  BCF    03.5
0F78:  CALL   342
0F79:  BSF    0A.3
0F7A:  BCF    03.1
0F7B:  MOVF   37,W
0F7C:  BSF    03.5
0F7D:  MOVWF  57
0F7E:  BCF    03.5
0F7F:  MOVF   36,W
0F80:  BSF    03.5
0F81:  MOVWF  56
0F82:  BCF    03.5
0F83:  MOVF   35,W
0F84:  BSF    03.5
0F85:  MOVWF  55
0F86:  BCF    03.5
0F87:  MOVF   34,W
0F88:  BSF    03.5
0F89:  MOVWF  54
0F8A:  MOVF   7A,W
0F8B:  MOVWF  5B
0F8C:  MOVF   79,W
0F8D:  MOVWF  5A
0F8E:  MOVF   78,W
0F8F:  MOVWF  59
0F90:  MOVF   77,W
0F91:  MOVWF  58
0F92:  BCF    0A.3
0F93:  BCF    03.5
0F94:  CALL   3B9
0F95:  BSF    0A.3
0F96:  MOVF   7A,W
0F97:  MOVWF  37
0F98:  MOVF   79,W
0F99:  MOVWF  36
0F9A:  MOVF   78,W
0F9B:  MOVWF  35
0F9C:  MOVF   77,W
0F9D:  MOVWF  34
....................    unit = (int16) unit_sim; 
0F9E:  MOVF   37,W
0F9F:  BSF    03.5
0FA0:  MOVWF  53
0FA1:  BCF    03.5
0FA2:  MOVF   36,W
0FA3:  BSF    03.5
0FA4:  MOVWF  52
0FA5:  BCF    03.5
0FA6:  MOVF   35,W
0FA7:  BSF    03.5
0FA8:  MOVWF  51
0FA9:  BCF    03.5
0FAA:  MOVF   34,W
0FAB:  BSF    03.5
0FAC:  MOVWF  50
0FAD:  BCF    0A.3
0FAE:  BCF    03.5
0FAF:  CALL   321
0FB0:  BSF    0A.3
0FB1:  MOVF   79,W
0FB2:  MOVWF  33
0FB3:  MOVF   78,W
0FB4:  MOVWF  32
....................    writeUnitValueInEEPROM(); 
.................... } 
0FEA:  BCF    0A.3
0FEB:  BSF    0A.4
0FEC:  GOTO   42F (RETURN)
....................  
.................... void billcal(){ 
....................    bill_sim = unit_sim * 3; 
07BF:  MOVF   37,W
07C0:  BSF    03.5
07C1:  MOVWF  53
07C2:  BCF    03.5
07C3:  MOVF   36,W
07C4:  BSF    03.5
07C5:  MOVWF  52
07C6:  BCF    03.5
07C7:  MOVF   35,W
07C8:  BSF    03.5
07C9:  MOVWF  51
07CA:  BCF    03.5
07CB:  MOVF   34,W
07CC:  BSF    03.5
07CD:  MOVWF  50
07CE:  CLRF   57
07CF:  CLRF   56
07D0:  MOVLW  40
07D1:  MOVWF  55
07D2:  MOVLW  80
07D3:  MOVWF  54
07D4:  BCF    03.5
07D5:  CALL   342
07D6:  MOVF   7A,W
07D7:  MOVWF  3B
07D8:  MOVF   79,W
07D9:  MOVWF  3A
07DA:  MOVF   78,W
07DB:  MOVWF  39
07DC:  MOVF   77,W
07DD:  MOVWF  38
....................    bill = (int16) bill_sim; 
07DE:  MOVF   3B,W
07DF:  BSF    03.5
07E0:  MOVWF  53
07E1:  BCF    03.5
07E2:  MOVF   3A,W
07E3:  BSF    03.5
07E4:  MOVWF  52
07E5:  BCF    03.5
07E6:  MOVF   39,W
07E7:  BSF    03.5
07E8:  MOVWF  51
07E9:  BCF    03.5
07EA:  MOVF   38,W
07EB:  BSF    03.5
07EC:  MOVWF  50
07ED:  BCF    03.5
07EE:  CALL   321
07EF:  MOVF   79,W
07F0:  MOVWF  3D
07F1:  MOVF   78,W
07F2:  MOVWF  3C
.................... } 
07F3:  BCF    0A.3
07F4:  BSF    0A.4
07F5:  GOTO   437 (RETURN)
....................  
.................... ///////////////// 
.................... //calculation Function 
.................... //////////////// 
....................  
....................  
....................  
.................... ///////////////// 
.................... //Menu Function 
.................... //////////////// 
.................... void menushutdown(){ 
....................       selectmenu = checkexit(selectmenu);   
1268:  MOVLW  00
1269:  BTFSC  2A.0
126A:  MOVLW  01
126B:  MOVWF  68
126C:  MOVF   68,W
126D:  MOVWF  69
1283:  BCF    2A.0
1284:  BTFSC  78.0
1285:  BSF    2A.0
....................             if(selectmenu > 0){ 
1286:  MOVLW  00
1287:  BTFSC  2A.0
1288:  MOVLW  01
1289:  XORLW  00
128A:  BTFSC  03.2
128B:  GOTO   28F
....................                //save eeprom here 
....................                status_power_on = 0; 
128C:  BCF    2A.2
....................                selectmenu = 0; 
128D:  BCF    2A.0
....................             } 
....................             else{ 
128E:  GOTO   2BB
....................                
....................                setDisplayPos(1);                      
128F:  MOVLW  01
1290:  BSF    03.5
1291:  MOVWF  31
1292:  BCF    0A.4
1293:  BCF    03.5
1294:  CALL   1B5
1295:  BSF    0A.4
....................                displayLongText("POWER OFF"); 
1296:  CLRF   78
1297:  MOVLW  0A
1298:  MOVWF  77
1299:  MOVLW  5E
129A:  MOVWF  04
129B:  BCF    03.7
129C:  MOVF   78,W
129D:  BCF    0A.4
129E:  CALL   065
129F:  BSF    0A.4
12A0:  MOVWF  00
12A1:  INCF   78,F
12A2:  INCF   04,F
12A3:  DECFSZ 77,F
12A4:  GOTO   29C
12A5:  BSF    03.5
12A6:  CLRF   34
12A7:  MOVLW  5E
12A8:  MOVWF  33
12A9:  BCF    0A.4
12AA:  BCF    03.5
12AB:  CALL   1D1
12AC:  BSF    0A.4
....................                menu = checkleft(menu); 
12AD:  MOVF   29,W
12AE:  BSF    03.5
12AF:  MOVWF  31
12B0:  BCF    03.5
12B1:  CALL   031
12B2:  MOVF   78,W
12B3:  MOVWF  29
....................                menu = checkright(menu); 
12B4:  MOVF   29,W
12B5:  BSF    03.5
12B6:  MOVWF  31
12B7:  BCF    03.5
12B8:  CALL   047
12B9:  MOVF   78,W
12BA:  MOVWF  29
....................             } 
....................  
....................  
.................... } 
12BB:  BCF    0A.3
12BC:  BSF    0A.4
12BD:  GOTO   617 (RETURN)
....................  
....................  
....................  
....................  
....................  
.................... void menuresetunit(){ 
....................       selectmenu = checkselect(selectmenu); 
11BF:  MOVLW  00
11C0:  BTFSC  2A.0
11C1:  MOVLW  01
11C2:  MOVWF  67
11C3:  BSF    03.5
11C4:  MOVWF  32
11C5:  BCF    0A.4
11C6:  BCF    03.5
11C7:  CALL   1A1
11C8:  BSF    0A.4
11C9:  BCF    2A.0
11CA:  BTFSC  78.0
11CB:  BSF    2A.0
....................             if(selectmenu > 0){ 
11CC:  MOVLW  00
11CD:  BTFSC  2A.0
11CE:  MOVLW  01
11CF:  XORLW  00
11D0:  BTFSC  03.2
11D1:  GOTO   239
....................                clearUnitValueInEEPROM(); 
....................                selectmenu = 0; 
1212:  BCF    2A.0
....................                setDisplayPos(1);                      
1213:  MOVLW  01
1214:  BSF    03.5
1215:  MOVWF  31
1216:  BCF    0A.4
1217:  BCF    03.5
1218:  CALL   1B5
1219:  BSF    0A.4
....................                displayLongText("Clear OK"); 
121A:  CLRF   78
121B:  MOVLW  09
121C:  MOVWF  77
121D:  MOVLW  5E
121E:  MOVWF  04
121F:  BCF    03.7
1220:  MOVF   78,W
1221:  BCF    0A.4
1222:  CALL   073
1223:  BSF    0A.4
1224:  MOVWF  00
1225:  INCF   78,F
1226:  INCF   04,F
1227:  DECFSZ 77,F
1228:  GOTO   220
1229:  BSF    03.5
122A:  CLRF   34
122B:  MOVLW  5E
122C:  MOVWF  33
122D:  BCF    0A.4
122E:  BCF    03.5
122F:  CALL   1D1
1230:  BSF    0A.4
....................                delay_ms(200); 
1231:  MOVLW  C8
1232:  BSF    03.5
1233:  MOVWF  31
1234:  BCF    0A.4
1235:  BCF    03.5
1236:  CALL   200
1237:  BSF    0A.4
....................             } 
....................             else{ 
1238:  GOTO   265
....................                 
....................                setDisplayPos(1);                      
1239:  MOVLW  01
123A:  BSF    03.5
123B:  MOVWF  31
123C:  BCF    0A.4
123D:  BCF    03.5
123E:  CALL   1B5
123F:  BSF    0A.4
....................                displayLongText("RESET Unit&Money"); 
1240:  CLRF   78
1241:  MOVLW  11
1242:  MOVWF  77
1243:  MOVLW  A0
1244:  MOVWF  04
1245:  BCF    03.7
1246:  MOVF   78,W
1247:  BCF    0A.4
1248:  CALL   080
1249:  BSF    0A.4
124A:  MOVWF  00
124B:  INCF   78,F
124C:  INCF   04,F
124D:  DECFSZ 77,F
124E:  GOTO   246
124F:  BSF    03.5
1250:  CLRF   34
1251:  MOVLW  A0
1252:  MOVWF  33
1253:  BCF    0A.4
1254:  BCF    03.5
1255:  CALL   1D1
1256:  BSF    0A.4
....................                menu = checkleft(menu); 
1257:  MOVF   29,W
1258:  BSF    03.5
1259:  MOVWF  31
125A:  BCF    03.5
125B:  CALL   031
125C:  MOVF   78,W
125D:  MOVWF  29
....................                menu = checkright(menu); 
125E:  MOVF   29,W
125F:  BSF    03.5
1260:  MOVWF  31
1261:  BCF    03.5
1262:  CALL   047
1263:  MOVF   78,W
1264:  MOVWF  29
....................             } 
....................  
....................  
.................... } 
1265:  BCF    0A.3
1266:  BSF    0A.4
1267:  GOTO   612 (RETURN)
....................  
.................... void menucalibrate(){ 
....................      selectmenu = checkselect(selectmenu); 
105D:  MOVLW  00
105E:  BTFSC  2A.0
105F:  MOVLW  01
1060:  MOVWF  6F
1061:  BSF    03.5
1062:  MOVWF  32
1063:  BCF    0A.4
1064:  BCF    03.5
1065:  CALL   1A1
1066:  BSF    0A.4
1067:  BCF    2A.0
1068:  BTFSC  78.0
1069:  BSF    2A.0
....................             if(selectmenu > 0){ 
106A:  MOVLW  00
106B:  BTFSC  2A.0
106C:  MOVLW  01
106D:  XORLW  00
106E:  BTFSC  03.2
106F:  GOTO   0C5
....................                REFERENCE_VALUE = calibrate(analog0); 
1070:  MOVF   2C,W
1071:  BSF    03.5
1072:  MOVWF  32
1073:  BCF    03.5
1074:  MOVF   2B,W
1075:  BSF    03.5
1076:  MOVWF  31
107B:  MOVF   79,W
107C:  BCF    03.5
107D:  MOVWF  2E
107E:  MOVF   78,W
107F:  MOVWF  2D
....................                selectmenu = 0; 
1080:  BCF    2A.0
....................                setDisplayPos(1);                      
1081:  MOVLW  01
1082:  BSF    03.5
1083:  MOVWF  31
1084:  BCF    0A.4
1085:  BCF    03.5
1086:  CALL   1B5
1087:  BSF    0A.4
....................                displayLongText("   CALIBRATE    "); 
1088:  CLRF   78
1089:  MOVLW  11
108A:  MOVWF  77
108B:  MOVLW  5E
108C:  MOVWF  04
108D:  BCF    03.7
108E:  MOVF   78,W
108F:  BCF    0A.4
1090:  CALL   095
1091:  BSF    0A.4
1092:  MOVWF  00
1093:  INCF   78,F
1094:  INCF   04,F
1095:  DECFSZ 77,F
1096:  GOTO   08E
1097:  BSF    03.5
1098:  CLRF   34
1099:  MOVLW  5E
109A:  MOVWF  33
109B:  BCF    0A.4
109C:  BCF    03.5
109D:  CALL   1D1
109E:  BSF    0A.4
....................                setDisplayPos(17);                      
109F:  MOVLW  11
10A0:  BSF    03.5
10A1:  MOVWF  31
10A2:  BCF    0A.4
10A3:  BCF    03.5
10A4:  CALL   1B5
10A5:  BSF    0A.4
....................                displayLongText("  OK !!! "); 
10A6:  CLRF   78
10A7:  MOVLW  0A
10A8:  MOVWF  77
10A9:  MOVLW  5E
10AA:  MOVWF  04
10AB:  BCF    03.7
10AC:  MOVF   78,W
10AD:  BCF    0A.4
10AE:  CALL   0AA
10AF:  BSF    0A.4
10B0:  MOVWF  00
10B1:  INCF   78,F
10B2:  INCF   04,F
10B3:  DECFSZ 77,F
10B4:  GOTO   0AC
10B5:  BSF    03.5
10B6:  CLRF   34
10B7:  MOVLW  5E
10B8:  MOVWF  33
10B9:  BCF    0A.4
10BA:  BCF    03.5
10BB:  CALL   1D1
10BC:  BSF    0A.4
....................                delay_ms(200); 
10BD:  MOVLW  C8
10BE:  BSF    03.5
10BF:  MOVWF  31
10C0:  BCF    0A.4
10C1:  BCF    03.5
10C2:  CALL   200
10C3:  BSF    0A.4
....................             } 
....................             else{ 
10C4:  GOTO   10F
....................                 
....................                setDisplayPos(1);                      
10C5:  MOVLW  01
10C6:  BSF    03.5
10C7:  MOVWF  31
10C8:  BCF    0A.4
10C9:  BCF    03.5
10CA:  CALL   1B5
10CB:  BSF    0A.4
....................                displayLongText("   CALIBRATE    "); 
10CC:  CLRF   78
10CD:  MOVLW  11
10CE:  MOVWF  77
10CF:  MOVLW  A0
10D0:  MOVWF  04
10D1:  BCF    03.7
10D2:  MOVF   78,W
10D3:  BCF    0A.4
10D4:  CALL   095
10D5:  BSF    0A.4
10D6:  MOVWF  00
10D7:  INCF   78,F
10D8:  INCF   04,F
10D9:  DECFSZ 77,F
10DA:  GOTO   0D2
10DB:  BSF    03.5
10DC:  CLRF   34
10DD:  MOVLW  A0
10DE:  MOVWF  33
10DF:  BCF    0A.4
10E0:  BCF    03.5
10E1:  CALL   1D1
10E2:  BSF    0A.4
....................                setDisplayPos(17);                      
10E3:  MOVLW  11
10E4:  BSF    03.5
10E5:  MOVWF  31
10E6:  BCF    0A.4
10E7:  BCF    03.5
10E8:  CALL   1B5
10E9:  BSF    0A.4
....................                displayLongText("  This Tool !!! "); 
10EA:  CLRF   78
10EB:  MOVLW  11
10EC:  MOVWF  77
10ED:  MOVLW  A0
10EE:  MOVWF  04
10EF:  BCF    03.7
10F0:  MOVF   78,W
10F1:  BCF    0A.4
10F2:  CALL   0B8
10F3:  BSF    0A.4
10F4:  MOVWF  00
10F5:  INCF   78,F
10F6:  INCF   04,F
10F7:  DECFSZ 77,F
10F8:  GOTO   0F0
10F9:  BSF    03.5
10FA:  CLRF   34
10FB:  MOVLW  A0
10FC:  MOVWF  33
10FD:  BCF    0A.4
10FE:  BCF    03.5
10FF:  CALL   1D1
1100:  BSF    0A.4
....................                menu = checkleft(menu); 
1101:  MOVF   29,W
1102:  BSF    03.5
1103:  MOVWF  31
1104:  BCF    03.5
1105:  CALL   031
1106:  MOVF   78,W
1107:  MOVWF  29
....................                menu = checkright(menu); 
1108:  MOVF   29,W
1109:  BSF    03.5
110A:  MOVWF  31
110B:  BCF    03.5
110C:  CALL   047
110D:  MOVF   78,W
110E:  MOVWF  29
....................              
....................             } 
.................... } 
110F:  BCF    0A.3
1110:  BSF    0A.4
1111:  GOTO   606 (RETURN)
....................  
.................... void menuresetcalibrate(){ 
....................    selectmenu = checkselect(selectmenu); 
1112:  MOVLW  00
1113:  BTFSC  2A.0
1114:  MOVLW  01
1115:  MOVWF  6E
1116:  BSF    03.5
1117:  MOVWF  32
1118:  BCF    0A.4
1119:  BCF    03.5
111A:  CALL   1A1
111B:  BSF    0A.4
111C:  BCF    2A.0
111D:  BTFSC  78.0
111E:  BSF    2A.0
....................             if(selectmenu > 0){ 
111F:  MOVLW  00
1120:  BTFSC  2A.0
1121:  MOVLW  01
1122:  XORLW  00
1123:  BTFSC  03.2
1124:  GOTO   172
....................                REFERENCE_VALUE = resetcalibrate(); 
1129:  MOVF   79,W
112A:  MOVWF  2E
112B:  MOVF   78,W
112C:  MOVWF  2D
....................                selectmenu = 0; 
112D:  BCF    2A.0
....................                setDisplayPos(1);                      
112E:  MOVLW  01
112F:  BSF    03.5
1130:  MOVWF  31
1131:  BCF    0A.4
1132:  BCF    03.5
1133:  CALL   1B5
1134:  BSF    0A.4
....................                displayLongText("RESET CALIBRATE"); 
1135:  CLRF   78
1136:  MOVLW  10
1137:  MOVWF  77
1138:  MOVLW  5E
1139:  MOVWF  04
113A:  BCF    03.7
113B:  MOVF   78,W
113C:  BCF    0A.4
113D:  CALL   0CD
113E:  BSF    0A.4
113F:  MOVWF  00
1140:  INCF   78,F
1141:  INCF   04,F
1142:  DECFSZ 77,F
1143:  GOTO   13B
1144:  BSF    03.5
1145:  CLRF   34
1146:  MOVLW  5E
1147:  MOVWF  33
1148:  BCF    0A.4
1149:  BCF    03.5
114A:  CALL   1D1
114B:  BSF    0A.4
....................                setDisplayPos(18);                      
114C:  MOVLW  12
114D:  BSF    03.5
114E:  MOVWF  31
114F:  BCF    0A.4
1150:  BCF    03.5
1151:  CALL   1B5
1152:  BSF    0A.4
....................                displayLongText("OK !!!"); 
1153:  CLRF   78
1154:  MOVLW  07
1155:  MOVWF  77
1156:  MOVLW  5E
1157:  MOVWF  04
1158:  BCF    03.7
1159:  MOVF   78,W
115A:  BCF    0A.4
115B:  CALL   0E1
115C:  BSF    0A.4
115D:  MOVWF  00
115E:  INCF   78,F
115F:  INCF   04,F
1160:  DECFSZ 77,F
1161:  GOTO   159
1162:  BSF    03.5
1163:  CLRF   34
1164:  MOVLW  5E
1165:  MOVWF  33
1166:  BCF    0A.4
1167:  BCF    03.5
1168:  CALL   1D1
1169:  BSF    0A.4
....................                delay_ms(200); 
116A:  MOVLW  C8
116B:  BSF    03.5
116C:  MOVWF  31
116D:  BCF    0A.4
116E:  BCF    03.5
116F:  CALL   200
1170:  BSF    0A.4
....................             } 
....................             else{ 
1171:  GOTO   1BC
....................                 
....................                setDisplayPos(1);                      
1172:  MOVLW  01
1173:  BSF    03.5
1174:  MOVWF  31
1175:  BCF    0A.4
1176:  BCF    03.5
1177:  CALL   1B5
1178:  BSF    0A.4
....................                displayLongText("RESET CALIBRATE"); 
1179:  CLRF   78
117A:  MOVLW  10
117B:  MOVWF  77
117C:  MOVLW  A0
117D:  MOVWF  04
117E:  BCF    03.7
117F:  MOVF   78,W
1180:  BCF    0A.4
1181:  CALL   0CD
1182:  BSF    0A.4
1183:  MOVWF  00
1184:  INCF   78,F
1185:  INCF   04,F
1186:  DECFSZ 77,F
1187:  GOTO   17F
1188:  BSF    03.5
1189:  CLRF   34
118A:  MOVLW  A0
118B:  MOVWF  33
118C:  BCF    0A.4
118D:  BCF    03.5
118E:  CALL   1D1
118F:  BSF    0A.4
....................                setDisplayPos(18);                      
1190:  MOVLW  12
1191:  BSF    03.5
1192:  MOVWF  31
1193:  BCF    0A.4
1194:  BCF    03.5
1195:  CALL   1B5
1196:  BSF    0A.4
....................                displayLongText("This Tool !!!"); 
1197:  CLRF   78
1198:  MOVLW  0E
1199:  MOVWF  77
119A:  MOVLW  A0
119B:  MOVWF  04
119C:  BCF    03.7
119D:  MOVF   78,W
119E:  BCF    0A.4
119F:  CALL   0EC
11A0:  BSF    0A.4
11A1:  MOVWF  00
11A2:  INCF   78,F
11A3:  INCF   04,F
11A4:  DECFSZ 77,F
11A5:  GOTO   19D
11A6:  BSF    03.5
11A7:  CLRF   34
11A8:  MOVLW  A0
11A9:  MOVWF  33
11AA:  BCF    0A.4
11AB:  BCF    03.5
11AC:  CALL   1D1
11AD:  BSF    0A.4
....................                menu = checkleft(menu); 
11AE:  MOVF   29,W
11AF:  BSF    03.5
11B0:  MOVWF  31
11B1:  BCF    03.5
11B2:  CALL   031
11B3:  MOVF   78,W
11B4:  MOVWF  29
....................                menu = checkright(menu); 
11B5:  MOVF   29,W
11B6:  BSF    03.5
11B7:  MOVWF  31
11B8:  BCF    03.5
11B9:  CALL   047
11BA:  MOVF   78,W
11BB:  MOVWF  29
....................              
....................             } 
....................     
....................  
.................... } 
11BC:  BCF    0A.3
11BD:  BSF    0A.4
11BE:  GOTO   60C (RETURN)
....................  
....................  
.................... ///////////////// 
.................... //Menu Function 
.................... //////////////// 
....................  
....................  
....................  
.................... ///////////////// 
.................... //Calibrate Function 
.................... //////////////// 
....................  
.................... int16 calibrate(int16 analog){ 
....................    return analog; //You could use this function when there's no input electric device. 
1077:  MOVF   31,W
1078:  MOVWF  78
1079:  MOVF   32,W
107A:  MOVWF  79
....................  
....................  
.................... } 
.................... int16 resetcalibrate(){ 
....................    return 525;   //return old reference. 
1125:  MOVLW  0D
1126:  MOVWF  78
1127:  MOVLW  02
1128:  MOVWF  79
....................  
.................... } 
.................... ///////////////// 
.................... //Calibrate Function 
.................... //////////////// 
....................  
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
.................... int1 checkselect(int1 menu){ 
....................         
....................       if(selectUsed==0 && selectPush==1){ 
01A1:  BTFSC  28.1
01A2:  GOTO   1B0
01A3:  BTFSS  28.0
01A4:  GOTO   1B0
....................          selectUsed=1; 
01A5:  BSF    28.1
....................          menu+=1; 
01A6:  MOVLW  01
01A7:  BSF    03.5
01A8:  ADDWF  32,F
....................          clearDisplay(); 
01A9:  BCF    03.5
01AA:  CALL   18E
....................          delay_us(100); 
01AB:  MOVLW  A6
01AC:  MOVWF  77
01AD:  DECFSZ 77,F
01AE:  GOTO   1AD
01AF:  NOP
....................        } 
....................     
....................        return menu; 
01B0:  BSF    03.5
01B1:  MOVF   32,W
01B2:  MOVWF  78
.................... } 
01B3:  BCF    03.5
01B4:  RETURN
....................  
.................... int1 checkexit(int1 menu){ 
....................         
....................        if(exitUsed==0 && exitPush==1){ 
126E:  BTFSC  28.3
126F:  GOTO   27E
1270:  BTFSS  28.2
1271:  GOTO   27E
....................          exitUsed=1; 
1272:  BSF    28.3
....................          menu+=1; 
1273:  MOVLW  01
1274:  ADDWF  69,F
....................          clearDisplay(); 
1275:  BCF    0A.4
1276:  CALL   18E
1277:  BSF    0A.4
....................          delay_us(100); 
1278:  MOVLW  A6
1279:  MOVWF  77
127A:  DECFSZ 77,F
127B:  GOTO   27A
127C:  NOP
....................        } 
....................        else{ 
127D:  GOTO   281
....................          return menu; 
127E:  MOVF   69,W
127F:  MOVWF  78
1280:  GOTO   283
....................         
....................        } 
....................        return menu; 
1281:  MOVF   69,W
1282:  MOVWF  78
.................... } 
....................  
.................... int checkleft(int menu){ 
....................         
....................        if(leftUsed==0 && leftPush==1){ 
1031:  BTFSC  28.5
1032:  GOTO   042
1033:  BTFSS  28.4
1034:  GOTO   042
....................          leftUsed=1; 
1035:  BSF    28.5
....................          menu-=1; 
1036:  MOVLW  01
1037:  BSF    03.5
1038:  SUBWF  31,F
....................          clearDisplay(); 
1039:  BCF    0A.4
103A:  BCF    03.5
103B:  CALL   18E
103C:  BSF    0A.4
....................          delay_us(100); 
103D:  MOVLW  A6
103E:  MOVWF  77
103F:  DECFSZ 77,F
1040:  GOTO   03F
1041:  NOP
....................        } 
....................         
....................        return menu; 
1042:  BSF    03.5
1043:  MOVF   31,W
1044:  MOVWF  78
.................... } 
1045:  BCF    03.5
1046:  RETURN
....................  
.................... int checkright(int menu){ 
....................         
....................        if(rightUsed==0 && rightPush==1){ 
1047:  BTFSC  28.7
1048:  GOTO   058
1049:  BTFSS  28.6
104A:  GOTO   058
....................          rightUsed=1; 
104B:  BSF    28.7
....................          menu+=1; 
104C:  MOVLW  01
104D:  BSF    03.5
104E:  ADDWF  31,F
....................          clearDisplay(); 
104F:  BCF    0A.4
1050:  BCF    03.5
1051:  CALL   18E
1052:  BSF    0A.4
....................          delay_us(100); 
1053:  MOVLW  A6
1054:  MOVWF  77
1055:  DECFSZ 77,F
1056:  GOTO   055
1057:  NOP
....................        } 
....................         
....................        return menu; 
1058:  BSF    03.5
1059:  MOVF   31,W
105A:  MOVWF  78
.................... } 
105B:  BCF    03.5
105C:  RETURN
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void displayLongText(char* text) { 
....................  
.................... int i ; 
.................... i2c_start(); 
01D1:  BSF    03.5
01D2:  BSF    11.0
01D3:  BTFSC  11.0
01D4:  GOTO   1D3
.................... i2c_write(DISPLAY_ADDRESS); 
01D5:  MOVLW  B4
01D6:  MOVWF  37
01D7:  BCF    03.5
01D8:  CALL   17C
.................... i2c_write(DISPLAY_CMD_SEND_LONG_TEXT); 
01D9:  MOVLW  05
01DA:  BSF    03.5
01DB:  MOVWF  37
01DC:  BCF    03.5
01DD:  CALL   17C
....................  
.................... for(i=0;text[i]!='\0';i++) 
01DE:  BSF    03.5
01DF:  CLRF   35
01E0:  MOVF   35,W
01E1:  ADDWF  33,W
01E2:  MOVWF  04
01E3:  BCF    03.7
01E4:  BTFSC  34.0
01E5:  BSF    03.7
01E6:  MOVF   00,F
01E7:  BTFSC  03.2
01E8:  GOTO   1F7
.................... { 
.................... i2c_write(text[i]); 
01E9:  MOVF   35,W
01EA:  ADDWF  33,W
01EB:  MOVWF  04
01EC:  BCF    03.7
01ED:  BTFSC  34.0
01EE:  BSF    03.7
01EF:  MOVF   00,W
01F0:  MOVWF  36
01F1:  MOVWF  37
01F2:  BCF    03.5
01F3:  CALL   17C
....................  
.................... } 
01F4:  BSF    03.5
01F5:  INCF   35,F
01F6:  GOTO   1E0
.................... i2c_write('\0'); 
01F7:  CLRF   37
01F8:  BCF    03.5
01F9:  CALL   17C
.................... i2c_stop(); 
01FA:  BSF    03.5
01FB:  BSF    11.2
01FC:  BTFSC  11.2
01FD:  GOTO   1FC
....................  
.................... //delay_ms(100); 
....................  
.................... } 
01FE:  BCF    03.5
01FF:  RETURN
....................  
....................  
.................... void displayValue(int16 value[]) { 
....................  
....................    i2c_start(); 
1000:  BSF    03.5
1001:  BSF    11.0
1002:  BTFSC  11.0
1003:  GOTO   002
....................    i2c_write(DISPLAY_ADDRESS); 
1004:  MOVLW  B4
1005:  MOVWF  37
1006:  BCF    0A.4
1007:  BCF    03.5
1008:  CALL   17C
1009:  BSF    0A.4
....................    i2c_write(DISPLAY_CMD_SEND_VALUE); 
100A:  MOVLW  02
100B:  BSF    03.5
100C:  MOVWF  37
100D:  BCF    0A.4
100E:  BCF    03.5
100F:  CALL   17C
1010:  BSF    0A.4
....................    i2c_write((int)(value>>8)); // high byte 
1011:  MOVF   5F,W
1012:  CLRF   7A
1013:  MOVWF  60
1014:  BSF    03.5
1015:  MOVWF  37
1016:  BCF    0A.4
1017:  BCF    03.5
1018:  CALL   17C
1019:  BSF    0A.4
....................    i2c_write((int)(value & 0xFF)); // low byte 
101A:  MOVF   5E,W
101B:  MOVWF  77
101C:  CLRF   7A
101D:  MOVF   5E,W
101E:  MOVWF  60
101F:  BSF    03.5
1020:  MOVWF  37
1021:  BCF    0A.4
1022:  BCF    03.5
1023:  CALL   17C
1024:  BSF    0A.4
....................    i2c_write('\0'); 
1025:  BSF    03.5
1026:  CLRF   37
1027:  BCF    0A.4
1028:  BCF    03.5
1029:  CALL   17C
102A:  BSF    0A.4
....................    i2c_stop(); 
102B:  BSF    03.5
102C:  BSF    11.2
102D:  BTFSC  11.2
102E:  GOTO   02D
....................     
.................... } 
102F:  BCF    03.5
1030:  RETURN
....................  
.................... void clearDisplay(){ 
....................  
....................    i2c_start(); 
018E:  BSF    03.5
018F:  BSF    11.0
0190:  BTFSC  11.0
0191:  GOTO   190
....................    i2c_write(DISPLAY_ADDRESS); 
0192:  MOVLW  B4
0193:  MOVWF  37
0194:  BCF    03.5
0195:  CALL   17C
....................    i2c_write(DISPLAY_CMD_CLS); 
0196:  MOVLW  06
0197:  BSF    03.5
0198:  MOVWF  37
0199:  BCF    03.5
019A:  CALL   17C
....................    i2c_stop(); 
019B:  BSF    03.5
019C:  BSF    11.2
019D:  BTFSC  11.2
019E:  GOTO   19D
.................... } 
019F:  BCF    03.5
01A0:  RETURN
....................  
.................... void setDisplayPos(int pos){ 
....................    i2c_start(); 
01B5:  BSF    03.5
01B6:  BSF    11.0
01B7:  BTFSC  11.0
01B8:  GOTO   1B7
....................    i2c_write(DISPLAY_ADDRESS); 
01B9:  MOVLW  B4
01BA:  MOVWF  37
01BB:  BCF    03.5
01BC:  CALL   17C
....................    i2c_write(DISPLAY_CMD_SETPOS); 
01BD:  MOVLW  08
01BE:  BSF    03.5
01BF:  MOVWF  37
01C0:  BCF    03.5
01C1:  CALL   17C
....................    i2c_write(pos); 
01C2:  BSF    03.5
01C3:  MOVF   31,W
01C4:  MOVWF  37
01C5:  BCF    03.5
01C6:  CALL   17C
....................    i2c_write('\0'); 
01C7:  BSF    03.5
01C8:  CLRF   37
01C9:  BCF    03.5
01CA:  CALL   17C
....................    i2c_stop(); 
01CB:  BSF    03.5
01CC:  BSF    11.2
01CD:  BTFSC  11.2
01CE:  GOTO   1CD
.................... } 
01CF:  BCF    03.5
01D0:  RETURN
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 

Configuration Fuses:
   Word  1: 2FC2   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT

ROM data:
002100: 0000 
