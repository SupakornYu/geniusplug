CCS PCM C Compiler, Version 4.141, 64203               05-¡.¾.-14 20:04

               Filename:   C:\Users\pump\Documents\geniusplug\GeniusPlugPIC\Microcontroller\project1.lst

               ROM used:   5868 words (72%)
                           Largest free fragment is 2048
               RAM used:   45 (12%) at main() level
                           214 (58%) worst case
               Stack:     6 worst case (5 in main + 1 for interrupts)

0000:  MOVLW  13
0001:  MOVWF  0A
0002:  GOTO   3A9
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   032
001B:  MOVLW  8C
001C:  MOVWF  04
001D:  BTFSS  00.0
001E:  GOTO   021
001F:  BTFSC  0C.0
0020:  GOTO   035
0021:  MOVF   22,W
0022:  MOVWF  04
0023:  MOVF   23,W
0024:  MOVWF  77
0025:  MOVF   24,W
0026:  MOVWF  78
0027:  MOVF   25,W
0028:  MOVWF  79
0029:  MOVF   26,W
002A:  MOVWF  7A
002B:  MOVF   20,W
002C:  MOVWF  0A
002D:  SWAPF  21,W
002E:  MOVWF  03
002F:  SWAPF  7F,F
0030:  SWAPF  7F,W
0031:  RETFIE
0032:  BCF    0A.3
0033:  BCF    0A.4
0034:  GOTO   0F5
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   144
.................... #include <16F886.h> 
.................... //////// Standard Header file for the PIC16F886 device //////////////// 
.................... #device PIC16F886 
*
*
*
*
*
.................... #list 
....................  
.................... #device adc=10  // use 10-bit ADC 
.................... #device PASS_STRINGS=IN_RAM 
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
052D:  BSF    03.5
052E:  BCF    4F.0
....................    y = x; 
052F:  MOVF   43,W
0530:  MOVWF  48
0531:  MOVF   42,W
0532:  MOVWF  47
0533:  MOVF   41,W
0534:  MOVWF  46
0535:  MOVF   40,W
0536:  MOVWF  45
....................  
....................    if (x < 0) 
0537:  MOVF   43,W
0538:  MOVWF  53
0539:  MOVF   42,W
053A:  MOVWF  52
053B:  MOVF   41,W
053C:  MOVWF  51
053D:  MOVF   40,W
053E:  MOVWF  50
053F:  CLRF   57
0540:  CLRF   56
0541:  CLRF   55
0542:  CLRF   54
0543:  BCF    03.5
0544:  CALL   242
0545:  BTFSS  03.0
0546:  GOTO   54D
....................    { 
....................       s = 1; 
0547:  BSF    03.5
0548:  BSF    4F.0
....................       y = -y; 
0549:  MOVF   46,W
054A:  XORLW  80
054B:  MOVWF  46
054C:  BCF    03.5
....................    } 
....................  
....................    if (y <= 32768.0) 
054D:  BSF    03.5
054E:  MOVF   48,W
054F:  MOVWF  53
0550:  MOVF   47,W
0551:  MOVWF  52
0552:  MOVF   46,W
0553:  MOVWF  51
0554:  MOVF   45,W
0555:  MOVWF  50
0556:  CLRF   57
0557:  CLRF   56
0558:  CLRF   55
0559:  MOVLW  8E
055A:  MOVWF  54
055B:  BCF    03.5
055C:  CALL   242
055D:  BTFSC  03.0
055E:  GOTO   561
055F:  BTFSS  03.2
0560:  GOTO   57E
....................       res = (float32)(unsigned int16)y; 
0561:  BSF    03.5
0562:  MOVF   48,W
0563:  MOVWF  53
0564:  MOVF   47,W
0565:  MOVWF  52
0566:  MOVF   46,W
0567:  MOVWF  51
0568:  MOVF   45,W
0569:  MOVWF  50
056A:  BCF    03.5
056B:  CALL   34F
056C:  MOVF   79,W
056D:  BSF    03.5
056E:  MOVWF  55
056F:  MOVF   78,W
0570:  MOVWF  54
0571:  BCF    03.5
0572:  CALL   18B
0573:  MOVF   7A,W
0574:  BSF    03.5
0575:  MOVWF  4C
0576:  MOVF   79,W
0577:  MOVWF  4B
0578:  MOVF   78,W
0579:  MOVWF  4A
057A:  MOVF   77,W
057B:  MOVWF  49
....................  
....................  else if (y < 10000000.0) 
057C:  GOTO   656
057D:  BCF    03.5
057E:  BSF    03.5
057F:  MOVF   48,W
0580:  MOVWF  53
0581:  MOVF   47,W
0582:  MOVWF  52
0583:  MOVF   46,W
0584:  MOVWF  51
0585:  MOVF   45,W
0586:  MOVWF  50
0587:  MOVLW  80
0588:  MOVWF  57
0589:  MOVLW  96
058A:  MOVWF  56
058B:  MOVLW  18
058C:  MOVWF  55
058D:  MOVLW  96
058E:  MOVWF  54
058F:  BCF    03.5
0590:  CALL   242
0591:  BTFSS  03.0
0592:  GOTO   64D
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
0593:  BSF    03.5
0594:  MOVF   48,W
0595:  MOVWF  53
0596:  MOVF   47,W
0597:  MOVWF  52
0598:  MOVF   46,W
0599:  MOVWF  51
059A:  MOVF   45,W
059B:  MOVWF  50
059C:  CLRF   57
059D:  CLRF   56
059E:  CLRF   55
059F:  MOVLW  70
05A0:  MOVWF  54
05A1:  BCF    03.5
05A2:  CALL   370
05A3:  MOVF   7A,W
05A4:  BSF    03.5
05A5:  MOVWF  53
05A6:  MOVF   79,W
05A7:  MOVWF  52
05A8:  MOVF   78,W
05A9:  MOVWF  51
05AA:  MOVF   77,W
05AB:  MOVWF  50
05AC:  BCF    03.5
05AD:  CALL   34F
05AE:  MOVF   79,W
05AF:  BSF    03.5
05B0:  MOVWF  4E
05B1:  MOVF   78,W
05B2:  MOVWF  4D
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
05B3:  MOVF   48,W
05B4:  MOVWF  53
05B5:  MOVF   47,W
05B6:  MOVWF  52
05B7:  MOVF   46,W
05B8:  MOVWF  51
05B9:  MOVF   45,W
05BA:  MOVWF  50
05BB:  CLRF   57
05BC:  CLRF   56
05BD:  CLRF   55
05BE:  MOVLW  70
05BF:  MOVWF  54
05C0:  BCF    03.5
05C1:  CALL   370
05C2:  MOVF   7A,W
05C3:  BSF    03.5
05C4:  MOVWF  53
05C5:  MOVF   79,W
05C6:  MOVWF  52
05C7:  MOVF   78,W
05C8:  MOVWF  51
05C9:  MOVF   77,W
05CA:  MOVWF  50
05CB:  MOVF   4E,W
05CC:  MOVWF  55
05CD:  MOVF   4D,W
05CE:  MOVWF  54
05CF:  BCF    03.5
05D0:  CALL   18B
05D1:  BSF    03.1
05D2:  BSF    03.5
05D3:  MOVF   53,W
05D4:  MOVWF  57
05D5:  MOVF   52,W
05D6:  MOVWF  56
05D7:  MOVF   51,W
05D8:  MOVWF  55
05D9:  MOVF   50,W
05DA:  MOVWF  54
05DB:  MOVF   7A,W
05DC:  MOVWF  5B
05DD:  MOVF   79,W
05DE:  MOVWF  5A
05DF:  MOVF   78,W
05E0:  MOVWF  59
05E1:  MOVF   77,W
05E2:  MOVWF  58
05E3:  BCF    03.5
05E4:  CALL   3E7
05E5:  BSF    03.5
05E6:  CLRF   53
05E7:  CLRF   52
05E8:  CLRF   51
05E9:  MOVLW  8E
05EA:  MOVWF  50
05EB:  MOVF   7A,W
05EC:  MOVWF  57
05ED:  MOVF   79,W
05EE:  MOVWF  56
05EF:  MOVF   78,W
05F0:  MOVWF  55
05F1:  MOVF   77,W
05F2:  MOVWF  54
05F3:  BCF    03.5
05F4:  CALL   370
05F5:  MOVF   7A,W
05F6:  BSF    03.5
05F7:  MOVWF  48
05F8:  MOVF   79,W
05F9:  MOVWF  47
05FA:  MOVF   78,W
05FB:  MOVWF  46
05FC:  MOVF   77,W
05FD:  MOVWF  45
....................       res = 32768.0*(float32)l; 
05FE:  MOVF   4E,W
05FF:  MOVWF  55
0600:  MOVF   4D,W
0601:  MOVWF  54
0602:  BCF    03.5
0603:  CALL   18B
0604:  BSF    03.5
0605:  CLRF   53
0606:  CLRF   52
0607:  CLRF   51
0608:  MOVLW  8E
0609:  MOVWF  50
060A:  MOVF   7A,W
060B:  MOVWF  57
060C:  MOVF   79,W
060D:  MOVWF  56
060E:  MOVF   78,W
060F:  MOVWF  55
0610:  MOVF   77,W
0611:  MOVWF  54
0612:  BCF    03.5
0613:  CALL   370
0614:  MOVF   7A,W
0615:  BSF    03.5
0616:  MOVWF  4C
0617:  MOVF   79,W
0618:  MOVWF  4B
0619:  MOVF   78,W
061A:  MOVWF  4A
061B:  MOVF   77,W
061C:  MOVWF  49
....................       res += (float32)(unsigned int16)y; 
061D:  MOVF   48,W
061E:  MOVWF  53
061F:  MOVF   47,W
0620:  MOVWF  52
0621:  MOVF   46,W
0622:  MOVWF  51
0623:  MOVF   45,W
0624:  MOVWF  50
0625:  BCF    03.5
0626:  CALL   34F
0627:  MOVF   79,W
0628:  BSF    03.5
0629:  MOVWF  55
062A:  MOVF   78,W
062B:  MOVWF  54
062C:  BCF    03.5
062D:  CALL   18B
062E:  BCF    03.1
062F:  BSF    03.5
0630:  MOVF   4C,W
0631:  MOVWF  57
0632:  MOVF   4B,W
0633:  MOVWF  56
0634:  MOVF   4A,W
0635:  MOVWF  55
0636:  MOVF   49,W
0637:  MOVWF  54
0638:  MOVF   7A,W
0639:  MOVWF  5B
063A:  MOVF   79,W
063B:  MOVWF  5A
063C:  MOVF   78,W
063D:  MOVWF  59
063E:  MOVF   77,W
063F:  MOVWF  58
0640:  BCF    03.5
0641:  CALL   3E7
0642:  MOVF   7A,W
0643:  BSF    03.5
0644:  MOVWF  4C
0645:  MOVF   79,W
0646:  MOVWF  4B
0647:  MOVF   78,W
0648:  MOVWF  4A
0649:  MOVF   77,W
064A:  MOVWF  49
....................    } 
....................  
....................  else 
064B:  GOTO   656
064C:  BCF    03.5
....................   res = y; 
064D:  BSF    03.5
064E:  MOVF   48,W
064F:  MOVWF  4C
0650:  MOVF   47,W
0651:  MOVWF  4B
0652:  MOVF   46,W
0653:  MOVWF  4A
0654:  MOVF   45,W
0655:  MOVWF  49
....................  
....................  y = y - (float32)(unsigned int16)y; 
0656:  MOVF   48,W
0657:  MOVWF  53
0658:  MOVF   47,W
0659:  MOVWF  52
065A:  MOVF   46,W
065B:  MOVWF  51
065C:  MOVF   45,W
065D:  MOVWF  50
065E:  BCF    03.5
065F:  CALL   34F
0660:  MOVF   79,W
0661:  BSF    03.5
0662:  MOVWF  55
0663:  MOVF   78,W
0664:  MOVWF  54
0665:  BCF    03.5
0666:  CALL   18B
0667:  BSF    03.1
0668:  BSF    03.5
0669:  MOVF   48,W
066A:  MOVWF  57
066B:  MOVF   47,W
066C:  MOVWF  56
066D:  MOVF   46,W
066E:  MOVWF  55
066F:  MOVF   45,W
0670:  MOVWF  54
0671:  MOVF   7A,W
0672:  MOVWF  5B
0673:  MOVF   79,W
0674:  MOVWF  5A
0675:  MOVF   78,W
0676:  MOVWF  59
0677:  MOVF   77,W
0678:  MOVWF  58
0679:  BCF    03.5
067A:  CALL   3E7
067B:  MOVF   7A,W
067C:  BSF    03.5
067D:  MOVWF  48
067E:  MOVF   79,W
067F:  MOVWF  47
0680:  MOVF   78,W
0681:  MOVWF  46
0682:  MOVF   77,W
0683:  MOVWF  45
....................  
....................  if (s) 
0684:  BTFSS  4F.0
0685:  GOTO   689
....................   res = -res; 
0686:  MOVF   4A,W
0687:  XORLW  80
0688:  MOVWF  4A
....................  
....................  if (y != 0) 
0689:  MOVF   48,W
068A:  MOVWF  53
068B:  MOVF   47,W
068C:  MOVWF  52
068D:  MOVF   46,W
068E:  MOVWF  51
068F:  MOVF   45,W
0690:  MOVWF  50
0691:  CLRF   57
0692:  CLRF   56
0693:  CLRF   55
0694:  CLRF   54
0695:  BCF    03.5
0696:  CALL   242
0697:  BTFSC  03.2
0698:  GOTO   6D6
....................  { 
....................   if (s == 1 && n == 0) 
0699:  BSF    03.5
069A:  BTFSS  4F.0
069B:  GOTO   6B8
069C:  MOVF   44,F
069D:  BTFSS  03.2
069E:  GOTO   6B8
....................    res -= 1.0; 
069F:  BSF    03.1
06A0:  MOVF   4C,W
06A1:  MOVWF  57
06A2:  MOVF   4B,W
06A3:  MOVWF  56
06A4:  MOVF   4A,W
06A5:  MOVWF  55
06A6:  MOVF   49,W
06A7:  MOVWF  54
06A8:  CLRF   5B
06A9:  CLRF   5A
06AA:  CLRF   59
06AB:  MOVLW  7F
06AC:  MOVWF  58
06AD:  BCF    03.5
06AE:  CALL   3E7
06AF:  MOVF   7A,W
06B0:  BSF    03.5
06B1:  MOVWF  4C
06B2:  MOVF   79,W
06B3:  MOVWF  4B
06B4:  MOVF   78,W
06B5:  MOVWF  4A
06B6:  MOVF   77,W
06B7:  MOVWF  49
....................  
....................   if (s == 0 && n == 1) 
06B8:  BTFSC  4F.0
06B9:  GOTO   6D5
06BA:  DECFSZ 44,W
06BB:  GOTO   6D5
....................    res += 1.0; 
06BC:  BCF    03.1
06BD:  MOVF   4C,W
06BE:  MOVWF  57
06BF:  MOVF   4B,W
06C0:  MOVWF  56
06C1:  MOVF   4A,W
06C2:  MOVWF  55
06C3:  MOVF   49,W
06C4:  MOVWF  54
06C5:  CLRF   5B
06C6:  CLRF   5A
06C7:  CLRF   59
06C8:  MOVLW  7F
06C9:  MOVWF  58
06CA:  BCF    03.5
06CB:  CALL   3E7
06CC:  MOVF   7A,W
06CD:  BSF    03.5
06CE:  MOVWF  4C
06CF:  MOVF   79,W
06D0:  MOVWF  4B
06D1:  MOVF   78,W
06D2:  MOVWF  4A
06D3:  MOVF   77,W
06D4:  MOVWF  49
06D5:  BCF    03.5
....................  } 
....................  if (x == 0) 
06D6:  BSF    03.5
06D7:  MOVF   43,W
06D8:  MOVWF  53
06D9:  MOVF   42,W
06DA:  MOVWF  52
06DB:  MOVF   41,W
06DC:  MOVWF  51
06DD:  MOVF   40,W
06DE:  MOVWF  50
06DF:  CLRF   57
06E0:  CLRF   56
06E1:  CLRF   55
06E2:  CLRF   54
06E3:  BCF    03.5
06E4:  CALL   242
06E5:  BTFSS  03.2
06E6:  GOTO   6ED
....................     res = 0; 
06E7:  BSF    03.5
06E8:  CLRF   4C
06E9:  CLRF   4B
06EA:  CLRF   4A
06EB:  CLRF   49
06EC:  BCF    03.5
....................  
....................  return (res); 
06ED:  BSF    03.5
06EE:  MOVF   49,W
06EF:  MOVWF  77
06F0:  MOVF   4A,W
06F1:  MOVWF  78
06F2:  MOVF   4B,W
06F3:  MOVWF  79
06F4:  MOVF   4C,W
06F5:  MOVWF  7A
.................... } 
06F6:  BCF    03.5
06F7:  RETURN
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
078A:  MOVF   3F,W
078B:  MOVWF  43
078C:  MOVF   3E,W
078D:  MOVWF  42
078E:  MOVF   3D,W
078F:  MOVWF  41
0790:  MOVF   3C,W
0791:  MOVWF  40
0792:  CLRF   44
0793:  BCF    03.5
0794:  CALL   52D
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
0759:  MOVF   3F,W
075A:  MOVWF  43
075B:  MOVF   3E,W
075C:  MOVWF  42
075D:  MOVF   3D,W
075E:  MOVWF  41
075F:  MOVF   3C,W
0760:  MOVWF  40
0761:  MOVLW  01
0762:  MOVWF  44
0763:  BCF    03.5
0764:  CALL   52D
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
06F8:  BSF    03.5
06F9:  MOVF   33,W
06FA:  MOVWF  53
06FB:  MOVF   32,W
06FC:  MOVWF  52
06FD:  MOVF   31,W
06FE:  MOVWF  51
06FF:  MOVF   30,W
0700:  MOVWF  50
0701:  CLRF   57
0702:  CLRF   56
0703:  CLRF   55
0704:  CLRF   54
0705:  BCF    03.5
0706:  CALL   242
0707:  BTFSC  03.2
0708:  GOTO   7C5
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
0709:  BSF    03.5
070A:  MOVF   2F,W
070B:  MOVWF  4C
070C:  MOVF   2E,W
070D:  MOVWF  4B
070E:  MOVF   2D,W
070F:  MOVWF  4A
0710:  MOVF   2C,W
0711:  MOVWF  49
0712:  MOVF   33,W
0713:  MOVWF  50
0714:  MOVF   32,W
0715:  MOVWF  4F
0716:  MOVF   31,W
0717:  MOVWF  4E
0718:  MOVF   30,W
0719:  MOVWF  4D
071A:  BCF    03.5
071B:  CALL   283
071C:  MOVF   7A,W
071D:  BSF    03.5
071E:  MOVWF  3B
071F:  MOVF   79,W
0720:  MOVWF  3A
0721:  MOVF   78,W
0722:  MOVWF  39
0723:  MOVF   77,W
0724:  MOVWF  38
0725:  MOVF   3B,W
0726:  MOVWF  53
0727:  MOVF   3A,W
0728:  MOVWF  52
0729:  MOVF   39,W
072A:  MOVWF  51
072B:  MOVF   38,W
072C:  MOVWF  50
072D:  CLRF   57
072E:  CLRF   56
072F:  CLRF   55
0730:  CLRF   54
0731:  BCF    03.5
0732:  CALL   242
0733:  BTFSS  03.0
0734:  GOTO   766
0735:  BSF    03.5
0736:  MOVF   2F,W
0737:  MOVWF  4C
0738:  MOVF   2E,W
0739:  MOVWF  4B
073A:  MOVF   2D,W
073B:  MOVWF  4A
073C:  MOVF   2C,W
073D:  MOVWF  49
073E:  MOVF   33,W
073F:  MOVWF  50
0740:  MOVF   32,W
0741:  MOVWF  4F
0742:  MOVF   31,W
0743:  MOVWF  4E
0744:  MOVF   30,W
0745:  MOVWF  4D
0746:  BCF    03.5
0747:  CALL   283
0748:  MOVF   7A,W
0749:  BSF    03.5
074A:  MOVWF  3B
074B:  MOVF   79,W
074C:  MOVWF  3A
074D:  MOVF   78,W
074E:  MOVWF  39
074F:  MOVF   77,W
0750:  MOVWF  38
0751:  MOVF   3B,W
0752:  MOVWF  3F
0753:  MOVF   3A,W
0754:  MOVWF  3E
0755:  MOVF   39,W
0756:  MOVWF  3D
0757:  MOVF   38,W
0758:  MOVWF  3C
0765:  GOTO   795
0766:  BSF    03.5
0767:  MOVF   2F,W
0768:  MOVWF  4C
0769:  MOVF   2E,W
076A:  MOVWF  4B
076B:  MOVF   2D,W
076C:  MOVWF  4A
076D:  MOVF   2C,W
076E:  MOVWF  49
076F:  MOVF   33,W
0770:  MOVWF  50
0771:  MOVF   32,W
0772:  MOVWF  4F
0773:  MOVF   31,W
0774:  MOVWF  4E
0775:  MOVF   30,W
0776:  MOVWF  4D
0777:  BCF    03.5
0778:  CALL   283
0779:  MOVF   7A,W
077A:  BSF    03.5
077B:  MOVWF  3B
077C:  MOVF   79,W
077D:  MOVWF  3A
077E:  MOVF   78,W
077F:  MOVWF  39
0780:  MOVF   77,W
0781:  MOVWF  38
0782:  MOVF   3B,W
0783:  MOVWF  3F
0784:  MOVF   3A,W
0785:  MOVWF  3E
0786:  MOVF   39,W
0787:  MOVWF  3D
0788:  MOVF   38,W
0789:  MOVWF  3C
0795:  MOVF   7A,W
0796:  BSF    03.5
0797:  MOVWF  37
0798:  MOVF   79,W
0799:  MOVWF  36
079A:  MOVF   78,W
079B:  MOVWF  35
079C:  MOVF   77,W
079D:  MOVWF  34
....................       return(x-(i*y)); 
079E:  MOVF   37,W
079F:  MOVWF  53
07A0:  MOVF   36,W
07A1:  MOVWF  52
07A2:  MOVF   35,W
07A3:  MOVWF  51
07A4:  MOVF   34,W
07A5:  MOVWF  50
07A6:  MOVF   33,W
07A7:  MOVWF  57
07A8:  MOVF   32,W
07A9:  MOVWF  56
07AA:  MOVF   31,W
07AB:  MOVWF  55
07AC:  MOVF   30,W
07AD:  MOVWF  54
07AE:  BCF    03.5
07AF:  CALL   370
07B0:  BSF    03.1
07B1:  BSF    03.5
07B2:  MOVF   2F,W
07B3:  MOVWF  57
07B4:  MOVF   2E,W
07B5:  MOVWF  56
07B6:  MOVF   2D,W
07B7:  MOVWF  55
07B8:  MOVF   2C,W
07B9:  MOVWF  54
07BA:  MOVF   7A,W
07BB:  MOVWF  5B
07BC:  MOVF   79,W
07BD:  MOVWF  5A
07BE:  MOVF   78,W
07BF:  MOVWF  59
07C0:  MOVF   77,W
07C1:  MOVWF  58
07C2:  BCF    03.5
07C3:  CALL   3E7
07C4:  GOTO   7C5
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
07C5:  RETURN
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
09EC:  BSF    03.5
09ED:  MOVF   33,W
09EE:  MOVWF  53
09EF:  MOVF   32,W
09F0:  MOVWF  52
09F1:  MOVF   31,W
09F2:  MOVWF  51
09F3:  MOVF   30,W
09F4:  MOVWF  50
09F5:  MOVLW  3B
09F6:  MOVWF  57
09F7:  MOVLW  AA
09F8:  MOVWF  56
09F9:  MOVLW  38
09FA:  MOVWF  55
09FB:  MOVLW  7F
09FC:  MOVWF  54
09FD:  BCF    0A.3
09FE:  BCF    03.5
09FF:  CALL   370
0A00:  BSF    0A.3
0A01:  MOVF   7A,W
0A02:  BSF    03.5
0A03:  MOVWF  53
0A04:  MOVF   79,W
0A05:  MOVWF  52
0A06:  MOVF   78,W
0A07:  MOVWF  51
0A08:  MOVF   77,W
0A09:  MOVWF  50
0A0A:  BCF    0A.3
0A0B:  BCF    03.5
0A0C:  CALL   34F
0A0D:  BSF    0A.3
0A0E:  MOVF   78,W
0A0F:  BSF    03.5
0A10:  MOVWF  40
....................    s = 0; 
0A11:  BCF    41.0
....................    y = x; 
0A12:  MOVF   33,W
0A13:  MOVWF  37
0A14:  MOVF   32,W
0A15:  MOVWF  36
0A16:  MOVF   31,W
0A17:  MOVWF  35
0A18:  MOVF   30,W
0A19:  MOVWF  34
....................  
....................    if (x < 0) 
0A1A:  MOVF   33,W
0A1B:  MOVWF  53
0A1C:  MOVF   32,W
0A1D:  MOVWF  52
0A1E:  MOVF   31,W
0A1F:  MOVWF  51
0A20:  MOVF   30,W
0A21:  MOVWF  50
0A22:  CLRF   57
0A23:  CLRF   56
0A24:  CLRF   55
0A25:  CLRF   54
0A26:  BCF    0A.3
0A27:  BCF    03.5
0A28:  CALL   242
0A29:  BSF    0A.3
0A2A:  BTFSS  03.0
0A2B:  GOTO   234
....................    { 
....................       s = 1; 
0A2C:  BSF    03.5
0A2D:  BSF    41.0
....................       n = -n; 
0A2E:  COMF   40,F
0A2F:  INCF   40,F
....................       y = -y; 
0A30:  MOVF   35,W
0A31:  XORLW  80
0A32:  MOVWF  35
0A33:  BCF    03.5
....................    } 
....................  
....................    res = 0.0; 
0A34:  BSF    03.5
0A35:  CLRF   3B
0A36:  CLRF   3A
0A37:  CLRF   39
0A38:  CLRF   38
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
0A39:  CLRF   43
0A3A:  MOVLW  B8
0A3B:  MOVWF  42
0A3C:  MOVF   42,W
0A3D:  MOVWF  04
0A3E:  BCF    03.7
0A3F:  BTFSC  43.0
0A40:  BSF    03.7
0A41:  MOVLW  7F
0A42:  ADDWF  40,W
0A43:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
0A44:  MOVF   37,W
0A45:  MOVWF  53
0A46:  MOVF   36,W
0A47:  MOVWF  52
0A48:  MOVF   35,W
0A49:  MOVWF  51
0A4A:  MOVF   34,W
0A4B:  MOVWF  50
0A4C:  MOVLW  3B
0A4D:  MOVWF  57
0A4E:  MOVLW  AA
0A4F:  MOVWF  56
0A50:  MOVLW  38
0A51:  MOVWF  55
0A52:  MOVLW  7F
0A53:  MOVWF  54
0A54:  BCF    0A.3
0A55:  BCF    03.5
0A56:  CALL   370
0A57:  BSF    0A.3
0A58:  MOVF   7A,W
0A59:  BSF    03.5
0A5A:  MOVWF  45
0A5B:  MOVF   79,W
0A5C:  MOVWF  44
0A5D:  MOVF   78,W
0A5E:  MOVWF  43
0A5F:  MOVF   77,W
0A60:  MOVWF  42
0A61:  CLRF   47
0A62:  MOVF   40,W
0A63:  MOVWF  46
0A64:  BTFSC  46.7
0A65:  DECF   47,F
0A66:  BCF    0A.3
0A67:  BCF    03.5
0A68:  CALL   7C6
0A69:  BSF    0A.3
0A6A:  BSF    03.1
0A6B:  BSF    03.5
0A6C:  MOVF   45,W
0A6D:  MOVWF  57
0A6E:  MOVF   44,W
0A6F:  MOVWF  56
0A70:  MOVF   43,W
0A71:  MOVWF  55
0A72:  MOVF   42,W
0A73:  MOVWF  54
0A74:  MOVF   7A,W
0A75:  MOVWF  5B
0A76:  MOVF   79,W
0A77:  MOVWF  5A
0A78:  MOVF   78,W
0A79:  MOVWF  59
0A7A:  MOVF   77,W
0A7B:  MOVWF  58
0A7C:  BCF    0A.3
0A7D:  BCF    03.5
0A7E:  CALL   3E7
0A7F:  BSF    0A.3
0A80:  MOVF   7A,W
0A81:  BSF    03.5
0A82:  MOVWF  37
0A83:  MOVF   79,W
0A84:  MOVWF  36
0A85:  MOVF   78,W
0A86:  MOVWF  35
0A87:  MOVF   77,W
0A88:  MOVWF  34
....................  
....................    r = pe[0]*y + pe[1]; 
0A89:  MOVLW  7C
0A8A:  MOVWF  53
0A8B:  MOVLW  88
0A8C:  MOVWF  52
0A8D:  MOVLW  59
0A8E:  MOVWF  51
0A8F:  MOVLW  72
0A90:  MOVWF  50
0A91:  MOVF   37,W
0A92:  MOVWF  57
0A93:  MOVF   36,W
0A94:  MOVWF  56
0A95:  MOVF   35,W
0A96:  MOVWF  55
0A97:  MOVF   34,W
0A98:  MOVWF  54
0A99:  BCF    0A.3
0A9A:  BCF    03.5
0A9B:  CALL   370
0A9C:  BSF    0A.3
0A9D:  MOVF   7A,W
0A9E:  BSF    03.5
0A9F:  MOVWF  45
0AA0:  MOVF   79,W
0AA1:  MOVWF  44
0AA2:  MOVF   78,W
0AA3:  MOVWF  43
0AA4:  MOVF   77,W
0AA5:  MOVWF  42
0AA6:  BCF    03.1
0AA7:  MOVF   45,W
0AA8:  MOVWF  57
0AA9:  MOVF   44,W
0AAA:  MOVWF  56
0AAB:  MOVF   43,W
0AAC:  MOVWF  55
0AAD:  MOVF   42,W
0AAE:  MOVWF  54
0AAF:  MOVLW  E0
0AB0:  MOVWF  5B
0AB1:  MOVLW  97
0AB2:  MOVWF  5A
0AB3:  MOVLW  26
0AB4:  MOVWF  59
0AB5:  MOVLW  75
0AB6:  MOVWF  58
0AB7:  BCF    0A.3
0AB8:  BCF    03.5
0AB9:  CALL   3E7
0ABA:  BSF    0A.3
0ABB:  MOVF   7A,W
0ABC:  BSF    03.5
0ABD:  MOVWF  3F
0ABE:  MOVF   79,W
0ABF:  MOVWF  3E
0AC0:  MOVF   78,W
0AC1:  MOVWF  3D
0AC2:  MOVF   77,W
0AC3:  MOVWF  3C
....................    r = r*y + pe[2]; 
0AC4:  MOVF   3F,W
0AC5:  MOVWF  53
0AC6:  MOVF   3E,W
0AC7:  MOVWF  52
0AC8:  MOVF   3D,W
0AC9:  MOVWF  51
0ACA:  MOVF   3C,W
0ACB:  MOVWF  50
0ACC:  MOVF   37,W
0ACD:  MOVWF  57
0ACE:  MOVF   36,W
0ACF:  MOVWF  56
0AD0:  MOVF   35,W
0AD1:  MOVWF  55
0AD2:  MOVF   34,W
0AD3:  MOVWF  54
0AD4:  BCF    0A.3
0AD5:  BCF    03.5
0AD6:  CALL   370
0AD7:  BSF    0A.3
0AD8:  MOVF   7A,W
0AD9:  BSF    03.5
0ADA:  MOVWF  45
0ADB:  MOVF   79,W
0ADC:  MOVWF  44
0ADD:  MOVF   78,W
0ADE:  MOVWF  43
0ADF:  MOVF   77,W
0AE0:  MOVWF  42
0AE1:  BCF    03.1
0AE2:  MOVF   45,W
0AE3:  MOVWF  57
0AE4:  MOVF   44,W
0AE5:  MOVWF  56
0AE6:  MOVF   43,W
0AE7:  MOVWF  55
0AE8:  MOVF   42,W
0AE9:  MOVWF  54
0AEA:  MOVLW  C4
0AEB:  MOVWF  5B
0AEC:  MOVLW  1D
0AED:  MOVWF  5A
0AEE:  MOVLW  1E
0AEF:  MOVWF  59
0AF0:  MOVLW  78
0AF1:  MOVWF  58
0AF2:  BCF    0A.3
0AF3:  BCF    03.5
0AF4:  CALL   3E7
0AF5:  BSF    0A.3
0AF6:  MOVF   7A,W
0AF7:  BSF    03.5
0AF8:  MOVWF  3F
0AF9:  MOVF   79,W
0AFA:  MOVWF  3E
0AFB:  MOVF   78,W
0AFC:  MOVWF  3D
0AFD:  MOVF   77,W
0AFE:  MOVWF  3C
....................    r = r*y + pe[3]; 
0AFF:  MOVF   3F,W
0B00:  MOVWF  53
0B01:  MOVF   3E,W
0B02:  MOVWF  52
0B03:  MOVF   3D,W
0B04:  MOVWF  51
0B05:  MOVF   3C,W
0B06:  MOVWF  50
0B07:  MOVF   37,W
0B08:  MOVWF  57
0B09:  MOVF   36,W
0B0A:  MOVWF  56
0B0B:  MOVF   35,W
0B0C:  MOVWF  55
0B0D:  MOVF   34,W
0B0E:  MOVWF  54
0B0F:  BCF    0A.3
0B10:  BCF    03.5
0B11:  CALL   370
0B12:  BSF    0A.3
0B13:  MOVF   7A,W
0B14:  BSF    03.5
0B15:  MOVWF  45
0B16:  MOVF   79,W
0B17:  MOVWF  44
0B18:  MOVF   78,W
0B19:  MOVWF  43
0B1A:  MOVF   77,W
0B1B:  MOVWF  42
0B1C:  BCF    03.1
0B1D:  MOVF   45,W
0B1E:  MOVWF  57
0B1F:  MOVF   44,W
0B20:  MOVWF  56
0B21:  MOVF   43,W
0B22:  MOVWF  55
0B23:  MOVF   42,W
0B24:  MOVWF  54
0B25:  MOVLW  5E
0B26:  MOVWF  5B
0B27:  MOVLW  50
0B28:  MOVWF  5A
0B29:  MOVLW  63
0B2A:  MOVWF  59
0B2B:  MOVLW  7A
0B2C:  MOVWF  58
0B2D:  BCF    0A.3
0B2E:  BCF    03.5
0B2F:  CALL   3E7
0B30:  BSF    0A.3
0B31:  MOVF   7A,W
0B32:  BSF    03.5
0B33:  MOVWF  3F
0B34:  MOVF   79,W
0B35:  MOVWF  3E
0B36:  MOVF   78,W
0B37:  MOVWF  3D
0B38:  MOVF   77,W
0B39:  MOVWF  3C
....................    r = r*y + pe[4]; 
0B3A:  MOVF   3F,W
0B3B:  MOVWF  53
0B3C:  MOVF   3E,W
0B3D:  MOVWF  52
0B3E:  MOVF   3D,W
0B3F:  MOVWF  51
0B40:  MOVF   3C,W
0B41:  MOVWF  50
0B42:  MOVF   37,W
0B43:  MOVWF  57
0B44:  MOVF   36,W
0B45:  MOVWF  56
0B46:  MOVF   35,W
0B47:  MOVWF  55
0B48:  MOVF   34,W
0B49:  MOVWF  54
0B4A:  BCF    0A.3
0B4B:  BCF    03.5
0B4C:  CALL   370
0B4D:  BSF    0A.3
0B4E:  MOVF   7A,W
0B4F:  BSF    03.5
0B50:  MOVWF  45
0B51:  MOVF   79,W
0B52:  MOVWF  44
0B53:  MOVF   78,W
0B54:  MOVWF  43
0B55:  MOVF   77,W
0B56:  MOVWF  42
0B57:  BCF    03.1
0B58:  MOVF   45,W
0B59:  MOVWF  57
0B5A:  MOVF   44,W
0B5B:  MOVWF  56
0B5C:  MOVF   43,W
0B5D:  MOVWF  55
0B5E:  MOVF   42,W
0B5F:  MOVWF  54
0B60:  MOVLW  1A
0B61:  MOVWF  5B
0B62:  MOVLW  FE
0B63:  MOVWF  5A
0B64:  MOVLW  75
0B65:  MOVWF  59
0B66:  MOVLW  7C
0B67:  MOVWF  58
0B68:  BCF    0A.3
0B69:  BCF    03.5
0B6A:  CALL   3E7
0B6B:  BSF    0A.3
0B6C:  MOVF   7A,W
0B6D:  BSF    03.5
0B6E:  MOVWF  3F
0B6F:  MOVF   79,W
0B70:  MOVWF  3E
0B71:  MOVF   78,W
0B72:  MOVWF  3D
0B73:  MOVF   77,W
0B74:  MOVWF  3C
....................    r = r*y + pe[5]; 
0B75:  MOVF   3F,W
0B76:  MOVWF  53
0B77:  MOVF   3E,W
0B78:  MOVWF  52
0B79:  MOVF   3D,W
0B7A:  MOVWF  51
0B7B:  MOVF   3C,W
0B7C:  MOVWF  50
0B7D:  MOVF   37,W
0B7E:  MOVWF  57
0B7F:  MOVF   36,W
0B80:  MOVWF  56
0B81:  MOVF   35,W
0B82:  MOVWF  55
0B83:  MOVF   34,W
0B84:  MOVWF  54
0B85:  BCF    0A.3
0B86:  BCF    03.5
0B87:  CALL   370
0B88:  BSF    0A.3
0B89:  MOVF   7A,W
0B8A:  BSF    03.5
0B8B:  MOVWF  45
0B8C:  MOVF   79,W
0B8D:  MOVWF  44
0B8E:  MOVF   78,W
0B8F:  MOVWF  43
0B90:  MOVF   77,W
0B91:  MOVWF  42
0B92:  BCF    03.1
0B93:  MOVF   45,W
0B94:  MOVWF  57
0B95:  MOVF   44,W
0B96:  MOVWF  56
0B97:  MOVF   43,W
0B98:  MOVWF  55
0B99:  MOVF   42,W
0B9A:  MOVWF  54
0B9B:  MOVLW  18
0B9C:  MOVWF  5B
0B9D:  MOVLW  72
0B9E:  MOVWF  5A
0B9F:  MOVLW  31
0BA0:  MOVWF  59
0BA1:  MOVLW  7E
0BA2:  MOVWF  58
0BA3:  BCF    0A.3
0BA4:  BCF    03.5
0BA5:  CALL   3E7
0BA6:  BSF    0A.3
0BA7:  MOVF   7A,W
0BA8:  BSF    03.5
0BA9:  MOVWF  3F
0BAA:  MOVF   79,W
0BAB:  MOVWF  3E
0BAC:  MOVF   78,W
0BAD:  MOVWF  3D
0BAE:  MOVF   77,W
0BAF:  MOVWF  3C
....................  
....................    res = res*(1.0 + y*r); 
0BB0:  MOVF   37,W
0BB1:  MOVWF  53
0BB2:  MOVF   36,W
0BB3:  MOVWF  52
0BB4:  MOVF   35,W
0BB5:  MOVWF  51
0BB6:  MOVF   34,W
0BB7:  MOVWF  50
0BB8:  MOVF   3F,W
0BB9:  MOVWF  57
0BBA:  MOVF   3E,W
0BBB:  MOVWF  56
0BBC:  MOVF   3D,W
0BBD:  MOVWF  55
0BBE:  MOVF   3C,W
0BBF:  MOVWF  54
0BC0:  BCF    0A.3
0BC1:  BCF    03.5
0BC2:  CALL   370
0BC3:  BSF    0A.3
0BC4:  BCF    03.1
0BC5:  BSF    03.5
0BC6:  CLRF   57
0BC7:  CLRF   56
0BC8:  CLRF   55
0BC9:  MOVLW  7F
0BCA:  MOVWF  54
0BCB:  MOVF   7A,W
0BCC:  MOVWF  5B
0BCD:  MOVF   79,W
0BCE:  MOVWF  5A
0BCF:  MOVF   78,W
0BD0:  MOVWF  59
0BD1:  MOVF   77,W
0BD2:  MOVWF  58
0BD3:  BCF    0A.3
0BD4:  BCF    03.5
0BD5:  CALL   3E7
0BD6:  BSF    0A.3
0BD7:  BSF    03.5
0BD8:  MOVF   3B,W
0BD9:  MOVWF  53
0BDA:  MOVF   3A,W
0BDB:  MOVWF  52
0BDC:  MOVF   39,W
0BDD:  MOVWF  51
0BDE:  MOVF   38,W
0BDF:  MOVWF  50
0BE0:  MOVF   7A,W
0BE1:  MOVWF  57
0BE2:  MOVF   79,W
0BE3:  MOVWF  56
0BE4:  MOVF   78,W
0BE5:  MOVWF  55
0BE6:  MOVF   77,W
0BE7:  MOVWF  54
0BE8:  BCF    0A.3
0BE9:  BCF    03.5
0BEA:  CALL   370
0BEB:  BSF    0A.3
0BEC:  MOVF   7A,W
0BED:  BSF    03.5
0BEE:  MOVWF  3B
0BEF:  MOVF   79,W
0BF0:  MOVWF  3A
0BF1:  MOVF   78,W
0BF2:  MOVWF  39
0BF3:  MOVF   77,W
0BF4:  MOVWF  38
....................  
....................    if (s) 
0BF5:  BTFSS  41.0
0BF6:  GOTO   411
....................       res = 1.0/res; 
0BF7:  CLRF   4C
0BF8:  CLRF   4B
0BF9:  CLRF   4A
0BFA:  MOVLW  7F
0BFB:  MOVWF  49
0BFC:  MOVF   3B,W
0BFD:  MOVWF  50
0BFE:  MOVF   3A,W
0BFF:  MOVWF  4F
0C00:  MOVF   39,W
0C01:  MOVWF  4E
0C02:  MOVF   38,W
0C03:  MOVWF  4D
0C04:  BCF    0A.3
0C05:  BCF    03.5
0C06:  CALL   283
0C07:  BSF    0A.3
0C08:  MOVF   7A,W
0C09:  BSF    03.5
0C0A:  MOVWF  3B
0C0B:  MOVF   79,W
0C0C:  MOVWF  3A
0C0D:  MOVF   78,W
0C0E:  MOVWF  39
0C0F:  MOVF   77,W
0C10:  MOVWF  38
....................    return(res); 
0C11:  MOVF   38,W
0C12:  MOVWF  77
0C13:  MOVF   39,W
0C14:  MOVWF  78
0C15:  MOVF   3A,W
0C16:  MOVWF  79
0C17:  MOVF   3B,W
0C18:  MOVWF  7A
.................... } 
0C19:  BCF    03.5
0C1A:  RETURN
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
0800:  BSF    03.5
0801:  MOVF   33,W
0802:  MOVWF  37
0803:  MOVF   32,W
0804:  MOVWF  36
0805:  MOVF   31,W
0806:  MOVWF  35
0807:  MOVF   30,W
0808:  MOVWF  34
....................  
....................    if (y != 1.0) 
0809:  MOVF   37,W
080A:  MOVWF  53
080B:  MOVF   36,W
080C:  MOVWF  52
080D:  MOVF   35,W
080E:  MOVWF  51
080F:  MOVF   34,W
0810:  MOVWF  50
0811:  CLRF   57
0812:  CLRF   56
0813:  CLRF   55
0814:  MOVLW  7F
0815:  MOVWF  54
0816:  BCF    0A.3
0817:  BCF    03.5
0818:  CALL   242
0819:  BSF    0A.3
081A:  BTFSC  03.2
081B:  GOTO   1DD
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
081C:  BSF    03.5
081D:  CLRF   46
081E:  MOVLW  B4
081F:  MOVWF  45
0820:  MOVF   45,W
0821:  MOVWF  04
0822:  BCF    03.7
0823:  BTFSC  46.0
0824:  BSF    03.7
0825:  MOVLW  7E
0826:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
0827:  BSF    03.1
0828:  MOVF   37,W
0829:  MOVWF  57
082A:  MOVF   36,W
082B:  MOVWF  56
082C:  MOVF   35,W
082D:  MOVWF  55
082E:  MOVF   34,W
082F:  MOVWF  54
0830:  CLRF   5B
0831:  CLRF   5A
0832:  CLRF   59
0833:  MOVLW  7F
0834:  MOVWF  58
0835:  BCF    0A.3
0836:  BCF    03.5
0837:  CALL   3E7
0838:  BSF    0A.3
0839:  MOVF   7A,W
083A:  BSF    03.5
083B:  MOVWF  48
083C:  MOVF   79,W
083D:  MOVWF  47
083E:  MOVF   78,W
083F:  MOVWF  46
0840:  MOVF   77,W
0841:  MOVWF  45
0842:  BCF    03.1
0843:  MOVF   37,W
0844:  MOVWF  57
0845:  MOVF   36,W
0846:  MOVWF  56
0847:  MOVF   35,W
0848:  MOVWF  55
0849:  MOVF   34,W
084A:  MOVWF  54
084B:  CLRF   5B
084C:  CLRF   5A
084D:  CLRF   59
084E:  MOVLW  7F
084F:  MOVWF  58
0850:  BCF    0A.3
0851:  BCF    03.5
0852:  CALL   3E7
0853:  BSF    0A.3
0854:  BSF    03.5
0855:  MOVF   48,W
0856:  MOVWF  4C
0857:  MOVF   47,W
0858:  MOVWF  4B
0859:  MOVF   46,W
085A:  MOVWF  4A
085B:  MOVF   45,W
085C:  MOVWF  49
085D:  MOVF   7A,W
085E:  MOVWF  50
085F:  MOVF   79,W
0860:  MOVWF  4F
0861:  MOVF   78,W
0862:  MOVWF  4E
0863:  MOVF   77,W
0864:  MOVWF  4D
0865:  BCF    0A.3
0866:  BCF    03.5
0867:  CALL   283
0868:  BSF    0A.3
0869:  MOVF   7A,W
086A:  BSF    03.5
086B:  MOVWF  37
086C:  MOVF   79,W
086D:  MOVWF  36
086E:  MOVF   78,W
086F:  MOVWF  35
0870:  MOVF   77,W
0871:  MOVWF  34
....................  
....................       y2=y*y; 
0872:  MOVF   37,W
0873:  MOVWF  53
0874:  MOVF   36,W
0875:  MOVWF  52
0876:  MOVF   35,W
0877:  MOVWF  51
0878:  MOVF   34,W
0879:  MOVWF  50
087A:  MOVF   37,W
087B:  MOVWF  57
087C:  MOVF   36,W
087D:  MOVWF  56
087E:  MOVF   35,W
087F:  MOVWF  55
0880:  MOVF   34,W
0881:  MOVWF  54
0882:  BCF    0A.3
0883:  BCF    03.5
0884:  CALL   370
0885:  BSF    0A.3
0886:  MOVF   7A,W
0887:  BSF    03.5
0888:  MOVWF  43
0889:  MOVF   79,W
088A:  MOVWF  42
088B:  MOVF   78,W
088C:  MOVWF  41
088D:  MOVF   77,W
088E:  MOVWF  40
....................  
....................       res = pl[0]*y2 + pl[1]; 
088F:  MOVLW  99
0890:  MOVWF  53
0891:  MOVLW  47
0892:  MOVWF  52
0893:  MOVLW  8A
0894:  MOVWF  51
0895:  MOVLW  7F
0896:  MOVWF  50
0897:  MOVF   43,W
0898:  MOVWF  57
0899:  MOVF   42,W
089A:  MOVWF  56
089B:  MOVF   41,W
089C:  MOVWF  55
089D:  MOVF   40,W
089E:  MOVWF  54
089F:  BCF    0A.3
08A0:  BCF    03.5
08A1:  CALL   370
08A2:  BSF    0A.3
08A3:  MOVF   7A,W
08A4:  BSF    03.5
08A5:  MOVWF  48
08A6:  MOVF   79,W
08A7:  MOVWF  47
08A8:  MOVF   78,W
08A9:  MOVWF  46
08AA:  MOVF   77,W
08AB:  MOVWF  45
08AC:  BCF    03.1
08AD:  MOVF   48,W
08AE:  MOVWF  57
08AF:  MOVF   47,W
08B0:  MOVWF  56
08B1:  MOVF   46,W
08B2:  MOVWF  55
08B3:  MOVF   45,W
08B4:  MOVWF  54
08B5:  CLRF   5B
08B6:  CLRF   5A
08B7:  CLRF   59
08B8:  MOVLW  80
08B9:  MOVWF  58
08BA:  BCF    0A.3
08BB:  BCF    03.5
08BC:  CALL   3E7
08BD:  BSF    0A.3
08BE:  MOVF   7A,W
08BF:  BSF    03.5
08C0:  MOVWF  3B
08C1:  MOVF   79,W
08C2:  MOVWF  3A
08C3:  MOVF   78,W
08C4:  MOVWF  39
08C5:  MOVF   77,W
08C6:  MOVWF  38
....................  
....................       r = ql[0]*y2 + ql[1]; 
08C7:  MOVLW  4C
08C8:  MOVWF  53
08C9:  MOVLW  F3
08CA:  MOVWF  52
08CB:  MOVLW  3A
08CC:  MOVWF  51
08CD:  MOVLW  7B
08CE:  MOVWF  50
08CF:  MOVF   43,W
08D0:  MOVWF  57
08D1:  MOVF   42,W
08D2:  MOVWF  56
08D3:  MOVF   41,W
08D4:  MOVWF  55
08D5:  MOVF   40,W
08D6:  MOVWF  54
08D7:  BCF    0A.3
08D8:  BCF    03.5
08D9:  CALL   370
08DA:  BSF    0A.3
08DB:  MOVF   7A,W
08DC:  BSF    03.5
08DD:  MOVWF  48
08DE:  MOVF   79,W
08DF:  MOVWF  47
08E0:  MOVF   78,W
08E1:  MOVWF  46
08E2:  MOVF   77,W
08E3:  MOVWF  45
08E4:  BCF    03.1
08E5:  MOVF   48,W
08E6:  MOVWF  57
08E7:  MOVF   47,W
08E8:  MOVWF  56
08E9:  MOVF   46,W
08EA:  MOVWF  55
08EB:  MOVF   45,W
08EC:  MOVWF  54
08ED:  MOVLW  2B
08EE:  MOVWF  5B
08EF:  MOVLW  9D
08F0:  MOVWF  5A
08F1:  MOVLW  DF
08F2:  MOVWF  59
08F3:  MOVLW  7E
08F4:  MOVWF  58
08F5:  BCF    0A.3
08F6:  BCF    03.5
08F7:  CALL   3E7
08F8:  BSF    0A.3
08F9:  MOVF   7A,W
08FA:  BSF    03.5
08FB:  MOVWF  3F
08FC:  MOVF   79,W
08FD:  MOVWF  3E
08FE:  MOVF   78,W
08FF:  MOVWF  3D
0900:  MOVF   77,W
0901:  MOVWF  3C
....................       r = r*y2 + 1.0; 
0902:  MOVF   3F,W
0903:  MOVWF  53
0904:  MOVF   3E,W
0905:  MOVWF  52
0906:  MOVF   3D,W
0907:  MOVWF  51
0908:  MOVF   3C,W
0909:  MOVWF  50
090A:  MOVF   43,W
090B:  MOVWF  57
090C:  MOVF   42,W
090D:  MOVWF  56
090E:  MOVF   41,W
090F:  MOVWF  55
0910:  MOVF   40,W
0911:  MOVWF  54
0912:  BCF    0A.3
0913:  BCF    03.5
0914:  CALL   370
0915:  BSF    0A.3
0916:  MOVF   7A,W
0917:  BSF    03.5
0918:  MOVWF  48
0919:  MOVF   79,W
091A:  MOVWF  47
091B:  MOVF   78,W
091C:  MOVWF  46
091D:  MOVF   77,W
091E:  MOVWF  45
091F:  BCF    03.1
0920:  MOVF   48,W
0921:  MOVWF  57
0922:  MOVF   47,W
0923:  MOVWF  56
0924:  MOVF   46,W
0925:  MOVWF  55
0926:  MOVF   45,W
0927:  MOVWF  54
0928:  CLRF   5B
0929:  CLRF   5A
092A:  CLRF   59
092B:  MOVLW  7F
092C:  MOVWF  58
092D:  BCF    0A.3
092E:  BCF    03.5
092F:  CALL   3E7
0930:  BSF    0A.3
0931:  MOVF   7A,W
0932:  BSF    03.5
0933:  MOVWF  3F
0934:  MOVF   79,W
0935:  MOVWF  3E
0936:  MOVF   78,W
0937:  MOVWF  3D
0938:  MOVF   77,W
0939:  MOVWF  3C
....................  
....................       res = y*res/r; 
093A:  MOVF   37,W
093B:  MOVWF  53
093C:  MOVF   36,W
093D:  MOVWF  52
093E:  MOVF   35,W
093F:  MOVWF  51
0940:  MOVF   34,W
0941:  MOVWF  50
0942:  MOVF   3B,W
0943:  MOVWF  57
0944:  MOVF   3A,W
0945:  MOVWF  56
0946:  MOVF   39,W
0947:  MOVWF  55
0948:  MOVF   38,W
0949:  MOVWF  54
094A:  BCF    0A.3
094B:  BCF    03.5
094C:  CALL   370
094D:  BSF    0A.3
094E:  MOVF   7A,W
094F:  BSF    03.5
0950:  MOVWF  48
0951:  MOVF   79,W
0952:  MOVWF  47
0953:  MOVF   78,W
0954:  MOVWF  46
0955:  MOVF   77,W
0956:  MOVWF  45
0957:  MOVF   48,W
0958:  MOVWF  4C
0959:  MOVF   47,W
095A:  MOVWF  4B
095B:  MOVF   46,W
095C:  MOVWF  4A
095D:  MOVF   45,W
095E:  MOVWF  49
095F:  MOVF   3F,W
0960:  MOVWF  50
0961:  MOVF   3E,W
0962:  MOVWF  4F
0963:  MOVF   3D,W
0964:  MOVWF  4E
0965:  MOVF   3C,W
0966:  MOVWF  4D
0967:  BCF    0A.3
0968:  BCF    03.5
0969:  CALL   283
096A:  BSF    0A.3
096B:  MOVF   7A,W
096C:  BSF    03.5
096D:  MOVWF  3B
096E:  MOVF   79,W
096F:  MOVWF  3A
0970:  MOVF   78,W
0971:  MOVWF  39
0972:  MOVF   77,W
0973:  MOVWF  38
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
0974:  CLRF   46
0975:  MOVLW  B0
0976:  MOVWF  45
0977:  MOVF   45,W
0978:  MOVWF  04
0979:  BCF    03.7
097A:  BTFSC  46.0
097B:  BSF    03.7
097C:  MOVLW  7E
097D:  SUBWF  00,W
097E:  MOVWF  44
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
097F:  BTFSS  44.7
0980:  GOTO   196
....................          r = -(float32)-n; 
0981:  MOVF   44,W
0982:  SUBLW  00
0983:  CLRF   47
0984:  MOVWF  46
0985:  BTFSC  46.7
0986:  DECF   47,F
0987:  BCF    0A.3
0988:  BCF    03.5
0989:  CALL   7C6
098A:  BSF    0A.3
098B:  MOVF   77,W
098C:  BSF    03.5
098D:  MOVWF  3C
098E:  MOVF   78,W
098F:  XORLW  80
0990:  MOVWF  3D
0991:  MOVF   79,W
0992:  MOVWF  3E
0993:  MOVF   7A,W
0994:  MOVWF  3F
....................       else 
0995:  GOTO   1A8
....................          r = (float32)n; 
0996:  CLRF   47
0997:  MOVF   44,W
0998:  MOVWF  46
0999:  BTFSC  46.7
099A:  DECF   47,F
099B:  BCF    0A.3
099C:  BCF    03.5
099D:  CALL   7C6
099E:  BSF    0A.3
099F:  MOVF   7A,W
09A0:  BSF    03.5
09A1:  MOVWF  3F
09A2:  MOVF   79,W
09A3:  MOVWF  3E
09A4:  MOVF   78,W
09A5:  MOVWF  3D
09A6:  MOVF   77,W
09A7:  MOVWF  3C
....................  
....................       res += r*LN2; 
09A8:  MOVF   3F,W
09A9:  MOVWF  53
09AA:  MOVF   3E,W
09AB:  MOVWF  52
09AC:  MOVF   3D,W
09AD:  MOVWF  51
09AE:  MOVF   3C,W
09AF:  MOVWF  50
09B0:  MOVLW  18
09B1:  MOVWF  57
09B2:  MOVLW  72
09B3:  MOVWF  56
09B4:  MOVLW  31
09B5:  MOVWF  55
09B6:  MOVLW  7E
09B7:  MOVWF  54
09B8:  BCF    0A.3
09B9:  BCF    03.5
09BA:  CALL   370
09BB:  BSF    0A.3
09BC:  BCF    03.1
09BD:  BSF    03.5
09BE:  MOVF   3B,W
09BF:  MOVWF  57
09C0:  MOVF   3A,W
09C1:  MOVWF  56
09C2:  MOVF   39,W
09C3:  MOVWF  55
09C4:  MOVF   38,W
09C5:  MOVWF  54
09C6:  MOVF   7A,W
09C7:  MOVWF  5B
09C8:  MOVF   79,W
09C9:  MOVWF  5A
09CA:  MOVF   78,W
09CB:  MOVWF  59
09CC:  MOVF   77,W
09CD:  MOVWF  58
09CE:  BCF    0A.3
09CF:  BCF    03.5
09D0:  CALL   3E7
09D1:  BSF    0A.3
09D2:  MOVF   7A,W
09D3:  BSF    03.5
09D4:  MOVWF  3B
09D5:  MOVF   79,W
09D6:  MOVWF  3A
09D7:  MOVF   78,W
09D8:  MOVWF  39
09D9:  MOVF   77,W
09DA:  MOVWF  38
....................    } 
....................  
....................    else 
09DB:  GOTO   1E2
09DC:  BCF    03.5
....................       res = 0.0; 
09DD:  BSF    03.5
09DE:  CLRF   3B
09DF:  CLRF   3A
09E0:  CLRF   39
09E1:  CLRF   38
....................  
....................    return(res); 
09E2:  MOVF   38,W
09E3:  MOVWF  77
09E4:  MOVF   39,W
09E5:  MOVWF  78
09E6:  MOVF   3A,W
09E7:  MOVWF  79
09E8:  MOVF   3B,W
09E9:  MOVWF  7A
.................... } 
09EA:  BCF    03.5
09EB:  RETURN
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
0C1B:  BSF    03.5
0C1C:  MOVF   27,W
0C1D:  MOVWF  53
0C1E:  MOVF   26,W
0C1F:  MOVWF  52
0C20:  MOVF   25,W
0C21:  MOVWF  51
0C22:  MOVF   24,W
0C23:  MOVWF  50
0C24:  CLRF   57
0C25:  CLRF   56
0C26:  CLRF   55
0C27:  CLRF   54
0C28:  BCF    0A.3
0C29:  BCF    03.5
0C2A:  CALL   242
0C2B:  BSF    0A.3
0C2C:  BTFSS  03.0
0C2D:  GOTO   514
0C2E:  BSF    03.5
0C2F:  MOVF   2B,W
0C30:  MOVWF  2F
0C31:  MOVF   2A,W
0C32:  MOVWF  2E
0C33:  MOVF   29,W
0C34:  MOVWF  2D
0C35:  MOVF   28,W
0C36:  MOVWF  2C
0C37:  CLRF   33
0C38:  CLRF   32
0C39:  CLRF   31
0C3A:  MOVLW  7F
0C3B:  MOVWF  30
0C3C:  BCF    0A.3
0C3D:  BCF    03.5
0C3E:  CALL   6F8
0C3F:  BSF    0A.3
0C40:  MOVF   7A,W
0C41:  BSF    03.5
0C42:  MOVWF  2F
0C43:  MOVF   79,W
0C44:  MOVWF  2E
0C45:  MOVF   78,W
0C46:  MOVWF  2D
0C47:  MOVF   77,W
0C48:  MOVWF  2C
0C49:  MOVF   2F,W
0C4A:  MOVWF  53
0C4B:  MOVF   2E,W
0C4C:  MOVWF  52
0C4D:  MOVF   2D,W
0C4E:  MOVWF  51
0C4F:  MOVF   2C,W
0C50:  MOVWF  50
0C51:  CLRF   57
0C52:  CLRF   56
0C53:  CLRF   55
0C54:  CLRF   54
0C55:  BCF    0A.3
0C56:  BCF    03.5
0C57:  CALL   242
0C58:  BSF    0A.3
0C59:  BTFSS  03.2
0C5A:  GOTO   514
....................       if(fmod(y, 2) == 0) { 
0C5B:  BSF    03.5
0C5C:  MOVF   2B,W
0C5D:  MOVWF  2F
0C5E:  MOVF   2A,W
0C5F:  MOVWF  2E
0C60:  MOVF   29,W
0C61:  MOVWF  2D
0C62:  MOVF   28,W
0C63:  MOVWF  2C
0C64:  CLRF   33
0C65:  CLRF   32
0C66:  CLRF   31
0C67:  MOVLW  80
0C68:  MOVWF  30
0C69:  BCF    0A.3
0C6A:  BCF    03.5
0C6B:  CALL   6F8
0C6C:  BSF    0A.3
0C6D:  MOVF   7A,W
0C6E:  BSF    03.5
0C6F:  MOVWF  2F
0C70:  MOVF   79,W
0C71:  MOVWF  2E
0C72:  MOVF   78,W
0C73:  MOVWF  2D
0C74:  MOVF   77,W
0C75:  MOVWF  2C
0C76:  MOVF   2F,W
0C77:  MOVWF  53
0C78:  MOVF   2E,W
0C79:  MOVWF  52
0C7A:  MOVF   2D,W
0C7B:  MOVWF  51
0C7C:  MOVF   2C,W
0C7D:  MOVWF  50
0C7E:  CLRF   57
0C7F:  CLRF   56
0C80:  CLRF   55
0C81:  CLRF   54
0C82:  BCF    0A.3
0C83:  BCF    03.5
0C84:  CALL   242
0C85:  BSF    0A.3
0C86:  BTFSS  03.2
0C87:  GOTO   4CD
....................          return (exp(log(-x) * y)); 
0C88:  BSF    03.5
0C89:  MOVF   24,W
0C8A:  MOVWF  2C
0C8B:  MOVF   25,W
0C8C:  XORLW  80
0C8D:  MOVWF  2D
0C8E:  MOVF   26,W
0C8F:  MOVWF  2E
0C90:  MOVF   27,W
0C91:  MOVWF  2F
0C92:  MOVWF  33
0C93:  MOVF   2E,W
0C94:  MOVWF  32
0C95:  MOVF   2D,W
0C96:  MOVWF  31
0C97:  MOVF   2C,W
0C98:  MOVWF  30
0C99:  BCF    03.5
0C9A:  CALL   000
0C9B:  MOVF   7A,W
0C9C:  BSF    03.5
0C9D:  MOVWF  2F
0C9E:  MOVF   79,W
0C9F:  MOVWF  2E
0CA0:  MOVF   78,W
0CA1:  MOVWF  2D
0CA2:  MOVF   77,W
0CA3:  MOVWF  2C
0CA4:  MOVF   2F,W
0CA5:  MOVWF  53
0CA6:  MOVF   2E,W
0CA7:  MOVWF  52
0CA8:  MOVF   2D,W
0CA9:  MOVWF  51
0CAA:  MOVF   2C,W
0CAB:  MOVWF  50
0CAC:  MOVF   2B,W
0CAD:  MOVWF  57
0CAE:  MOVF   2A,W
0CAF:  MOVWF  56
0CB0:  MOVF   29,W
0CB1:  MOVWF  55
0CB2:  MOVF   28,W
0CB3:  MOVWF  54
0CB4:  BCF    0A.3
0CB5:  BCF    03.5
0CB6:  CALL   370
0CB7:  BSF    0A.3
0CB8:  MOVF   7A,W
0CB9:  BSF    03.5
0CBA:  MOVWF  2F
0CBB:  MOVF   79,W
0CBC:  MOVWF  2E
0CBD:  MOVF   78,W
0CBE:  MOVWF  2D
0CBF:  MOVF   77,W
0CC0:  MOVWF  2C
0CC1:  MOVF   2F,W
0CC2:  MOVWF  33
0CC3:  MOVF   2E,W
0CC4:  MOVWF  32
0CC5:  MOVF   2D,W
0CC6:  MOVWF  31
0CC7:  MOVF   2C,W
0CC8:  MOVWF  30
0CC9:  BCF    03.5
0CCA:  CALL   1EC
0CCB:  GOTO   5BD
....................       } else { 
0CCC:  GOTO   513
....................          return (-exp(log(-x) * y)); 
0CCD:  BSF    03.5
0CCE:  MOVF   24,W
0CCF:  MOVWF  2C
0CD0:  MOVF   25,W
0CD1:  XORLW  80
0CD2:  MOVWF  2D
0CD3:  MOVF   26,W
0CD4:  MOVWF  2E
0CD5:  MOVF   27,W
0CD6:  MOVWF  2F
0CD7:  MOVWF  33
0CD8:  MOVF   2E,W
0CD9:  MOVWF  32
0CDA:  MOVF   2D,W
0CDB:  MOVWF  31
0CDC:  MOVF   2C,W
0CDD:  MOVWF  30
0CDE:  BCF    03.5
0CDF:  CALL   000
0CE0:  MOVF   7A,W
0CE1:  BSF    03.5
0CE2:  MOVWF  2F
0CE3:  MOVF   79,W
0CE4:  MOVWF  2E
0CE5:  MOVF   78,W
0CE6:  MOVWF  2D
0CE7:  MOVF   77,W
0CE8:  MOVWF  2C
0CE9:  MOVF   2F,W
0CEA:  MOVWF  53
0CEB:  MOVF   2E,W
0CEC:  MOVWF  52
0CED:  MOVF   2D,W
0CEE:  MOVWF  51
0CEF:  MOVF   2C,W
0CF0:  MOVWF  50
0CF1:  MOVF   2B,W
0CF2:  MOVWF  57
0CF3:  MOVF   2A,W
0CF4:  MOVWF  56
0CF5:  MOVF   29,W
0CF6:  MOVWF  55
0CF7:  MOVF   28,W
0CF8:  MOVWF  54
0CF9:  BCF    0A.3
0CFA:  BCF    03.5
0CFB:  CALL   370
0CFC:  BSF    0A.3
0CFD:  MOVF   7A,W
0CFE:  BSF    03.5
0CFF:  MOVWF  2F
0D00:  MOVF   79,W
0D01:  MOVWF  2E
0D02:  MOVF   78,W
0D03:  MOVWF  2D
0D04:  MOVF   77,W
0D05:  MOVWF  2C
0D06:  MOVF   2F,W
0D07:  MOVWF  33
0D08:  MOVF   2E,W
0D09:  MOVWF  32
0D0A:  MOVF   2D,W
0D0B:  MOVWF  31
0D0C:  MOVF   2C,W
0D0D:  MOVWF  30
0D0E:  BCF    03.5
0D0F:  CALL   1EC
0D10:  MOVLW  80
0D11:  XORWF  78,F
0D12:  GOTO   5BD
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
0D13:  GOTO   5BD
0D14:  BSF    03.5
0D15:  MOVF   27,W
0D16:  MOVWF  53
0D17:  MOVF   26,W
0D18:  MOVWF  52
0D19:  MOVF   25,W
0D1A:  MOVWF  51
0D1B:  MOVF   24,W
0D1C:  MOVWF  50
0D1D:  CLRF   57
0D1E:  CLRF   56
0D1F:  CLRF   55
0D20:  CLRF   54
0D21:  BCF    0A.3
0D22:  BCF    03.5
0D23:  CALL   242
0D24:  BSF    0A.3
0D25:  BTFSS  03.0
0D26:  GOTO   55A
0D27:  BSF    03.5
0D28:  MOVF   2B,W
0D29:  MOVWF  2F
0D2A:  MOVF   2A,W
0D2B:  MOVWF  2E
0D2C:  MOVF   29,W
0D2D:  MOVWF  2D
0D2E:  MOVF   28,W
0D2F:  MOVWF  2C
0D30:  CLRF   33
0D31:  CLRF   32
0D32:  CLRF   31
0D33:  MOVLW  7F
0D34:  MOVWF  30
0D35:  BCF    0A.3
0D36:  BCF    03.5
0D37:  CALL   6F8
0D38:  BSF    0A.3
0D39:  MOVF   7A,W
0D3A:  BSF    03.5
0D3B:  MOVWF  2F
0D3C:  MOVF   79,W
0D3D:  MOVWF  2E
0D3E:  MOVF   78,W
0D3F:  MOVWF  2D
0D40:  MOVF   77,W
0D41:  MOVWF  2C
0D42:  MOVF   2F,W
0D43:  MOVWF  53
0D44:  MOVF   2E,W
0D45:  MOVWF  52
0D46:  MOVF   2D,W
0D47:  MOVWF  51
0D48:  MOVF   2C,W
0D49:  MOVWF  50
0D4A:  CLRF   57
0D4B:  CLRF   56
0D4C:  CLRF   55
0D4D:  CLRF   54
0D4E:  BCF    0A.3
0D4F:  BCF    03.5
0D50:  CALL   242
0D51:  BSF    0A.3
0D52:  BTFSC  03.2
0D53:  GOTO   55A
....................       return 0; 
0D54:  CLRF   77
0D55:  CLRF   78
0D56:  CLRF   79
0D57:  CLRF   7A
0D58:  GOTO   5BD
....................    } else { 
0D59:  GOTO   5BD
....................       if(x != 0 || 0 >= y) { 
0D5A:  BSF    03.5
0D5B:  MOVF   27,W
0D5C:  MOVWF  53
0D5D:  MOVF   26,W
0D5E:  MOVWF  52
0D5F:  MOVF   25,W
0D60:  MOVWF  51
0D61:  MOVF   24,W
0D62:  MOVWF  50
0D63:  CLRF   57
0D64:  CLRF   56
0D65:  CLRF   55
0D66:  CLRF   54
0D67:  BCF    0A.3
0D68:  BCF    03.5
0D69:  CALL   242
0D6A:  BSF    0A.3
0D6B:  BTFSS  03.2
0D6C:  GOTO   582
0D6D:  BSF    03.5
0D6E:  MOVF   2B,W
0D6F:  MOVWF  53
0D70:  MOVF   2A,W
0D71:  MOVWF  52
0D72:  MOVF   29,W
0D73:  MOVWF  51
0D74:  MOVF   28,W
0D75:  MOVWF  50
0D76:  CLRF   57
0D77:  CLRF   56
0D78:  CLRF   55
0D79:  CLRF   54
0D7A:  BCF    0A.3
0D7B:  BCF    03.5
0D7C:  CALL   242
0D7D:  BSF    0A.3
0D7E:  BTFSC  03.0
0D7F:  GOTO   582
0D80:  BTFSS  03.2
0D81:  GOTO   5BD
....................          return (exp(log(x) * y)); 
0D82:  BSF    03.5
0D83:  MOVF   27,W
0D84:  MOVWF  33
0D85:  MOVF   26,W
0D86:  MOVWF  32
0D87:  MOVF   25,W
0D88:  MOVWF  31
0D89:  MOVF   24,W
0D8A:  MOVWF  30
0D8B:  BCF    03.5
0D8C:  CALL   000
0D8D:  MOVF   7A,W
0D8E:  BSF    03.5
0D8F:  MOVWF  2F
0D90:  MOVF   79,W
0D91:  MOVWF  2E
0D92:  MOVF   78,W
0D93:  MOVWF  2D
0D94:  MOVF   77,W
0D95:  MOVWF  2C
0D96:  MOVF   2F,W
0D97:  MOVWF  53
0D98:  MOVF   2E,W
0D99:  MOVWF  52
0D9A:  MOVF   2D,W
0D9B:  MOVWF  51
0D9C:  MOVF   2C,W
0D9D:  MOVWF  50
0D9E:  MOVF   2B,W
0D9F:  MOVWF  57
0DA0:  MOVF   2A,W
0DA1:  MOVWF  56
0DA2:  MOVF   29,W
0DA3:  MOVWF  55
0DA4:  MOVF   28,W
0DA5:  MOVWF  54
0DA6:  BCF    0A.3
0DA7:  BCF    03.5
0DA8:  CALL   370
0DA9:  BSF    0A.3
0DAA:  MOVF   7A,W
0DAB:  BSF    03.5
0DAC:  MOVWF  2F
0DAD:  MOVF   79,W
0DAE:  MOVWF  2E
0DAF:  MOVF   78,W
0DB0:  MOVWF  2D
0DB1:  MOVF   77,W
0DB2:  MOVWF  2C
0DB3:  MOVF   2F,W
0DB4:  MOVWF  33
0DB5:  MOVF   2E,W
0DB6:  MOVWF  32
0DB7:  MOVF   2D,W
0DB8:  MOVWF  31
0DB9:  MOVF   2C,W
0DBA:  MOVWF  30
0DBB:  BCF    03.5
0DBC:  CALL   1EC
....................       } 
....................    } 
.................... } 
0DBD:  RETURN
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #FUSES NOWDT //No Watch Dog Timer 
.................... #FUSES HS //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES PUT //Power Up Timer 
.................... #FUSES NOMCLR //Master Clear pin disabled 
.................... #FUSES NOPROTECT //Code not protected from reading 
.................... #FUSES NOCPD //No EE protection 
.................... #FUSES BROWNOUT //No brownout reset 
.................... #FUSES IESO //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN //Fail-safe clock monitor enabled 
.................... #FUSES NOLVP //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NODEBUG //No Debug mode for ICD 
.................... #FUSES NOWRT //Program memory not write protected 
.................... #FUSES BORV40 //Brownout reset at 4.0V 
.................... #FUSES RESERVED //Used to set the reserved FUSE bits 
.................... #use delay(clock=20000000) 
01AA:  MOVLW  B1
01AB:  MOVWF  04
01AC:  BCF    03.7
01AD:  MOVF   00,W
01AE:  BTFSC  03.2
01AF:  GOTO   1BD
01B0:  MOVLW  06
01B1:  MOVWF  78
01B2:  CLRF   77
01B3:  DECFSZ 77,F
01B4:  GOTO   1B3
01B5:  DECFSZ 78,F
01B6:  GOTO   1B2
01B7:  MOVLW  7B
01B8:  MOVWF  77
01B9:  DECFSZ 77,F
01BA:  GOTO   1B9
01BB:  DECFSZ 00,F
01BC:  GOTO   1B0
01BD:  RETURN
.................... // Config the serial port hardware on the PIC 
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8) 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
.................... #define SLAVE_ADDRESS  0xB0 
.................... #define DISPLAY_ADDRESS 0xB4 
.................... #define REGISTER_SIZE  8    
.................... #define DISPLAY_CMD_SEND_VALUE 2 
.................... #define DISPLAY_CMD_SEND_LONG_TEXT 5 
.................... #define DISPLAY_CMD_CLS 6 
.................... #define DISPLAY_CMD_SETPOS 8 
.................... //////////////////////////////////////////////////////////// 
.................... //define LCD Display  
.................... //////////////////////////////////////////////////////////// 
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... //////////////////////////////////////////////////////////// 
.................... //define Constant for power calculation  
.................... //////////////////////////////////////////////////////////// 
....................  
....................  
.................... // setup the I2C port 
.................... #use i2c(MASTER, I2C1, FORCE_HW) 
01BE:  BCF    14.7
01BF:  BCF    0C.3
01C0:  BSF    03.5
01C1:  MOVF   37,W
01C2:  BCF    03.5
01C3:  MOVWF  13
01C4:  MOVLW  02
01C5:  BTFSC  14.7
01C6:  GOTO   1CE
01C7:  BTFSS  0C.3
01C8:  GOTO   1C7
01C9:  MOVLW  00
01CA:  BSF    03.5
01CB:  BTFSC  11.6
01CC:  MOVLW  01
01CD:  BCF    03.5
01CE:  MOVWF  78
01CF:  RETURN
....................  
.................... //PIC16 Write Internal EEPROM 
.................... #rom 0x2100={0x00} 
....................  
.................... int16 readUnitValueInEEPROM(); 
.................... void writeUnitValueInEEPROM(); 
.................... void clearUnitValueInEEPROM(); 
....................  
.................... int1 selectPush =0,selectUsed=1; 
.................... int1 exitPush =0,exitUsed =1; 
.................... int1 leftPush =0,leftUsed =1; 
.................... int1 rightPush =0,rightUsed =1; 
.................... //move from main 
.................... int menu = 1; 
.................... int1 selectmenu = 0; 
.................... int16 analog0; 
.................... int16 REFERENCE_VALUE = 525; 
.................... int16 power = 0; 
.................... int checkfor_unit = 0; 
.................... int16 unit = readUnitValueInEEPROM(); 
.................... int1 billcheck = 0; 
.................... float32 unit_sim = (float32) unit; //write function get from eerom here 
.................... float32 bill_sim = 0; 
.................... int16 bill = 0; 
.................... int1 status_power_on = 0; 
.................... int16 power_off_time = 0; 
.................... int16 power_off_timeinterrupt = 0; 
.................... int1 power_off_timeUsed = 0; 
....................  
.................... #INT_RB 
.................... void rb_isr(void) { 
....................    if(input(PIN_B3)==0 && selectUsed==0) // input(PIN_B3) == 0 is touching 
00F5:  BSF    03.5
00F6:  BSF    06.3
00F7:  BCF    03.5
00F8:  BTFSC  06.3
00F9:  GOTO   0FE
00FA:  BTFSC  28.1
00FB:  GOTO   0FE
....................    { 
....................          selectPush = 1; 
00FC:  BSF    28.0
....................    } 
....................    else if(input(PIN_B3)==1 && selectUsed==1) 
00FD:  GOTO   140
00FE:  BSF    03.5
00FF:  BSF    06.3
0100:  BCF    03.5
0101:  BTFSS  06.3
0102:  GOTO   108
0103:  BTFSS  28.1
0104:  GOTO   108
....................    {       
....................          selectPush = 0; 
0105:  BCF    28.0
....................          selectUsed = 0; 
0106:  BCF    28.1
....................    } 
....................     
....................    else if(input(PIN_B2)==0 && exitUsed==0) // input(PIN_B3) == 0 is touching 
0107:  GOTO   140
0108:  BSF    03.5
0109:  BSF    06.2
010A:  BCF    03.5
010B:  BTFSC  06.2
010C:  GOTO   111
010D:  BTFSC  28.3
010E:  GOTO   111
....................    { 
....................          exitPush = 1; 
010F:  BSF    28.2
....................    } 
....................    else if(input(PIN_B2)==1 && exitUsed==1) 
0110:  GOTO   140
0111:  BSF    03.5
0112:  BSF    06.2
0113:  BCF    03.5
0114:  BTFSS  06.2
0115:  GOTO   11B
0116:  BTFSS  28.3
0117:  GOTO   11B
....................    {       
....................          exitPush = 0; 
0118:  BCF    28.2
....................          exitUsed = 0; 
0119:  BCF    28.3
....................    } 
....................    else if(input(PIN_B1)==0 && leftUsed==0) // input(PIN_B3) == 0 is touching 
011A:  GOTO   140
011B:  BSF    03.5
011C:  BSF    06.1
011D:  BCF    03.5
011E:  BTFSC  06.1
011F:  GOTO   124
0120:  BTFSC  28.5
0121:  GOTO   124
....................    { 
....................          leftPush = 1; 
0122:  BSF    28.4
....................    } 
....................    else if(input(PIN_B1)==1 && leftUsed==1) 
0123:  GOTO   140
0124:  BSF    03.5
0125:  BSF    06.1
0126:  BCF    03.5
0127:  BTFSS  06.1
0128:  GOTO   12E
0129:  BTFSS  28.5
012A:  GOTO   12E
....................    {       
....................          leftPush = 0; 
012B:  BCF    28.4
....................          leftUsed = 0; 
012C:  BCF    28.5
....................    } 
....................    else if(input(PIN_B4)==0 && rightUsed==0) // input(PIN_B3) == 0 is touching 
012D:  GOTO   140
012E:  BSF    03.5
012F:  BSF    06.4
0130:  BCF    03.5
0131:  BTFSC  06.4
0132:  GOTO   137
0133:  BTFSC  28.7
0134:  GOTO   137
....................    { 
....................          rightPush = 1; 
0135:  BSF    28.6
....................    } 
....................    else if(input(PIN_B4)==1 && rightUsed==1) 
0136:  GOTO   140
0137:  BSF    03.5
0138:  BSF    06.4
0139:  BCF    03.5
013A:  BTFSS  06.4
013B:  GOTO   140
013C:  BTFSS  28.7
013D:  GOTO   140
....................    {       
....................          rightPush = 0; 
013E:  BCF    28.6
....................          rightUsed = 0; 
013F:  BCF    28.7
....................    } 
....................    //if you wanna check the other button you have to write in this function with input(parameter); 
.................... } 
....................  
....................  
0140:  BCF    0B.0
0141:  BCF    0A.3
0142:  BCF    0A.4
0143:  GOTO   021
.................... #INT_TIMER1 
.................... void timer1_isr() 
.................... { 
....................    set_timer1(3036); //  
0144:  MOVLW  0B
0145:  MOVWF  0F
0146:  MOVLW  DC
0147:  MOVWF  0E
....................    checkfor_unit+=1; 
0148:  MOVLW  01
0149:  ADDWF  31,F
....................    if(checkfor_unit > 49) 
014A:  MOVF   31,W
014B:  SUBLW  31
014C:  BTFSC  03.0
014D:  GOTO   150
....................    { 
....................      checkfor_unit =0; 
014E:  CLRF   31
....................      billcheck = 1; 
014F:  BSF    2A.1
....................       
....................    } 
....................     
....................    if(power_off_timeUsed == 1){ 
0150:  BTFSS  2A.3
0151:  GOTO   187
....................       power_off_timeinterrupt+=1; 
0152:  MOVLW  01
0153:  ADDWF  40,F
0154:  BTFSC  03.0
0155:  INCF   41,F
....................       if(power_off_timeinterrupt >(power_off_time*10)){ 
0156:  MOVF   3F,W
0157:  BSF    03.6
0158:  MOVWF  32
0159:  BCF    03.6
015A:  MOVF   3E,W
015B:  BSF    03.6
015C:  MOVWF  31
015D:  CLRF   34
015E:  MOVLW  0A
015F:  MOVWF  33
0174:  MOVF   79,W
0175:  MOVWF  7A
0176:  MOVF   7A,W
0177:  BCF    03.6
0178:  SUBWF  41,W
0179:  BTFSS  03.0
017A:  GOTO   187
017B:  BTFSS  03.2
017C:  GOTO   181
017D:  MOVF   40,W
017E:  SUBWF  78,W
017F:  BTFSC  03.0
0180:  GOTO   187
....................          status_power_on = 0; 
0181:  BCF    2A.2
....................          power_off_timeinterrupt = 0; 
0182:  CLRF   41
0183:  CLRF   40
....................          power_off_time = 0; 
0184:  CLRF   3F
0185:  CLRF   3E
....................          power_off_timeUsed = 0; 
0186:  BCF    2A.3
....................       } 
....................    } 
.................... }  
....................  
....................  
....................  
0187:  BCF    0C.0
0188:  BCF    0A.3
0189:  BCF    0A.4
018A:  GOTO   021
.................... void displayLongText(char* text); 
.................... void displayValue(int16 value[]); 
.................... void clearDisplay(); 
.................... void setDisplayPos(int pos); 
.................... int1 checkselect(int1 menu); 
.................... int1 checkexit(int1 menu); 
.................... int checkleft(int menu); 
.................... int checkright(int menu); 
.................... int16 calibrate(int16 analog); 
.................... int16 resetcalibrate(); 
.................... int16 amperecal(int16 analog); 
.................... void powercal(int16 ampere); 
.................... void unitcal(); 
.................... void menucalibrate(); 
.................... void menuresetcalibrate(); 
.................... void billcal(); 
.................... void menushutdown(); 
.................... void menushutdownfortime10second(); 
....................  
.................... void menuresetunit(); 
....................  
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!// This is the main device register 
.................... //!/////////////////////////////////////////////////////////////////////////// 
.................... //!int deviceRegister[REGISTER_SIZE]={0}; // device register 
....................  
....................  
....................  
....................  
.................... void main() { 
13A9:  BSF    03.5
13AA:  BSF    03.6
13AB:  BSF    07.3
13AC:  MOVLW  08
13AD:  BCF    03.6
13AE:  MOVWF  19
13AF:  MOVLW  02
13B0:  MOVWF  1A
13B1:  MOVLW  A6
13B2:  MOVWF  18
13B3:  MOVLW  90
13B4:  BCF    03.5
13B5:  MOVWF  18
13B6:  MOVLW  FF
13B7:  MOVWF  27
13B8:  BSF    27.3
13B9:  MOVF   27,W
13BA:  BSF    03.5
13BB:  MOVWF  07
13BC:  BCF    03.5
13BD:  BSF    27.4
13BE:  MOVF   27,W
13BF:  BSF    03.5
13C0:  MOVWF  07
13C1:  MOVLW  31
13C2:  MOVWF  13
13C3:  MOVLW  29
13C4:  BCF    03.5
13C5:  MOVWF  14
13C6:  BSF    03.5
13C7:  BSF    14.7
13C8:  BCF    14.6
13C9:  MOVLW  FF
13CA:  MOVWF  13
13CB:  MOVLW  28
13CC:  BCF    03.5
13CD:  MOVWF  14
13CE:  BCF    28.0
13CF:  BSF    28.1
13D0:  BCF    28.2
13D1:  BSF    28.3
13D2:  BCF    28.4
13D3:  BSF    28.5
13D4:  BCF    28.6
13D5:  BSF    28.7
13D6:  MOVLW  01
13D7:  MOVWF  29
13D8:  BCF    2A.0
13D9:  MOVLW  02
13DA:  MOVWF  2E
13DB:  MOVLW  0D
13DC:  MOVWF  2D
13DD:  CLRF   30
13DE:  CLRF   2F
13DF:  CLRF   31
13FA:  MOVF   79,W
13FB:  MOVWF  33
13FC:  MOVF   78,W
13FD:  MOVWF  32
13FE:  BCF    2A.1
13FF:  MOVF   33,W
1400:  BSF    03.5
1401:  MOVWF  55
1402:  BCF    03.5
1403:  MOVF   32,W
1404:  BSF    03.5
1405:  MOVWF  54
1406:  BCF    0A.4
1407:  BCF    03.5
1408:  CALL   18B
1409:  BSF    0A.4
140A:  MOVF   7A,W
140B:  MOVWF  37
140C:  MOVF   79,W
140D:  MOVWF  36
140E:  MOVF   78,W
140F:  MOVWF  35
1410:  MOVF   77,W
1411:  MOVWF  34
1412:  CLRF   3B
1413:  CLRF   3A
1414:  CLRF   39
1415:  CLRF   38
1416:  CLRF   3D
1417:  CLRF   3C
1418:  BCF    2A.2
1419:  CLRF   3F
141A:  CLRF   3E
141B:  CLRF   41
141C:  CLRF   40
141D:  BCF    2A.3
141E:  BSF    03.5
141F:  BSF    03.6
1420:  MOVF   09,W
1421:  ANDLW  C0
1422:  MOVWF  09
1423:  BCF    03.6
1424:  BCF    1F.4
1425:  BCF    1F.5
1426:  MOVLW  00
1427:  BSF    03.6
1428:  MOVWF  08
1429:  BCF    03.5
142A:  CLRF   07
142B:  CLRF   08
142C:  CLRF   09
....................     
....................      
....................   
....................      
....................  
....................  
....................     int16 ampere; 
....................      
....................     setup_timer_1(T1_INTERNAL | T1_DIV_BY_8); 
142D:  MOVLW  35
142E:  BCF    03.6
142F:  MOVWF  10
....................     set_timer1(3036);  
1430:  MOVLW  0B
1431:  MOVWF  0F
1432:  MOVLW  DC
1433:  MOVWF  0E
....................     enable_interrupts(INT_TIMER1); 
1434:  BSF    03.5
1435:  BSF    0C.0
....................      
....................     
....................     enable_interrupts(INT_RB3);    // generate interrupt when B7 changes 
1436:  BCF    03.5
1437:  BSF    0B.3
1438:  BSF    03.5
1439:  BSF    16.3
....................     enable_interrupts(INT_RB2); 
143A:  BCF    03.5
143B:  BSF    0B.3
143C:  BSF    03.5
143D:  BSF    16.2
....................     enable_interrupts(INT_RB1); 
143E:  BCF    03.5
143F:  BSF    0B.3
1440:  BSF    03.5
1441:  BSF    16.1
....................     enable_interrupts(INT_RB4); 
1442:  BCF    03.5
1443:  BSF    0B.3
1444:  BSF    03.5
1445:  BSF    16.4
....................     enable_interrupts(GLOBAL); 
1446:  MOVLW  C0
1447:  BCF    03.5
1448:  IORWF  0B,F
....................      
....................     setup_adc_ports(sAN1); // setup PIN A0 as analog input 
1449:  BSF    03.5
144A:  BSF    03.6
144B:  MOVF   09,W
144C:  ANDLW  C0
144D:  MOVWF  09
144E:  BCF    03.6
144F:  BCF    1F.4
1450:  BCF    1F.5
1451:  MOVLW  02
1452:  BSF    03.6
1453:  MOVWF  08
....................     setup_adc( ADC_CLOCK_INTERNAL );  
1454:  BCF    03.5
1455:  BCF    03.6
1456:  BSF    1F.6
1457:  BSF    1F.7
1458:  BSF    03.5
1459:  BSF    1F.7
145A:  BCF    03.5
145B:  BSF    1F.0
....................   
....................     output_low(PIN_C5); //off Relay 
145C:  BCF    27.5
145D:  MOVF   27,W
145E:  BSF    03.5
145F:  MOVWF  07
1460:  BCF    03.5
1461:  BCF    07.5
....................     output_low(PIN_B5); //off led for power off status 
1462:  BSF    03.5
1463:  BCF    06.5
1464:  BCF    03.5
1465:  BCF    06.5
....................     //printf("Sampling:\r\n"); 
....................     set_adc_channel( 1 ); // set the ADC channel to read  
1466:  MOVLW  04
1467:  MOVWF  78
1468:  MOVF   1F,W
1469:  ANDLW  C3
146A:  IORWF  78,W
146B:  MOVWF  1F
....................     delay_us(100); // wait for the sensor reading to finish 
146C:  MOVLW  A6
146D:  MOVWF  77
146E:  DECFSZ 77,F
146F:  GOTO   46E
1470:  NOP
....................   
....................     while (1) { 
....................         
....................      if(status_power_on<= 0){ 
1471:  MOVLW  00
1472:  BTFSC  2A.2
1473:  MOVLW  01
1474:  XORLW  00
1475:  BTFSS  03.2
1476:  GOTO   4C1
....................        menu=1; 
1477:  MOVLW  01
1478:  MOVWF  29
....................         
....................        output_low(PIN_B0); 
1479:  BSF    03.5
147A:  BCF    06.0
147B:  BCF    03.5
147C:  BCF    06.0
....................        delay_ms(200); 
147D:  MOVLW  C8
147E:  BSF    03.5
147F:  MOVWF  31
1480:  BCF    0A.4
1481:  BCF    03.5
1482:  CALL   1AA
1483:  BSF    0A.4
....................        output_low(PIN_B6); 
1484:  BSF    03.5
1485:  BCF    06.6
1486:  BCF    03.5
1487:  BCF    06.6
....................        status_power_on = checkselect(status_power_on); 
1488:  MOVLW  00
1489:  BTFSC  2A.2
148A:  MOVLW  01
148B:  MOVWF  5E
148C:  BSF    03.5
148D:  MOVWF  32
148E:  BCF    0A.4
148F:  BCF    03.5
1490:  CALL   1E3
1491:  BSF    0A.4
1492:  BCF    2A.2
1493:  BTFSC  78.0
1494:  BSF    2A.2
....................        setDisplayPos(5);                      
1495:  MOVLW  05
1496:  BSF    03.5
1497:  MOVWF  31
1498:  BCF    0A.4
1499:  BCF    03.5
149A:  CALL   1F7
149B:  BSF    0A.4
....................        displayLongText("Welcome");  
149C:  CLRF   78
149D:  MOVLW  08
149E:  MOVWF  77
149F:  MOVLW  44
14A0:  MOVWF  04
14A1:  BCF    03.7
14A2:  MOVF   78,W
14A3:  BCF    0A.4
14A4:  CALL   038
14A5:  BSF    0A.4
14A6:  MOVWF  00
14A7:  INCF   78,F
14A8:  INCF   04,F
14A9:  DECFSZ 77,F
14AA:  GOTO   4A2
14AB:  BSF    03.5
14AC:  CLRF   34
14AD:  MOVLW  44
14AE:  MOVWF  33
14AF:  BCF    0A.4
14B0:  BCF    03.5
14B1:  CALL   213
14B2:  BSF    0A.4
....................        delay_ms(100); 
14B3:  MOVLW  64
14B4:  BSF    03.5
14B5:  MOVWF  31
14B6:  BCF    0A.4
14B7:  BCF    03.5
14B8:  CALL   1AA
14B9:  BSF    0A.4
....................        if(billcheck == 1){ 
14BA:  BTFSS  2A.1
14BB:  GOTO   4C0
....................           
....................          billcheck = 0; 
14BC:  BCF    2A.1
....................          clearDisplay(); //if you don't want to clear display every time follow sampling unit.You can erase here. 
14BD:  BCF    0A.4
14BE:  CALL   1D0
14BF:  BSF    0A.4
....................         
....................        } 
....................       
....................      } 
....................      else{ 
14C0:  GOTO   710
....................        output_high(PIN_B6); 
14C1:  BSF    03.5
14C2:  BCF    06.6
14C3:  BCF    03.5
14C4:  BSF    06.6
....................        output_high(PIN_B0); 
14C5:  BSF    03.5
14C6:  BCF    06.0
14C7:  BCF    03.5
14C8:  BSF    06.0
....................        delay_ms(100); 
14C9:  MOVLW  64
14CA:  BSF    03.5
14CB:  MOVWF  31
14CC:  BCF    0A.4
14CD:  BCF    03.5
14CE:  CALL   1AA
14CF:  BSF    0A.4
....................        analog0 = read_adc(); 
14D0:  BSF    1F.1
14D1:  BTFSC  1F.1
14D2:  GOTO   4D1
14D3:  BSF    03.5
14D4:  MOVF   1E,W
14D5:  BCF    03.5
14D6:  MOVWF  2B
14D7:  MOVF   1E,W
14D8:  MOVWF  2C
....................         
....................        delay_ms(100); //100 
14D9:  MOVLW  64
14DA:  BSF    03.5
14DB:  MOVWF  31
14DC:  BCF    0A.4
14DD:  BCF    03.5
14DE:  CALL   1AA
14DF:  BSF    0A.4
....................        
....................         
....................         
....................        if(REFERENCE_VALUE>525){ 
14E0:  MOVF   2E,W
14E1:  SUBLW  01
14E2:  BTFSC  03.0
14E3:  GOTO   4FB
14E4:  XORLW  FF
14E5:  BTFSS  03.2
14E6:  GOTO   4EB
14E7:  MOVF   2D,W
14E8:  SUBLW  0D
14E9:  BTFSC  03.0
14EA:  GOTO   4FB
....................          analog0 = (analog0-(REFERENCE_VALUE-525)); 
14EB:  MOVLW  0D
14EC:  SUBWF  2D,W
14ED:  MOVWF  77
14EE:  MOVF   2E,W
14EF:  MOVWF  7A
14F0:  MOVLW  02
14F1:  BTFSS  03.0
14F2:  MOVLW  03
14F3:  SUBWF  7A,F
14F4:  MOVF   77,W
14F5:  SUBWF  2B,F
14F6:  MOVF   7A,W
14F7:  BTFSS  03.0
14F8:  INCFSZ 7A,W
14F9:  SUBWF  2C,F
....................        } 
....................        else if(REFERENCE_VALUE<525){ 
14FA:  GOTO   514
14FB:  MOVF   2E,W
14FC:  SUBLW  02
14FD:  BTFSS  03.0
14FE:  GOTO   514
14FF:  BTFSS  03.2
1500:  GOTO   505
1501:  MOVF   2D,W
1502:  SUBLW  0C
1503:  BTFSS  03.0
1504:  GOTO   514
....................          analog0 = (analog0+(525-REFERENCE_VALUE));   
1505:  MOVF   2D,W
1506:  SUBLW  0D
1507:  MOVWF  77
1508:  MOVLW  02
1509:  MOVWF  7A
150A:  MOVF   2E,W
150B:  BTFSS  03.0
150C:  INCFSZ 2E,W
150D:  SUBWF  7A,F
150E:  MOVF   77,W
150F:  ADDWF  2B,F
1510:  MOVF   7A,W
1511:  BTFSC  03.0
1512:  INCFSZ 7A,W
1513:  ADDWF  2C,F
....................        }  
....................        //decrese or increse analog0 to fit in graph that we solve because we solve at 0,525 at 0 mA 
....................         
....................      
....................        ampere = amperecal(analog0); 
1514:  MOVF   2C,W
1515:  MOVWF  5F
1516:  MOVF   2B,W
1517:  MOVWF  5E
1518:  BCF    0A.4
1519:  BSF    0A.3
151A:  GOTO   5BE
151B:  BSF    0A.4
151C:  BCF    0A.3
151D:  MOVF   79,W
151E:  MOVWF  43
151F:  MOVF   78,W
1520:  MOVWF  42
....................        powercal(ampere); 
1521:  MOVF   43,W
1522:  MOVWF  5F
1523:  MOVF   42,W
1524:  MOVWF  5E
1525:  BCF    0A.4
1526:  BSF    0A.3
1527:  GOTO   714
1528:  BSF    0A.4
1529:  BCF    0A.3
....................        if(billcheck == 1){ 
152A:  BTFSS  2A.1
152B:  GOTO   535
....................          unitcal(); 
152C:  BCF    0A.4
152D:  BSF    0A.3
152E:  GOTO   75A
152F:  BSF    0A.4
1530:  BCF    0A.3
....................          billcheck = 0; 
1531:  BCF    2A.1
....................          clearDisplay(); //if you don't want to clear display every time follow sampling unit.You can erase here. 
1532:  BCF    0A.4
1533:  CALL   1D0
1534:  BSF    0A.4
....................         
....................        } 
....................        billcal(); 
1535:  GOTO   000
....................        //printf("Sensor value = %Lu\r\n",analog0 ); 
....................        //printf("AMPERE = %Lu\r\n",ampere );  //sent to computer 
....................        //printf("POWER = %Lu\r\n",power ); 
....................        //delay_ms(500); 
....................         
....................     
....................         
....................        if(menu>=9){ 
1536:  MOVF   29,W
1537:  SUBLW  08
1538:  BTFSC  03.0
1539:  GOTO   542
....................           
....................          menu%=9; 
153A:  MOVF   29,W
153B:  MOVWF  5E
153C:  MOVLW  09
153D:  MOVWF  5F
153E:  GOTO   03B
153F:  MOVF   77,W
1540:  MOVWF  29
....................          //menu+=1; 
....................        } 
....................        else if(menu<=0) 
1541:  GOTO   710
1542:  MOVF   29,F
1543:  BTFSS  03.2
1544:  GOTO   548
....................        { menu=1; 
1545:  MOVLW  01
1546:  MOVWF  29
....................        } 
....................        else if(menu==1){ 
1547:  GOTO   710
1548:  DECFSZ 29,W
1549:  GOTO   5EC
....................           
....................           
....................          setDisplayPos(1);                      
154A:  MOVLW  01
154B:  BSF    03.5
154C:  MOVWF  31
154D:  BCF    0A.4
154E:  BCF    03.5
154F:  CALL   1F7
1550:  BSF    0A.4
....................          displayLongText("SENSOR"); 
1551:  CLRF   78
1552:  MOVLW  07
1553:  MOVWF  77
1554:  MOVLW  4C
1555:  MOVWF  04
1556:  BCF    03.7
1557:  MOVF   78,W
1558:  BCF    0A.4
1559:  CALL   044
155A:  BSF    0A.4
155B:  MOVWF  00
155C:  INCF   78,F
155D:  INCF   04,F
155E:  DECFSZ 77,F
155F:  GOTO   557
1560:  BSF    03.5
1561:  CLRF   34
1562:  MOVLW  4C
1563:  MOVWF  33
1564:  BCF    0A.4
1565:  BCF    03.5
1566:  CALL   213
1567:  BSF    0A.4
....................          setDisplayPos(9);                      
1568:  MOVLW  09
1569:  BSF    03.5
156A:  MOVWF  31
156B:  BCF    0A.4
156C:  BCF    03.5
156D:  CALL   1F7
156E:  BSF    0A.4
....................          displayLongText("mA"); 
156F:  MOVLW  6D
1570:  MOVWF  4C
1571:  MOVLW  41
1572:  MOVWF  4D
1573:  CLRF   4E
1574:  BSF    03.5
1575:  CLRF   34
1576:  MOVLW  4C
1577:  MOVWF  33
1578:  BCF    0A.4
1579:  BCF    03.5
157A:  CALL   213
157B:  BSF    0A.4
....................          setDisplayPos(13);                      
157C:  MOVLW  0D
157D:  BSF    03.5
157E:  MOVWF  31
157F:  BCF    0A.4
1580:  BCF    03.5
1581:  CALL   1F7
1582:  BSF    0A.4
....................          displayLongText("WATT"); 
1583:  MOVLW  57
1584:  MOVWF  4C
1585:  MOVLW  41
1586:  MOVWF  4D
1587:  MOVLW  54
1588:  MOVWF  4E
1589:  MOVWF  4F
158A:  CLRF   50
158B:  BSF    03.5
158C:  CLRF   34
158D:  MOVLW  4C
158E:  MOVWF  33
158F:  BCF    0A.4
1590:  BCF    03.5
1591:  CALL   213
1592:  BSF    0A.4
....................           
....................          setDisplayPos(18); 
1593:  MOVLW  12
1594:  BSF    03.5
1595:  MOVWF  31
1596:  BCF    0A.4
1597:  BCF    03.5
1598:  CALL   1F7
1599:  BSF    0A.4
....................          displayValue(analog0); 
159A:  MOVF   2C,W
159B:  MOVWF  6D
159C:  MOVF   2B,W
159D:  MOVWF  6C
159E:  CALL   052
....................          setDisplayPos(21); 
159F:  MOVLW  15
15A0:  BSF    03.5
15A1:  MOVWF  31
15A2:  BCF    0A.4
15A3:  BCF    03.5
15A4:  CALL   1F7
15A5:  BSF    0A.4
....................          displayLongText("   "); 
15A6:  MOVLW  20
15A7:  MOVWF  4C
15A8:  MOVWF  4D
15A9:  MOVWF  4E
15AA:  CLRF   4F
15AB:  BSF    03.5
15AC:  CLRF   34
15AD:  MOVLW  4C
15AE:  MOVWF  33
15AF:  BCF    0A.4
15B0:  BCF    03.5
15B1:  CALL   213
15B2:  BSF    0A.4
....................          setDisplayPos(24); 
15B3:  MOVLW  18
15B4:  BSF    03.5
15B5:  MOVWF  31
15B6:  BCF    0A.4
15B7:  BCF    03.5
15B8:  CALL   1F7
15B9:  BSF    0A.4
....................          displayValue(ampere); 
15BA:  MOVF   43,W
15BB:  MOVWF  6D
15BC:  MOVF   42,W
15BD:  MOVWF  6C
15BE:  CALL   052
....................          setDisplayPos(28);                      
15BF:  MOVLW  1C
15C0:  BSF    03.5
15C1:  MOVWF  31
15C2:  BCF    0A.4
15C3:  BCF    03.5
15C4:  CALL   1F7
15C5:  BSF    0A.4
....................          displayLongText(" "); 
15C6:  MOVLW  20
15C7:  MOVWF  4C
15C8:  CLRF   4D
15C9:  BSF    03.5
15CA:  CLRF   34
15CB:  MOVLW  4C
15CC:  MOVWF  33
15CD:  BCF    0A.4
15CE:  BCF    03.5
15CF:  CALL   213
15D0:  BSF    0A.4
....................          setDisplayPos(29); 
15D1:  MOVLW  1D
15D2:  BSF    03.5
15D3:  MOVWF  31
15D4:  BCF    0A.4
15D5:  BCF    03.5
15D6:  CALL   1F7
15D7:  BSF    0A.4
....................          displayValue(power); 
15D8:  MOVF   30,W
15D9:  MOVWF  6D
15DA:  MOVF   2F,W
15DB:  MOVWF  6C
15DC:  CALL   052
....................          menu = checkleft(menu); 
15DD:  MOVF   29,W
15DE:  BSF    03.5
15DF:  MOVWF  31
15E0:  BCF    03.5
15E1:  CALL   083
15E2:  MOVF   78,W
15E3:  MOVWF  29
....................          menu = checkright(menu); 
15E4:  MOVF   29,W
15E5:  BSF    03.5
15E6:  MOVWF  31
15E7:  BCF    03.5
15E8:  CALL   099
15E9:  MOVF   78,W
15EA:  MOVWF  29
....................           
....................           
....................         
....................        } 
....................        else if(menu==2){ 
15EB:  GOTO   710
15EC:  MOVF   29,W
15ED:  SUBLW  02
15EE:  BTFSS  03.2
15EF:  GOTO   695
....................           
....................          setDisplayPos(2);                      
15F0:  MOVLW  02
15F1:  BSF    03.5
15F2:  MOVWF  31
15F3:  BCF    0A.4
15F4:  BCF    03.5
15F5:  CALL   1F7
15F6:  BSF    0A.4
....................          displayLongText("volt"); 
15F7:  MOVLW  76
15F8:  MOVWF  53
15F9:  MOVLW  6F
15FA:  MOVWF  54
15FB:  MOVLW  6C
15FC:  MOVWF  55
15FD:  MOVLW  74
15FE:  MOVWF  56
15FF:  CLRF   57
1600:  BSF    03.5
1601:  CLRF   34
1602:  MOVLW  53
1603:  MOVWF  33
1604:  BCF    0A.4
1605:  BCF    03.5
1606:  CALL   213
1607:  BSF    0A.4
....................          setDisplayPos(9);                      
1608:  MOVLW  09
1609:  BSF    03.5
160A:  MOVWF  31
160B:  BCF    0A.4
160C:  BCF    03.5
160D:  CALL   1F7
160E:  BSF    0A.4
....................          displayLongText("mA"); 
160F:  MOVLW  6D
1610:  MOVWF  53
1611:  MOVLW  41
1612:  MOVWF  54
1613:  CLRF   55
1614:  BSF    03.5
1615:  CLRF   34
1616:  MOVLW  53
1617:  MOVWF  33
1618:  BCF    0A.4
1619:  BCF    03.5
161A:  CALL   213
161B:  BSF    0A.4
....................          setDisplayPos(13);                      
161C:  MOVLW  0D
161D:  BSF    03.5
161E:  MOVWF  31
161F:  BCF    0A.4
1620:  BCF    03.5
1621:  CALL   1F7
1622:  BSF    0A.4
....................          displayLongText("WATT"); 
1623:  MOVLW  57
1624:  MOVWF  53
1625:  MOVLW  41
1626:  MOVWF  54
1627:  MOVLW  54
1628:  MOVWF  55
1629:  MOVWF  56
162A:  CLRF   57
162B:  BSF    03.5
162C:  CLRF   34
162D:  MOVLW  53
162E:  MOVWF  33
162F:  BCF    0A.4
1630:  BCF    03.5
1631:  CALL   213
1632:  BSF    0A.4
....................          setDisplayPos(18); 
1633:  MOVLW  12
1634:  BSF    03.5
1635:  MOVWF  31
1636:  BCF    0A.4
1637:  BCF    03.5
1638:  CALL   1F7
1639:  BSF    0A.4
....................          displayValue(230); 
163A:  CLRF   6D
163B:  MOVLW  E6
163C:  MOVWF  6C
163D:  CALL   052
....................           
....................          setDisplayPos(21); 
163E:  MOVLW  15
163F:  BSF    03.5
1640:  MOVWF  31
1641:  BCF    0A.4
1642:  BCF    03.5
1643:  CALL   1F7
1644:  BSF    0A.4
....................          displayLongText("   "); 
1645:  MOVLW  20
1646:  MOVWF  53
1647:  MOVWF  54
1648:  MOVWF  55
1649:  CLRF   56
164A:  BSF    03.5
164B:  CLRF   34
164C:  MOVLW  53
164D:  MOVWF  33
164E:  BCF    0A.4
164F:  BCF    03.5
1650:  CALL   213
1651:  BSF    0A.4
....................          setDisplayPos(24); 
1652:  MOVLW  18
1653:  BSF    03.5
1654:  MOVWF  31
1655:  BCF    0A.4
1656:  BCF    03.5
1657:  CALL   1F7
1658:  BSF    0A.4
....................          displayValue(ampere); 
1659:  MOVF   43,W
165A:  MOVWF  6D
165B:  MOVF   42,W
165C:  MOVWF  6C
165D:  CALL   052
....................          delay_us(100); 
165E:  MOVLW  A6
165F:  MOVWF  77
1660:  DECFSZ 77,F
1661:  GOTO   660
1662:  NOP
....................          setDisplayPos(28);                      
1663:  MOVLW  1C
1664:  BSF    03.5
1665:  MOVWF  31
1666:  BCF    0A.4
1667:  BCF    03.5
1668:  CALL   1F7
1669:  BSF    0A.4
....................          displayLongText(" "); 
166A:  MOVLW  20
166B:  MOVWF  53
166C:  CLRF   54
166D:  BSF    03.5
166E:  CLRF   34
166F:  MOVLW  53
1670:  MOVWF  33
1671:  BCF    0A.4
1672:  BCF    03.5
1673:  CALL   213
1674:  BSF    0A.4
....................          setDisplayPos(29); 
1675:  MOVLW  1D
1676:  BSF    03.5
1677:  MOVWF  31
1678:  BCF    0A.4
1679:  BCF    03.5
167A:  CALL   1F7
167B:  BSF    0A.4
....................          displayValue(power); 
167C:  MOVF   30,W
167D:  MOVWF  6D
167E:  MOVF   2F,W
167F:  MOVWF  6C
1680:  CALL   052
....................          delay_us(100); 
1681:  MOVLW  A6
1682:  MOVWF  77
1683:  DECFSZ 77,F
1684:  GOTO   683
1685:  NOP
....................          menu = checkleft(menu); 
1686:  MOVF   29,W
1687:  BSF    03.5
1688:  MOVWF  31
1689:  BCF    03.5
168A:  CALL   083
168B:  MOVF   78,W
168C:  MOVWF  29
....................          menu = checkright(menu); 
168D:  MOVF   29,W
168E:  BSF    03.5
168F:  MOVWF  31
1690:  BCF    03.5
1691:  CALL   099
1692:  MOVF   78,W
1693:  MOVWF  29
....................           
....................          
....................        } 
....................        else if(menu ==3){ 
1694:  GOTO   710
1695:  MOVF   29,W
1696:  SUBLW  03
1697:  BTFSS  03.2
1698:  GOTO   6F4
....................              
....................             setDisplayPos(1); 
1699:  MOVLW  01
169A:  BSF    03.5
169B:  MOVWF  31
169C:  BCF    0A.4
169D:  BCF    03.5
169E:  CALL   1F7
169F:  BSF    0A.4
....................             displayLongText(" Unit"); 
16A0:  MOVLW  20
16A1:  MOVWF  58
16A2:  MOVLW  55
16A3:  MOVWF  59
16A4:  MOVLW  6E
16A5:  MOVWF  5A
16A6:  MOVLW  69
16A7:  MOVWF  5B
16A8:  MOVLW  74
16A9:  MOVWF  5C
16AA:  CLRF   5D
16AB:  BSF    03.5
16AC:  CLRF   34
16AD:  MOVLW  58
16AE:  MOVWF  33
16AF:  BCF    0A.4
16B0:  BCF    03.5
16B1:  CALL   213
16B2:  BSF    0A.4
....................             setDisplayPos(8); 
16B3:  MOVLW  08
16B4:  BSF    03.5
16B5:  MOVWF  31
16B6:  BCF    0A.4
16B7:  BCF    03.5
16B8:  CALL   1F7
16B9:  BSF    0A.4
....................             displayValue(unit); 
16BA:  MOVF   33,W
16BB:  MOVWF  6D
16BC:  MOVF   32,W
16BD:  MOVWF  6C
16BE:  CALL   052
....................             setDisplayPos(17); 
16BF:  MOVLW  11
16C0:  BSF    03.5
16C1:  MOVWF  31
16C2:  BCF    0A.4
16C3:  BCF    03.5
16C4:  CALL   1F7
16C5:  BSF    0A.4
....................             displayLongText(" Baht"); 
16C6:  MOVLW  20
16C7:  MOVWF  58
16C8:  MOVLW  42
16C9:  MOVWF  59
16CA:  MOVLW  61
16CB:  MOVWF  5A
16CC:  MOVLW  68
16CD:  MOVWF  5B
16CE:  MOVLW  74
16CF:  MOVWF  5C
16D0:  CLRF   5D
16D1:  BSF    03.5
16D2:  CLRF   34
16D3:  MOVLW  58
16D4:  MOVWF  33
16D5:  BCF    0A.4
16D6:  BCF    03.5
16D7:  CALL   213
16D8:  BSF    0A.4
....................             setDisplayPos(24); 
16D9:  MOVLW  18
16DA:  BSF    03.5
16DB:  MOVWF  31
16DC:  BCF    0A.4
16DD:  BCF    03.5
16DE:  CALL   1F7
16DF:  BSF    0A.4
....................             displayValue(bill); 
16E0:  MOVF   3D,W
16E1:  MOVWF  6D
16E2:  MOVF   3C,W
16E3:  MOVWF  6C
16E4:  CALL   052
....................             menu = checkleft(menu); 
16E5:  MOVF   29,W
16E6:  BSF    03.5
16E7:  MOVWF  31
16E8:  BCF    03.5
16E9:  CALL   083
16EA:  MOVF   78,W
16EB:  MOVWF  29
....................             menu = checkright(menu); 
16EC:  MOVF   29,W
16ED:  BSF    03.5
16EE:  MOVWF  31
16EF:  BCF    03.5
16F0:  CALL   099
16F1:  MOVF   78,W
16F2:  MOVWF  29
....................        } 
....................        else if(menu ==4){ 
16F3:  GOTO   710
16F4:  MOVF   29,W
16F5:  SUBLW  04
16F6:  BTFSS  03.2
16F7:  GOTO   6FA
....................             menucalibrate(); 
16F8:  GOTO   0AF
....................        } 
....................        else if(menu ==5){ 
16F9:  GOTO   710
16FA:  MOVF   29,W
16FB:  SUBLW  05
16FC:  BTFSS  03.2
16FD:  GOTO   700
....................             menuresetcalibrate(); 
16FE:  GOTO   164
....................        } 
....................        else if(menu ==6){ 
16FF:  GOTO   710
1700:  MOVF   29,W
1701:  SUBLW  06
1702:  BTFSS  03.2
1703:  GOTO   706
....................             menuresetunit(); 
1704:  GOTO   211
....................        } 
....................        else if(menu ==7){ 
1705:  GOTO   710
1706:  MOVF   29,W
1707:  SUBLW  07
1708:  BTFSS  03.2
1709:  GOTO   70C
....................             menushutdown(); 
170A:  GOTO   2BA
....................        } 
....................        else if(menu ==8){ 
170B:  GOTO   710
170C:  MOVF   29,W
170D:  SUBLW  08
170E:  BTFSC  03.2
....................             menushutdownfortime10second(); 
170F:  GOTO   310
....................        } 
....................         
....................         
....................         
....................    
....................         
....................         
....................      }    
....................     } 
1710:  GOTO   471
.................... } 
....................  
....................  
.................... ///////////////////////////// 
.................... //Unit Value memory Function 
.................... ///////////////////////////// 
.................... int16 readUnitValueInEEPROM(){ 
....................     
1711:  SLEEP
....................    int16 readUnit; 
....................     
....................    readUnit = read_eeprom(0x00) << 8; // address 10 is high_byte 
13E0:  BSF    03.6
13E1:  CLRF   0D
13E2:  BSF    03.5
13E3:  BCF    0C.7
13E4:  BSF    0C.0
13E5:  BCF    03.5
13E6:  MOVF   0C,W
13E7:  BCF    03.6
13E8:  MOVWF  5F
13E9:  CLRF   5E
....................    readUnit += read_eeprom(0x01) ;    // address 11 is low_byte 
13EA:  MOVLW  01
13EB:  BSF    03.6
13EC:  MOVWF  0D
13ED:  BSF    03.5
13EE:  BCF    0C.7
13EF:  BSF    0C.0
13F0:  BCF    03.5
13F1:  MOVF   0C,W
13F2:  BCF    03.6
13F3:  ADDWF  5E,F
13F4:  BTFSC  03.0
13F5:  INCF   5F,F
....................    return readUnit; 
13F6:  MOVF   5E,W
13F7:  MOVWF  78
13F8:  MOVF   5F,W
13F9:  MOVWF  79
.................... } 
....................  
....................  
.................... void writeUnitValueInEEPROM(){ 
....................    int con_h,con_l; 
....................     
....................    con_l = unit & 0xff; 
0FB5:  MOVF   32,W
0FB6:  MOVWF  5F
....................    con_h = unit >> 8; 
0FB7:  MOVF   33,W
0FB8:  MOVWF  5E
....................     
....................    write_eeprom(0x00,con_h); 
0FB9:  MOVF   0B,W
0FBA:  MOVWF  77
0FBB:  BCF    0B.7
0FBC:  BSF    03.6
0FBD:  CLRF   0D
0FBE:  BCF    03.6
0FBF:  MOVF   5E,W
0FC0:  BSF    03.6
0FC1:  MOVWF  0C
0FC2:  BSF    03.5
0FC3:  BCF    0C.7
0FC4:  BSF    0C.2
0FC5:  MOVLW  55
0FC6:  MOVWF  0D
0FC7:  MOVLW  AA
0FC8:  MOVWF  0D
0FC9:  BSF    0C.1
0FCA:  BTFSC  0C.1
0FCB:  GOTO   7CA
0FCC:  BCF    0C.2
0FCD:  MOVF   77,W
0FCE:  BCF    03.5
0FCF:  BCF    03.6
0FD0:  IORWF  0B,F
....................    write_eeprom(0x01,con_l); 
0FD1:  MOVF   0B,W
0FD2:  MOVWF  77
0FD3:  BCF    0B.7
0FD4:  MOVLW  01
0FD5:  BSF    03.6
0FD6:  MOVWF  0D
0FD7:  BCF    03.6
0FD8:  MOVF   5F,W
0FD9:  BSF    03.6
0FDA:  MOVWF  0C
0FDB:  BSF    03.5
0FDC:  BCF    0C.7
0FDD:  BSF    0C.2
0FDE:  MOVLW  55
0FDF:  MOVWF  0D
0FE0:  MOVLW  AA
0FE1:  MOVWF  0D
0FE2:  BSF    0C.1
0FE3:  BTFSC  0C.1
0FE4:  GOTO   7E3
0FE5:  BCF    0C.2
0FE6:  MOVF   77,W
0FE7:  BCF    03.5
0FE8:  BCF    03.6
0FE9:  IORWF  0B,F
....................  
.................... } 
....................  
.................... void clearUnitValueInEEPROM(){ 
....................    unit = 0; 
1224:  CLRF   33
1225:  CLRF   32
....................    unit_sim = (float32) unit; 
1226:  MOVF   33,W
1227:  BSF    03.5
1228:  MOVWF  55
1229:  BCF    03.5
122A:  MOVF   32,W
122B:  BSF    03.5
122C:  MOVWF  54
122D:  BCF    0A.4
122E:  BCF    03.5
122F:  CALL   18B
1230:  BSF    0A.4
1231:  MOVF   7A,W
1232:  MOVWF  37
1233:  MOVF   79,W
1234:  MOVWF  36
1235:  MOVF   78,W
1236:  MOVWF  35
1237:  MOVF   77,W
1238:  MOVWF  34
....................    write_eeprom(0x00,0); 
1239:  MOVF   0B,W
123A:  MOVWF  77
123B:  BCF    0B.7
123C:  BSF    03.6
123D:  CLRF   0D
123E:  CLRF   0C
123F:  BSF    03.5
1240:  BCF    0C.7
1241:  BSF    0C.2
1242:  MOVLW  55
1243:  MOVWF  0D
1244:  MOVLW  AA
1245:  MOVWF  0D
1246:  BSF    0C.1
1247:  BTFSC  0C.1
1248:  GOTO   247
1249:  BCF    0C.2
124A:  MOVF   77,W
124B:  BCF    03.5
124C:  BCF    03.6
124D:  IORWF  0B,F
....................    write_eeprom(0x01,0); 
124E:  MOVF   0B,W
124F:  MOVWF  77
1250:  BCF    0B.7
1251:  MOVLW  01
1252:  BSF    03.6
1253:  MOVWF  0D
1254:  CLRF   0C
1255:  BSF    03.5
1256:  BCF    0C.7
1257:  BSF    0C.2
1258:  MOVLW  55
1259:  MOVWF  0D
125A:  MOVLW  AA
125B:  MOVWF  0D
125C:  BSF    0C.1
125D:  BTFSC  0C.1
125E:  GOTO   25D
125F:  BCF    0C.2
1260:  MOVF   77,W
1261:  BCF    03.5
1262:  BCF    03.6
1263:  IORWF  0B,F
....................  
.................... } 
....................  
....................  
....................  
.................... ///////////////////////////// 
.................... //Unit Value memory Function 
.................... ///////////////////////////// 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... ///////////////// 
.................... //calculation Function 
.................... //////////////// 
.................... void powercal(int16 ampere){ 
0F14:  CLRF   63
0F15:  CLRF   62
0F16:  CLRF   61
0F17:  CLRF   60
....................    float32 power_sim = 0; 
....................    power_sim =  0.230*ampere; //((230*ampere)*1000) 
0F18:  MOVF   5F,W
0F19:  BSF    03.5
0F1A:  MOVWF  55
0F1B:  BCF    03.5
0F1C:  MOVF   5E,W
0F1D:  BSF    03.5
0F1E:  MOVWF  54
0F1F:  BCF    0A.3
0F20:  BCF    03.5
0F21:  CALL   18B
0F22:  BSF    0A.3
0F23:  MOVLW  1F
0F24:  BSF    03.5
0F25:  MOVWF  53
0F26:  MOVLW  85
0F27:  MOVWF  52
0F28:  MOVLW  6B
0F29:  MOVWF  51
0F2A:  MOVLW  7C
0F2B:  MOVWF  50
0F2C:  MOVF   7A,W
0F2D:  MOVWF  57
0F2E:  MOVF   79,W
0F2F:  MOVWF  56
0F30:  MOVF   78,W
0F31:  MOVWF  55
0F32:  MOVF   77,W
0F33:  MOVWF  54
0F34:  BCF    0A.3
0F35:  BCF    03.5
0F36:  CALL   370
0F37:  BSF    0A.3
0F38:  MOVF   7A,W
0F39:  MOVWF  63
0F3A:  MOVF   79,W
0F3B:  MOVWF  62
0F3C:  MOVF   78,W
0F3D:  MOVWF  61
0F3E:  MOVF   77,W
0F3F:  MOVWF  60
....................    power = (int16) power_sim; 
0F40:  MOVF   63,W
0F41:  BSF    03.5
0F42:  MOVWF  53
0F43:  BCF    03.5
0F44:  MOVF   62,W
0F45:  BSF    03.5
0F46:  MOVWF  52
0F47:  BCF    03.5
0F48:  MOVF   61,W
0F49:  BSF    03.5
0F4A:  MOVWF  51
0F4B:  BCF    03.5
0F4C:  MOVF   60,W
0F4D:  BSF    03.5
0F4E:  MOVWF  50
0F4F:  BCF    0A.3
0F50:  BCF    03.5
0F51:  CALL   34F
0F52:  BSF    0A.3
0F53:  MOVF   79,W
0F54:  MOVWF  30
0F55:  MOVF   78,W
0F56:  MOVWF  2F
.................... } 
0F57:  BCF    0A.3
0F58:  BSF    0A.4
0F59:  GOTO   528 (RETURN)
....................  
....................  
.................... int16 amperecal(int16 analog){ 
0DBE:  MOVLW  FA
0DBF:  MOVWF  6D
0DC0:  MOVLW  A2
0DC1:  MOVWF  6C
0DC2:  MOVLW  48
0DC3:  MOVWF  6B
0DC4:  MOVLW  71
0DC5:  MOVWF  6A
0DC6:  MOVLW  AC
0DC7:  MOVWF  71
0DC8:  MOVLW  19
0DC9:  MOVWF  70
0DCA:  MOVLW  39
0DCB:  MOVWF  6F
0DCC:  MOVLW  7C
0DCD:  MOVWF  6E
0DCE:  MOVLW  10
0DCF:  MOVWF  75
0DD0:  MOVLW  98
0DD1:  MOVWF  74
0DD2:  MOVLW  6A
0DD3:  MOVWF  73
0DD4:  MOVLW  85
0DD5:  MOVWF  72
0DD6:  MOVLW  9A
0DD7:  MOVWF  7E
0DD8:  MOVLW  F8
0DD9:  MOVWF  7D
0DDA:  MOVLW  47
0DDB:  MOVWF  7C
0DDC:  MOVLW  8D
0DDD:  MOVWF  7B
....................    float32 analog_sim; 
....................    float32 ampere_sim; 
....................    int16 ampere; 
....................    float32 A = 0.000095671; 
....................    float32 B = 0.180762; 
....................    float32 C = 117.297; 
....................    float32 D = 25596.3; 
....................     
....................    analog_sim = analog; 
0DDE:  MOVF   5F,W
0DDF:  BSF    03.5
0DE0:  MOVWF  55
0DE1:  BCF    03.5
0DE2:  MOVF   5E,W
0DE3:  BSF    03.5
0DE4:  MOVWF  54
0DE5:  BCF    0A.3
0DE6:  BCF    03.5
0DE7:  CALL   18B
0DE8:  BSF    0A.3
0DE9:  MOVF   7A,W
0DEA:  MOVWF  63
0DEB:  MOVF   79,W
0DEC:  MOVWF  62
0DED:  MOVF   78,W
0DEE:  MOVWF  61
0DEF:  MOVF   77,W
0DF0:  MOVWF  60
....................    ampere_sim =(A*( pow(analog_sim,3)))-(B*( pow(analog_sim,2)))+(C* analog_sim)-D; 
0DF1:  MOVF   63,W
0DF2:  BSF    03.5
0DF3:  MOVWF  27
0DF4:  BCF    03.5
0DF5:  MOVF   62,W
0DF6:  BSF    03.5
0DF7:  MOVWF  26
0DF8:  BCF    03.5
0DF9:  MOVF   61,W
0DFA:  BSF    03.5
0DFB:  MOVWF  25
0DFC:  BCF    03.5
0DFD:  MOVF   60,W
0DFE:  BSF    03.5
0DFF:  MOVWF  24
0E00:  CLRF   2B
0E01:  CLRF   2A
0E02:  MOVLW  40
0E03:  MOVWF  29
0E04:  MOVLW  80
0E05:  MOVWF  28
0E06:  BCF    03.5
0E07:  CALL   41B
0E08:  MOVF   6D,W
0E09:  BSF    03.5
0E0A:  MOVWF  53
0E0B:  BCF    03.5
0E0C:  MOVF   6C,W
0E0D:  BSF    03.5
0E0E:  MOVWF  52
0E0F:  BCF    03.5
0E10:  MOVF   6B,W
0E11:  BSF    03.5
0E12:  MOVWF  51
0E13:  BCF    03.5
0E14:  MOVF   6A,W
0E15:  BSF    03.5
0E16:  MOVWF  50
0E17:  MOVF   7A,W
0E18:  MOVWF  57
0E19:  MOVF   79,W
0E1A:  MOVWF  56
0E1B:  MOVF   78,W
0E1C:  MOVWF  55
0E1D:  MOVF   77,W
0E1E:  MOVWF  54
0E1F:  BCF    0A.3
0E20:  BCF    03.5
0E21:  CALL   370
0E22:  BSF    0A.3
0E23:  MOVF   7A,W
0E24:  BSF    03.5
0E25:  MOVWF  23
0E26:  MOVF   79,W
0E27:  MOVWF  22
0E28:  MOVF   78,W
0E29:  MOVWF  21
0E2A:  MOVF   77,W
0E2B:  MOVWF  20
0E2C:  BCF    03.5
0E2D:  MOVF   63,W
0E2E:  BSF    03.5
0E2F:  MOVWF  27
0E30:  BCF    03.5
0E31:  MOVF   62,W
0E32:  BSF    03.5
0E33:  MOVWF  26
0E34:  BCF    03.5
0E35:  MOVF   61,W
0E36:  BSF    03.5
0E37:  MOVWF  25
0E38:  BCF    03.5
0E39:  MOVF   60,W
0E3A:  BSF    03.5
0E3B:  MOVWF  24
0E3C:  CLRF   2B
0E3D:  CLRF   2A
0E3E:  CLRF   29
0E3F:  MOVLW  80
0E40:  MOVWF  28
0E41:  BCF    03.5
0E42:  CALL   41B
0E43:  MOVF   71,W
0E44:  BSF    03.5
0E45:  MOVWF  53
0E46:  MOVF   70,W
0E47:  MOVWF  52
0E48:  BCF    03.5
0E49:  MOVF   6F,W
0E4A:  BSF    03.5
0E4B:  MOVWF  51
0E4C:  BCF    03.5
0E4D:  MOVF   6E,W
0E4E:  BSF    03.5
0E4F:  MOVWF  50
0E50:  MOVF   7A,W
0E51:  MOVWF  57
0E52:  MOVF   79,W
0E53:  MOVWF  56
0E54:  MOVF   78,W
0E55:  MOVWF  55
0E56:  MOVF   77,W
0E57:  MOVWF  54
0E58:  BCF    0A.3
0E59:  BCF    03.5
0E5A:  CALL   370
0E5B:  BSF    0A.3
0E5C:  BSF    03.5
0E5D:  CLRF   25
0E5E:  MOVF   04,W
0E5F:  MOVWF  24
0E60:  BCF    25.0
0E61:  BTFSC  03.7
0E62:  BSF    25.0
0E63:  BSF    03.1
0E64:  MOVF   23,W
0E65:  MOVWF  57
0E66:  MOVF   22,W
0E67:  MOVWF  56
0E68:  MOVF   21,W
0E69:  MOVWF  55
0E6A:  MOVF   20,W
0E6B:  MOVWF  54
0E6C:  MOVF   7A,W
0E6D:  MOVWF  5B
0E6E:  MOVF   79,W
0E6F:  MOVWF  5A
0E70:  MOVF   78,W
0E71:  MOVWF  59
0E72:  MOVF   77,W
0E73:  MOVWF  58
0E74:  BCF    0A.3
0E75:  BCF    03.5
0E76:  CALL   3E7
0E77:  BSF    0A.3
0E78:  BSF    03.5
0E79:  MOVF   24,W
0E7A:  MOVWF  04
0E7B:  BCF    03.7
0E7C:  BTFSC  25.0
0E7D:  BSF    03.7
0E7E:  MOVF   7A,W
0E7F:  MOVWF  23
0E80:  MOVF   79,W
0E81:  MOVWF  22
0E82:  MOVF   78,W
0E83:  MOVWF  21
0E84:  MOVF   77,W
0E85:  MOVWF  20
0E86:  MOVF   75,W
0E87:  MOVWF  53
0E88:  MOVF   74,W
0E89:  MOVWF  52
0E8A:  MOVF   73,W
0E8B:  MOVWF  51
0E8C:  MOVF   72,W
0E8D:  MOVWF  50
0E8E:  BCF    03.5
0E8F:  MOVF   63,W
0E90:  BSF    03.5
0E91:  MOVWF  57
0E92:  BCF    03.5
0E93:  MOVF   62,W
0E94:  BSF    03.5
0E95:  MOVWF  56
0E96:  BCF    03.5
0E97:  MOVF   61,W
0E98:  BSF    03.5
0E99:  MOVWF  55
0E9A:  BCF    03.5
0E9B:  MOVF   60,W
0E9C:  BSF    03.5
0E9D:  MOVWF  54
0E9E:  BCF    0A.3
0E9F:  BCF    03.5
0EA0:  CALL   370
0EA1:  BSF    0A.3
0EA2:  BSF    03.5
0EA3:  CLRF   27
0EA4:  MOVF   04,W
0EA5:  MOVWF  26
0EA6:  BCF    27.0
0EA7:  BTFSC  03.7
0EA8:  BSF    27.0
0EA9:  BCF    03.1
0EAA:  MOVF   23,W
0EAB:  MOVWF  57
0EAC:  MOVF   22,W
0EAD:  MOVWF  56
0EAE:  MOVF   21,W
0EAF:  MOVWF  55
0EB0:  MOVF   20,W
0EB1:  MOVWF  54
0EB2:  MOVF   7A,W
0EB3:  MOVWF  5B
0EB4:  MOVF   79,W
0EB5:  MOVWF  5A
0EB6:  MOVF   78,W
0EB7:  MOVWF  59
0EB8:  MOVF   77,W
0EB9:  MOVWF  58
0EBA:  BCF    0A.3
0EBB:  BCF    03.5
0EBC:  CALL   3E7
0EBD:  BSF    0A.3
0EBE:  BSF    03.5
0EBF:  MOVF   26,W
0EC0:  MOVWF  04
0EC1:  BCF    03.7
0EC2:  BTFSC  27.0
0EC3:  BSF    03.7
0EC4:  MOVF   7A,W
0EC5:  MOVWF  23
0EC6:  MOVF   79,W
0EC7:  MOVWF  22
0EC8:  MOVF   78,W
0EC9:  MOVWF  21
0ECA:  MOVF   77,W
0ECB:  MOVWF  20
0ECC:  CLRF   29
0ECD:  MOVF   04,W
0ECE:  MOVWF  28
0ECF:  BCF    29.0
0ED0:  BTFSC  03.7
0ED1:  BSF    29.0
0ED2:  BSF    03.1
0ED3:  MOVF   23,W
0ED4:  MOVWF  57
0ED5:  MOVF   22,W
0ED6:  MOVWF  56
0ED7:  MOVF   21,W
0ED8:  MOVWF  55
0ED9:  MOVF   20,W
0EDA:  MOVWF  54
0EDB:  MOVF   7E,W
0EDC:  MOVWF  5B
0EDD:  MOVF   7D,W
0EDE:  MOVWF  5A
0EDF:  MOVF   7C,W
0EE0:  MOVWF  59
0EE1:  MOVF   7B,W
0EE2:  MOVWF  58
0EE3:  BCF    0A.3
0EE4:  BCF    03.5
0EE5:  CALL   3E7
0EE6:  BSF    0A.3
0EE7:  BSF    03.5
0EE8:  MOVF   28,W
0EE9:  MOVWF  04
0EEA:  BCF    03.7
0EEB:  BTFSC  29.0
0EEC:  BSF    03.7
0EED:  MOVF   7A,W
0EEE:  BCF    03.5
0EEF:  MOVWF  67
0EF0:  MOVF   79,W
0EF1:  MOVWF  66
0EF2:  MOVF   78,W
0EF3:  MOVWF  65
0EF4:  MOVF   77,W
0EF5:  MOVWF  64
....................    ampere = (int16) ampere_sim; 
0EF6:  MOVF   67,W
0EF7:  BSF    03.5
0EF8:  MOVWF  53
0EF9:  BCF    03.5
0EFA:  MOVF   66,W
0EFB:  BSF    03.5
0EFC:  MOVWF  52
0EFD:  BCF    03.5
0EFE:  MOVF   65,W
0EFF:  BSF    03.5
0F00:  MOVWF  51
0F01:  BCF    03.5
0F02:  MOVF   64,W
0F03:  BSF    03.5
0F04:  MOVWF  50
0F05:  BCF    0A.3
0F06:  BCF    03.5
0F07:  CALL   34F
0F08:  BSF    0A.3
0F09:  MOVF   79,W
0F0A:  MOVWF  69
0F0B:  MOVF   78,W
0F0C:  MOVWF  68
....................    return ampere; 
0F0D:  MOVF   68,W
0F0E:  MOVWF  78
0F0F:  MOVF   69,W
0F10:  MOVWF  79
.................... } 
0F11:  BCF    0A.3
0F12:  BSF    0A.4
0F13:  GOTO   51B (RETURN)
....................  
.................... void unitcal(){ 
....................    //unit+=1; 
....................    //unit_sim = unit_sim + (power*1.388E-6); //(power*0.001*(5/3600)) 
....................    unit_sim = unit_sim + (power*1.388E1); 
0F5A:  MOVF   30,W
0F5B:  BSF    03.5
0F5C:  MOVWF  55
0F5D:  BCF    03.5
0F5E:  MOVF   2F,W
0F5F:  BSF    03.5
0F60:  MOVWF  54
0F61:  BCF    0A.3
0F62:  BCF    03.5
0F63:  CALL   18B
0F64:  BSF    0A.3
0F65:  MOVF   7A,W
0F66:  BSF    03.5
0F67:  MOVWF  53
0F68:  MOVF   79,W
0F69:  MOVWF  52
0F6A:  MOVF   78,W
0F6B:  MOVWF  51
0F6C:  MOVF   77,W
0F6D:  MOVWF  50
0F6E:  MOVLW  7B
0F6F:  MOVWF  57
0F70:  MOVLW  14
0F71:  MOVWF  56
0F72:  MOVLW  5E
0F73:  MOVWF  55
0F74:  MOVLW  82
0F75:  MOVWF  54
0F76:  BCF    0A.3
0F77:  BCF    03.5
0F78:  CALL   370
0F79:  BSF    0A.3
0F7A:  BCF    03.1
0F7B:  MOVF   37,W
0F7C:  BSF    03.5
0F7D:  MOVWF  57
0F7E:  BCF    03.5
0F7F:  MOVF   36,W
0F80:  BSF    03.5
0F81:  MOVWF  56
0F82:  BCF    03.5
0F83:  MOVF   35,W
0F84:  BSF    03.5
0F85:  MOVWF  55
0F86:  BCF    03.5
0F87:  MOVF   34,W
0F88:  BSF    03.5
0F89:  MOVWF  54
0F8A:  MOVF   7A,W
0F8B:  MOVWF  5B
0F8C:  MOVF   79,W
0F8D:  MOVWF  5A
0F8E:  MOVF   78,W
0F8F:  MOVWF  59
0F90:  MOVF   77,W
0F91:  MOVWF  58
0F92:  BCF    0A.3
0F93:  BCF    03.5
0F94:  CALL   3E7
0F95:  BSF    0A.3
0F96:  MOVF   7A,W
0F97:  MOVWF  37
0F98:  MOVF   79,W
0F99:  MOVWF  36
0F9A:  MOVF   78,W
0F9B:  MOVWF  35
0F9C:  MOVF   77,W
0F9D:  MOVWF  34
....................    unit = (int16) unit_sim; 
0F9E:  MOVF   37,W
0F9F:  BSF    03.5
0FA0:  MOVWF  53
0FA1:  BCF    03.5
0FA2:  MOVF   36,W
0FA3:  BSF    03.5
0FA4:  MOVWF  52
0FA5:  BCF    03.5
0FA6:  MOVF   35,W
0FA7:  BSF    03.5
0FA8:  MOVWF  51
0FA9:  BCF    03.5
0FAA:  MOVF   34,W
0FAB:  BSF    03.5
0FAC:  MOVWF  50
0FAD:  BCF    0A.3
0FAE:  BCF    03.5
0FAF:  CALL   34F
0FB0:  BSF    0A.3
0FB1:  MOVF   79,W
0FB2:  MOVWF  33
0FB3:  MOVF   78,W
0FB4:  MOVWF  32
....................    writeUnitValueInEEPROM(); 
.................... } 
0FEA:  BCF    0A.3
0FEB:  BSF    0A.4
0FEC:  GOTO   52F (RETURN)
....................  
.................... void billcal(){ 
....................    bill_sim = unit_sim * 3; 
1000:  MOVF   37,W
1001:  BSF    03.5
1002:  MOVWF  53
1003:  BCF    03.5
1004:  MOVF   36,W
1005:  BSF    03.5
1006:  MOVWF  52
1007:  BCF    03.5
1008:  MOVF   35,W
1009:  BSF    03.5
100A:  MOVWF  51
100B:  BCF    03.5
100C:  MOVF   34,W
100D:  BSF    03.5
100E:  MOVWF  50
100F:  CLRF   57
1010:  CLRF   56
1011:  MOVLW  40
1012:  MOVWF  55
1013:  MOVLW  80
1014:  MOVWF  54
1015:  BCF    0A.4
1016:  BCF    03.5
1017:  CALL   370
1018:  BSF    0A.4
1019:  MOVF   7A,W
101A:  MOVWF  3B
101B:  MOVF   79,W
101C:  MOVWF  3A
101D:  MOVF   78,W
101E:  MOVWF  39
101F:  MOVF   77,W
1020:  MOVWF  38
....................    bill = (int16) bill_sim; 
1021:  MOVF   3B,W
1022:  BSF    03.5
1023:  MOVWF  53
1024:  BCF    03.5
1025:  MOVF   3A,W
1026:  BSF    03.5
1027:  MOVWF  52
1028:  BCF    03.5
1029:  MOVF   39,W
102A:  BSF    03.5
102B:  MOVWF  51
102C:  BCF    03.5
102D:  MOVF   38,W
102E:  BSF    03.5
102F:  MOVWF  50
1030:  BCF    0A.4
1031:  BCF    03.5
1032:  CALL   34F
1033:  BSF    0A.4
1034:  MOVF   79,W
1035:  MOVWF  3D
1036:  MOVF   78,W
1037:  MOVWF  3C
.................... } 
1038:  BCF    0A.3
1039:  BSF    0A.4
103A:  GOTO   536 (RETURN)
....................  
.................... ///////////////// 
.................... //calculation Function 
.................... //////////////// 
....................  
....................  
....................  
.................... ///////////////// 
.................... //Menu Function 
.................... //////////////// 
.................... void menushutdownfortime10second(){ 
....................       
....................      selectmenu = checkselect(selectmenu);   
1310:  MOVLW  00
1311:  BTFSC  2A.0
1312:  MOVLW  01
1313:  MOVWF  6A
1314:  BSF    03.5
1315:  MOVWF  32
1316:  BCF    0A.4
1317:  BCF    03.5
1318:  CALL   1E3
1319:  BSF    0A.4
131A:  BCF    2A.0
131B:  BTFSC  78.0
131C:  BSF    2A.0
....................             if(selectmenu > 0){ 
131D:  MOVLW  00
131E:  BTFSC  2A.0
131F:  MOVLW  01
1320:  XORLW  00
1321:  BTFSC  03.2
1322:  GOTO   33D
....................                //save eeprom here 
....................                setDisplayPos(1);                      
1323:  MOVLW  01
1324:  BSF    03.5
1325:  MOVWF  31
1326:  BCF    0A.4
1327:  BCF    03.5
1328:  CALL   1F7
1329:  BSF    0A.4
....................                displayLongText("OK"); 
132A:  MOVLW  4F
132B:  MOVWF  5E
132C:  MOVLW  4B
132D:  MOVWF  5F
132E:  CLRF   60
132F:  BSF    03.5
1330:  CLRF   34
1331:  MOVLW  5E
1332:  MOVWF  33
1333:  BCF    0A.4
1334:  BCF    03.5
1335:  CALL   213
1336:  BSF    0A.4
....................                power_off_time = 10; 
1337:  CLRF   3F
1338:  MOVLW  0A
1339:  MOVWF  3E
....................                power_off_timeUsed = 1; 
133A:  BSF    2A.3
....................                selectmenu = 0; 
133B:  BCF    2A.0
....................             } 
....................             else{ 
133C:  GOTO   3A6
....................                
....................                setDisplayPos(1);                      
133D:  MOVLW  01
133E:  BSF    03.5
133F:  MOVWF  31
1340:  BCF    0A.4
1341:  BCF    03.5
1342:  CALL   1F7
1343:  BSF    0A.4
....................                displayLongText("OFF 10 s"); 
1344:  CLRF   78
1345:  MOVLW  09
1346:  MOVWF  77
1347:  MOVLW  61
1348:  MOVWF  04
1349:  BCF    03.7
134A:  MOVF   78,W
134B:  BCF    0A.4
134C:  CALL   04F
134D:  BSF    0A.4
134E:  MOVWF  00
134F:  INCF   78,F
1350:  INCF   04,F
1351:  DECFSZ 77,F
1352:  GOTO   34A
1353:  BSF    03.5
1354:  CLRF   34
1355:  MOVLW  61
1356:  MOVWF  33
1357:  BCF    0A.4
1358:  BCF    03.5
1359:  CALL   213
135A:  BSF    0A.4
....................                setDisplayPos(17); 
135B:  MOVLW  11
135C:  BSF    03.5
135D:  MOVWF  31
135E:  BCF    0A.4
135F:  BCF    03.5
1360:  CALL   1F7
1361:  BSF    0A.4
....................                displayValue(power_off_timeinterrupt*0.1); 
1362:  MOVF   41,W
1363:  BSF    03.5
1364:  MOVWF  55
1365:  BCF    03.5
1366:  MOVF   40,W
1367:  BSF    03.5
1368:  MOVWF  54
1369:  BCF    0A.4
136A:  BCF    03.5
136B:  CALL   18B
136C:  BSF    0A.4
136D:  MOVF   7A,W
136E:  BSF    03.5
136F:  MOVWF  53
1370:  MOVF   79,W
1371:  MOVWF  52
1372:  MOVF   78,W
1373:  MOVWF  51
1374:  MOVF   77,W
1375:  MOVWF  50
1376:  MOVLW  CD
1377:  MOVWF  57
1378:  MOVLW  CC
1379:  MOVWF  56
137A:  MOVLW  4C
137B:  MOVWF  55
137C:  MOVLW  7B
137D:  MOVWF  54
137E:  BCF    0A.4
137F:  BCF    03.5
1380:  CALL   370
1381:  BSF    0A.4
1382:  MOVF   7A,W
1383:  BSF    03.5
1384:  MOVWF  53
1385:  MOVF   79,W
1386:  MOVWF  52
1387:  MOVF   78,W
1388:  MOVWF  51
1389:  MOVF   77,W
138A:  MOVWF  50
138B:  BCF    0A.4
138C:  BCF    03.5
138D:  CALL   34F
138E:  BSF    0A.4
138F:  MOVF   79,W
1390:  MOVWF  6B
1391:  MOVF   78,W
1392:  MOVWF  6A
1393:  MOVF   79,W
1394:  MOVWF  6D
1395:  MOVF   78,W
1396:  MOVWF  6C
1397:  CALL   052
....................                menu = checkleft(menu); 
1398:  MOVF   29,W
1399:  BSF    03.5
139A:  MOVWF  31
139B:  BCF    03.5
139C:  CALL   083
139D:  MOVF   78,W
139E:  MOVWF  29
....................                menu = checkright(menu); 
139F:  MOVF   29,W
13A0:  BSF    03.5
13A1:  MOVWF  31
13A2:  BCF    03.5
13A3:  CALL   099
13A4:  MOVF   78,W
13A5:  MOVWF  29
....................             } 
....................       
.................... } 
13A6:  BCF    0A.3
13A7:  BSF    0A.4
13A8:  GOTO   710 (RETURN)
....................  
....................  
....................  
....................  
....................  
.................... void menushutdown(){ 
....................       selectmenu = checkexit(selectmenu);   
12BA:  MOVLW  00
12BB:  BTFSC  2A.0
12BC:  MOVLW  01
12BD:  MOVWF  68
12BE:  MOVF   68,W
12BF:  MOVWF  69
12D5:  BCF    2A.0
12D6:  BTFSC  78.0
12D7:  BSF    2A.0
....................             if(selectmenu > 0){ 
12D8:  MOVLW  00
12D9:  BTFSC  2A.0
12DA:  MOVLW  01
12DB:  XORLW  00
12DC:  BTFSC  03.2
12DD:  GOTO   2E1
....................                //save eeprom here 
....................                status_power_on = 0; 
12DE:  BCF    2A.2
....................                selectmenu = 0; 
12DF:  BCF    2A.0
....................             } 
....................             else{ 
12E0:  GOTO   30D
....................                
....................                setDisplayPos(1);                      
12E1:  MOVLW  01
12E2:  BSF    03.5
12E3:  MOVWF  31
12E4:  BCF    0A.4
12E5:  BCF    03.5
12E6:  CALL   1F7
12E7:  BSF    0A.4
....................                displayLongText("POWER OFF"); 
12E8:  CLRF   78
12E9:  MOVLW  0A
12EA:  MOVWF  77
12EB:  MOVLW  5E
12EC:  MOVWF  04
12ED:  BCF    03.7
12EE:  MOVF   78,W
12EF:  BCF    0A.4
12F0:  CALL   05C
12F1:  BSF    0A.4
12F2:  MOVWF  00
12F3:  INCF   78,F
12F4:  INCF   04,F
12F5:  DECFSZ 77,F
12F6:  GOTO   2EE
12F7:  BSF    03.5
12F8:  CLRF   34
12F9:  MOVLW  5E
12FA:  MOVWF  33
12FB:  BCF    0A.4
12FC:  BCF    03.5
12FD:  CALL   213
12FE:  BSF    0A.4
....................                menu = checkleft(menu); 
12FF:  MOVF   29,W
1300:  BSF    03.5
1301:  MOVWF  31
1302:  BCF    03.5
1303:  CALL   083
1304:  MOVF   78,W
1305:  MOVWF  29
....................                menu = checkright(menu); 
1306:  MOVF   29,W
1307:  BSF    03.5
1308:  MOVWF  31
1309:  BCF    03.5
130A:  CALL   099
130B:  MOVF   78,W
130C:  MOVWF  29
....................             } 
....................  
....................  
.................... } 
130D:  BCF    0A.3
130E:  BSF    0A.4
130F:  GOTO   70B (RETURN)
....................  
....................  
....................  
....................  
....................  
.................... void menuresetunit(){ 
....................       selectmenu = checkselect(selectmenu); 
1211:  MOVLW  00
1212:  BTFSC  2A.0
1213:  MOVLW  01
1214:  MOVWF  67
1215:  BSF    03.5
1216:  MOVWF  32
1217:  BCF    0A.4
1218:  BCF    03.5
1219:  CALL   1E3
121A:  BSF    0A.4
121B:  BCF    2A.0
121C:  BTFSC  78.0
121D:  BSF    2A.0
....................             if(selectmenu > 0){ 
121E:  MOVLW  00
121F:  BTFSC  2A.0
1220:  MOVLW  01
1221:  XORLW  00
1222:  BTFSC  03.2
1223:  GOTO   28B
....................                clearUnitValueInEEPROM(); 
....................                selectmenu = 0; 
1264:  BCF    2A.0
....................                setDisplayPos(1);                      
1265:  MOVLW  01
1266:  BSF    03.5
1267:  MOVWF  31
1268:  BCF    0A.4
1269:  BCF    03.5
126A:  CALL   1F7
126B:  BSF    0A.4
....................                displayLongText("Clear OK"); 
126C:  CLRF   78
126D:  MOVLW  09
126E:  MOVWF  77
126F:  MOVLW  5E
1270:  MOVWF  04
1271:  BCF    03.7
1272:  MOVF   78,W
1273:  BCF    0A.4
1274:  CALL   06A
1275:  BSF    0A.4
1276:  MOVWF  00
1277:  INCF   78,F
1278:  INCF   04,F
1279:  DECFSZ 77,F
127A:  GOTO   272
127B:  BSF    03.5
127C:  CLRF   34
127D:  MOVLW  5E
127E:  MOVWF  33
127F:  BCF    0A.4
1280:  BCF    03.5
1281:  CALL   213
1282:  BSF    0A.4
....................                delay_ms(200); 
1283:  MOVLW  C8
1284:  BSF    03.5
1285:  MOVWF  31
1286:  BCF    0A.4
1287:  BCF    03.5
1288:  CALL   1AA
1289:  BSF    0A.4
....................             } 
....................             else{ 
128A:  GOTO   2B7
....................                 
....................                setDisplayPos(1);                      
128B:  MOVLW  01
128C:  BSF    03.5
128D:  MOVWF  31
128E:  BCF    0A.4
128F:  BCF    03.5
1290:  CALL   1F7
1291:  BSF    0A.4
....................                displayLongText("RESET Unit&Money"); 
1292:  CLRF   78
1293:  MOVLW  11
1294:  MOVWF  77
1295:  MOVLW  A0
1296:  MOVWF  04
1297:  BCF    03.7
1298:  MOVF   78,W
1299:  BCF    0A.4
129A:  CALL   077
129B:  BSF    0A.4
129C:  MOVWF  00
129D:  INCF   78,F
129E:  INCF   04,F
129F:  DECFSZ 77,F
12A0:  GOTO   298
12A1:  BSF    03.5
12A2:  CLRF   34
12A3:  MOVLW  A0
12A4:  MOVWF  33
12A5:  BCF    0A.4
12A6:  BCF    03.5
12A7:  CALL   213
12A8:  BSF    0A.4
....................                menu = checkleft(menu); 
12A9:  MOVF   29,W
12AA:  BSF    03.5
12AB:  MOVWF  31
12AC:  BCF    03.5
12AD:  CALL   083
12AE:  MOVF   78,W
12AF:  MOVWF  29
....................                menu = checkright(menu); 
12B0:  MOVF   29,W
12B1:  BSF    03.5
12B2:  MOVWF  31
12B3:  BCF    03.5
12B4:  CALL   099
12B5:  MOVF   78,W
12B6:  MOVWF  29
....................             } 
....................  
....................  
.................... } 
12B7:  BCF    0A.3
12B8:  BSF    0A.4
12B9:  GOTO   705 (RETURN)
....................  
.................... void menucalibrate(){ 
....................      selectmenu = checkselect(selectmenu); 
10AF:  MOVLW  00
10B0:  BTFSC  2A.0
10B1:  MOVLW  01
10B2:  MOVWF  6F
10B3:  BSF    03.5
10B4:  MOVWF  32
10B5:  BCF    0A.4
10B6:  BCF    03.5
10B7:  CALL   1E3
10B8:  BSF    0A.4
10B9:  BCF    2A.0
10BA:  BTFSC  78.0
10BB:  BSF    2A.0
....................             if(selectmenu > 0){ 
10BC:  MOVLW  00
10BD:  BTFSC  2A.0
10BE:  MOVLW  01
10BF:  XORLW  00
10C0:  BTFSC  03.2
10C1:  GOTO   117
....................                REFERENCE_VALUE = calibrate(analog0); 
10C2:  MOVF   2C,W
10C3:  BSF    03.5
10C4:  MOVWF  32
10C5:  BCF    03.5
10C6:  MOVF   2B,W
10C7:  BSF    03.5
10C8:  MOVWF  31
10CD:  MOVF   79,W
10CE:  BCF    03.5
10CF:  MOVWF  2E
10D0:  MOVF   78,W
10D1:  MOVWF  2D
....................                selectmenu = 0; 
10D2:  BCF    2A.0
....................                setDisplayPos(1);                      
10D3:  MOVLW  01
10D4:  BSF    03.5
10D5:  MOVWF  31
10D6:  BCF    0A.4
10D7:  BCF    03.5
10D8:  CALL   1F7
10D9:  BSF    0A.4
....................                displayLongText("   CALIBRATE    "); 
10DA:  CLRF   78
10DB:  MOVLW  11
10DC:  MOVWF  77
10DD:  MOVLW  5E
10DE:  MOVWF  04
10DF:  BCF    03.7
10E0:  MOVF   78,W
10E1:  BCF    0A.4
10E2:  CALL   08C
10E3:  BSF    0A.4
10E4:  MOVWF  00
10E5:  INCF   78,F
10E6:  INCF   04,F
10E7:  DECFSZ 77,F
10E8:  GOTO   0E0
10E9:  BSF    03.5
10EA:  CLRF   34
10EB:  MOVLW  5E
10EC:  MOVWF  33
10ED:  BCF    0A.4
10EE:  BCF    03.5
10EF:  CALL   213
10F0:  BSF    0A.4
....................                setDisplayPos(17);                      
10F1:  MOVLW  11
10F2:  BSF    03.5
10F3:  MOVWF  31
10F4:  BCF    0A.4
10F5:  BCF    03.5
10F6:  CALL   1F7
10F7:  BSF    0A.4
....................                displayLongText("  OK !!! "); 
10F8:  CLRF   78
10F9:  MOVLW  0A
10FA:  MOVWF  77
10FB:  MOVLW  5E
10FC:  MOVWF  04
10FD:  BCF    03.7
10FE:  MOVF   78,W
10FF:  BCF    0A.4
1100:  CALL   0A1
1101:  BSF    0A.4
1102:  MOVWF  00
1103:  INCF   78,F
1104:  INCF   04,F
1105:  DECFSZ 77,F
1106:  GOTO   0FE
1107:  BSF    03.5
1108:  CLRF   34
1109:  MOVLW  5E
110A:  MOVWF  33
110B:  BCF    0A.4
110C:  BCF    03.5
110D:  CALL   213
110E:  BSF    0A.4
....................                delay_ms(200); 
110F:  MOVLW  C8
1110:  BSF    03.5
1111:  MOVWF  31
1112:  BCF    0A.4
1113:  BCF    03.5
1114:  CALL   1AA
1115:  BSF    0A.4
....................             } 
....................             else{ 
1116:  GOTO   161
....................                 
....................                setDisplayPos(1);                      
1117:  MOVLW  01
1118:  BSF    03.5
1119:  MOVWF  31
111A:  BCF    0A.4
111B:  BCF    03.5
111C:  CALL   1F7
111D:  BSF    0A.4
....................                displayLongText("   CALIBRATE    "); 
111E:  CLRF   78
111F:  MOVLW  11
1120:  MOVWF  77
1121:  MOVLW  A0
1122:  MOVWF  04
1123:  BCF    03.7
1124:  MOVF   78,W
1125:  BCF    0A.4
1126:  CALL   08C
1127:  BSF    0A.4
1128:  MOVWF  00
1129:  INCF   78,F
112A:  INCF   04,F
112B:  DECFSZ 77,F
112C:  GOTO   124
112D:  BSF    03.5
112E:  CLRF   34
112F:  MOVLW  A0
1130:  MOVWF  33
1131:  BCF    0A.4
1132:  BCF    03.5
1133:  CALL   213
1134:  BSF    0A.4
....................                setDisplayPos(17);                      
1135:  MOVLW  11
1136:  BSF    03.5
1137:  MOVWF  31
1138:  BCF    0A.4
1139:  BCF    03.5
113A:  CALL   1F7
113B:  BSF    0A.4
....................                displayLongText("  This Tool !!! "); 
113C:  CLRF   78
113D:  MOVLW  11
113E:  MOVWF  77
113F:  MOVLW  A0
1140:  MOVWF  04
1141:  BCF    03.7
1142:  MOVF   78,W
1143:  BCF    0A.4
1144:  CALL   0AF
1145:  BSF    0A.4
1146:  MOVWF  00
1147:  INCF   78,F
1148:  INCF   04,F
1149:  DECFSZ 77,F
114A:  GOTO   142
114B:  BSF    03.5
114C:  CLRF   34
114D:  MOVLW  A0
114E:  MOVWF  33
114F:  BCF    0A.4
1150:  BCF    03.5
1151:  CALL   213
1152:  BSF    0A.4
....................                menu = checkleft(menu); 
1153:  MOVF   29,W
1154:  BSF    03.5
1155:  MOVWF  31
1156:  BCF    03.5
1157:  CALL   083
1158:  MOVF   78,W
1159:  MOVWF  29
....................                menu = checkright(menu); 
115A:  MOVF   29,W
115B:  BSF    03.5
115C:  MOVWF  31
115D:  BCF    03.5
115E:  CALL   099
115F:  MOVF   78,W
1160:  MOVWF  29
....................              
....................             } 
.................... } 
1161:  BCF    0A.3
1162:  BSF    0A.4
1163:  GOTO   6F9 (RETURN)
....................  
.................... void menuresetcalibrate(){ 
....................    selectmenu = checkselect(selectmenu); 
1164:  MOVLW  00
1165:  BTFSC  2A.0
1166:  MOVLW  01
1167:  MOVWF  6E
1168:  BSF    03.5
1169:  MOVWF  32
116A:  BCF    0A.4
116B:  BCF    03.5
116C:  CALL   1E3
116D:  BSF    0A.4
116E:  BCF    2A.0
116F:  BTFSC  78.0
1170:  BSF    2A.0
....................             if(selectmenu > 0){ 
1171:  MOVLW  00
1172:  BTFSC  2A.0
1173:  MOVLW  01
1174:  XORLW  00
1175:  BTFSC  03.2
1176:  GOTO   1C4
....................                REFERENCE_VALUE = resetcalibrate(); 
117B:  MOVF   79,W
117C:  MOVWF  2E
117D:  MOVF   78,W
117E:  MOVWF  2D
....................                selectmenu = 0; 
117F:  BCF    2A.0
....................                setDisplayPos(1);                      
1180:  MOVLW  01
1181:  BSF    03.5
1182:  MOVWF  31
1183:  BCF    0A.4
1184:  BCF    03.5
1185:  CALL   1F7
1186:  BSF    0A.4
....................                displayLongText("RESET CALIBRATE"); 
1187:  CLRF   78
1188:  MOVLW  10
1189:  MOVWF  77
118A:  MOVLW  5E
118B:  MOVWF  04
118C:  BCF    03.7
118D:  MOVF   78,W
118E:  BCF    0A.4
118F:  CALL   0C4
1190:  BSF    0A.4
1191:  MOVWF  00
1192:  INCF   78,F
1193:  INCF   04,F
1194:  DECFSZ 77,F
1195:  GOTO   18D
1196:  BSF    03.5
1197:  CLRF   34
1198:  MOVLW  5E
1199:  MOVWF  33
119A:  BCF    0A.4
119B:  BCF    03.5
119C:  CALL   213
119D:  BSF    0A.4
....................                setDisplayPos(18);                      
119E:  MOVLW  12
119F:  BSF    03.5
11A0:  MOVWF  31
11A1:  BCF    0A.4
11A2:  BCF    03.5
11A3:  CALL   1F7
11A4:  BSF    0A.4
....................                displayLongText("OK !!!"); 
11A5:  CLRF   78
11A6:  MOVLW  07
11A7:  MOVWF  77
11A8:  MOVLW  5E
11A9:  MOVWF  04
11AA:  BCF    03.7
11AB:  MOVF   78,W
11AC:  BCF    0A.4
11AD:  CALL   0D8
11AE:  BSF    0A.4
11AF:  MOVWF  00
11B0:  INCF   78,F
11B1:  INCF   04,F
11B2:  DECFSZ 77,F
11B3:  GOTO   1AB
11B4:  BSF    03.5
11B5:  CLRF   34
11B6:  MOVLW  5E
11B7:  MOVWF  33
11B8:  BCF    0A.4
11B9:  BCF    03.5
11BA:  CALL   213
11BB:  BSF    0A.4
....................                delay_ms(200); 
11BC:  MOVLW  C8
11BD:  BSF    03.5
11BE:  MOVWF  31
11BF:  BCF    0A.4
11C0:  BCF    03.5
11C1:  CALL   1AA
11C2:  BSF    0A.4
....................             } 
....................             else{ 
11C3:  GOTO   20E
....................                 
....................                setDisplayPos(1);                      
11C4:  MOVLW  01
11C5:  BSF    03.5
11C6:  MOVWF  31
11C7:  BCF    0A.4
11C8:  BCF    03.5
11C9:  CALL   1F7
11CA:  BSF    0A.4
....................                displayLongText("RESET CALIBRATE"); 
11CB:  CLRF   78
11CC:  MOVLW  10
11CD:  MOVWF  77
11CE:  MOVLW  A0
11CF:  MOVWF  04
11D0:  BCF    03.7
11D1:  MOVF   78,W
11D2:  BCF    0A.4
11D3:  CALL   0C4
11D4:  BSF    0A.4
11D5:  MOVWF  00
11D6:  INCF   78,F
11D7:  INCF   04,F
11D8:  DECFSZ 77,F
11D9:  GOTO   1D1
11DA:  BSF    03.5
11DB:  CLRF   34
11DC:  MOVLW  A0
11DD:  MOVWF  33
11DE:  BCF    0A.4
11DF:  BCF    03.5
11E0:  CALL   213
11E1:  BSF    0A.4
....................                setDisplayPos(18);                      
11E2:  MOVLW  12
11E3:  BSF    03.5
11E4:  MOVWF  31
11E5:  BCF    0A.4
11E6:  BCF    03.5
11E7:  CALL   1F7
11E8:  BSF    0A.4
....................                displayLongText("This Tool !!!"); 
11E9:  CLRF   78
11EA:  MOVLW  0E
11EB:  MOVWF  77
11EC:  MOVLW  A0
11ED:  MOVWF  04
11EE:  BCF    03.7
11EF:  MOVF   78,W
11F0:  BCF    0A.4
11F1:  CALL   0E3
11F2:  BSF    0A.4
11F3:  MOVWF  00
11F4:  INCF   78,F
11F5:  INCF   04,F
11F6:  DECFSZ 77,F
11F7:  GOTO   1EF
11F8:  BSF    03.5
11F9:  CLRF   34
11FA:  MOVLW  A0
11FB:  MOVWF  33
11FC:  BCF    0A.4
11FD:  BCF    03.5
11FE:  CALL   213
11FF:  BSF    0A.4
....................                menu = checkleft(menu); 
1200:  MOVF   29,W
1201:  BSF    03.5
1202:  MOVWF  31
1203:  BCF    03.5
1204:  CALL   083
1205:  MOVF   78,W
1206:  MOVWF  29
....................                menu = checkright(menu); 
1207:  MOVF   29,W
1208:  BSF    03.5
1209:  MOVWF  31
120A:  BCF    03.5
120B:  CALL   099
120C:  MOVF   78,W
120D:  MOVWF  29
....................              
....................             } 
....................     
....................  
.................... } 
120E:  BCF    0A.3
120F:  BSF    0A.4
1210:  GOTO   6FF (RETURN)
....................  
....................  
.................... ///////////////// 
.................... //Menu Function 
.................... //////////////// 
....................  
....................  
....................  
.................... ///////////////// 
.................... //Calibrate Function 
.................... //////////////// 
....................  
.................... int16 calibrate(int16 analog){ 
....................    return analog; //You could use this function when there's no input electric device. 
10C9:  MOVF   31,W
10CA:  MOVWF  78
10CB:  MOVF   32,W
10CC:  MOVWF  79
....................  
....................  
.................... } 
.................... int16 resetcalibrate(){ 
....................    return 525;   //return old reference. 
1177:  MOVLW  0D
1178:  MOVWF  78
1179:  MOVLW  02
117A:  MOVWF  79
....................  
.................... } 
.................... ///////////////// 
.................... //Calibrate Function 
.................... //////////////// 
....................  
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
.................... int1 checkselect(int1 menu){ 
....................         
....................       if(selectUsed==0 && selectPush==1){ 
01E3:  BTFSC  28.1
01E4:  GOTO   1F2
01E5:  BTFSS  28.0
01E6:  GOTO   1F2
....................          selectUsed=1; 
01E7:  BSF    28.1
....................          menu+=1; 
01E8:  MOVLW  01
01E9:  BSF    03.5
01EA:  ADDWF  32,F
....................          clearDisplay(); 
01EB:  BCF    03.5
01EC:  CALL   1D0
....................          delay_us(100); 
01ED:  MOVLW  A6
01EE:  MOVWF  77
01EF:  DECFSZ 77,F
01F0:  GOTO   1EF
01F1:  NOP
....................        } 
....................     
....................        return menu; 
01F2:  BSF    03.5
01F3:  MOVF   32,W
01F4:  MOVWF  78
.................... } 
01F5:  BCF    03.5
01F6:  RETURN
....................  
.................... int1 checkexit(int1 menu){ 
....................         
....................        if(exitUsed==0 && exitPush==1){ 
12C0:  BTFSC  28.3
12C1:  GOTO   2D0
12C2:  BTFSS  28.2
12C3:  GOTO   2D0
....................          exitUsed=1; 
12C4:  BSF    28.3
....................          menu+=1; 
12C5:  MOVLW  01
12C6:  ADDWF  69,F
....................          clearDisplay(); 
12C7:  BCF    0A.4
12C8:  CALL   1D0
12C9:  BSF    0A.4
....................          delay_us(100); 
12CA:  MOVLW  A6
12CB:  MOVWF  77
12CC:  DECFSZ 77,F
12CD:  GOTO   2CC
12CE:  NOP
....................        } 
....................        else{ 
12CF:  GOTO   2D3
....................          return menu; 
12D0:  MOVF   69,W
12D1:  MOVWF  78
12D2:  GOTO   2D5
....................         
....................        } 
....................        return menu; 
12D3:  MOVF   69,W
12D4:  MOVWF  78
.................... } 
....................  
.................... int checkleft(int menu){ 
....................         
....................        if(leftUsed==0 && leftPush==1){ 
1083:  BTFSC  28.5
1084:  GOTO   094
1085:  BTFSS  28.4
1086:  GOTO   094
....................          leftUsed=1; 
1087:  BSF    28.5
....................          menu-=1; 
1088:  MOVLW  01
1089:  BSF    03.5
108A:  SUBWF  31,F
....................          clearDisplay(); 
108B:  BCF    0A.4
108C:  BCF    03.5
108D:  CALL   1D0
108E:  BSF    0A.4
....................          delay_us(100); 
108F:  MOVLW  A6
1090:  MOVWF  77
1091:  DECFSZ 77,F
1092:  GOTO   091
1093:  NOP
....................        } 
....................         
....................        return menu; 
1094:  BSF    03.5
1095:  MOVF   31,W
1096:  MOVWF  78
.................... } 
1097:  BCF    03.5
1098:  RETURN
....................  
.................... int checkright(int menu){ 
....................         
....................        if(rightUsed==0 && rightPush==1){ 
1099:  BTFSC  28.7
109A:  GOTO   0AA
109B:  BTFSS  28.6
109C:  GOTO   0AA
....................          rightUsed=1; 
109D:  BSF    28.7
....................          menu+=1; 
109E:  MOVLW  01
109F:  BSF    03.5
10A0:  ADDWF  31,F
....................          clearDisplay(); 
10A1:  BCF    0A.4
10A2:  BCF    03.5
10A3:  CALL   1D0
10A4:  BSF    0A.4
....................          delay_us(100); 
10A5:  MOVLW  A6
10A6:  MOVWF  77
10A7:  DECFSZ 77,F
10A8:  GOTO   0A7
10A9:  NOP
....................        } 
....................         
....................        return menu; 
10AA:  BSF    03.5
10AB:  MOVF   31,W
10AC:  MOVWF  78
.................... } 
10AD:  BCF    03.5
10AE:  RETURN
....................  
.................... ///////////////// 
.................... //check button 
.................... //////////////// 
....................  
....................  
....................  
....................  
....................  
....................  
....................  
....................  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void displayLongText(char* text) { 
....................  
.................... int i ; 
.................... i2c_start(); 
0213:  BSF    03.5
0214:  BSF    11.0
0215:  BTFSC  11.0
0216:  GOTO   215
.................... i2c_write(DISPLAY_ADDRESS); 
0217:  MOVLW  B4
0218:  MOVWF  37
0219:  BCF    03.5
021A:  CALL   1BE
.................... i2c_write(DISPLAY_CMD_SEND_LONG_TEXT); 
021B:  MOVLW  05
021C:  BSF    03.5
021D:  MOVWF  37
021E:  BCF    03.5
021F:  CALL   1BE
....................  
.................... for(i=0;text[i]!='\0';i++) 
0220:  BSF    03.5
0221:  CLRF   35
0222:  MOVF   35,W
0223:  ADDWF  33,W
0224:  MOVWF  04
0225:  BCF    03.7
0226:  BTFSC  34.0
0227:  BSF    03.7
0228:  MOVF   00,F
0229:  BTFSC  03.2
022A:  GOTO   239
.................... { 
.................... i2c_write(text[i]); 
022B:  MOVF   35,W
022C:  ADDWF  33,W
022D:  MOVWF  04
022E:  BCF    03.7
022F:  BTFSC  34.0
0230:  BSF    03.7
0231:  MOVF   00,W
0232:  MOVWF  36
0233:  MOVWF  37
0234:  BCF    03.5
0235:  CALL   1BE
....................  
.................... } 
0236:  BSF    03.5
0237:  INCF   35,F
0238:  GOTO   222
.................... i2c_write('\0'); 
0239:  CLRF   37
023A:  BCF    03.5
023B:  CALL   1BE
.................... i2c_stop(); 
023C:  BSF    03.5
023D:  BSF    11.2
023E:  BTFSC  11.2
023F:  GOTO   23E
....................  
.................... //delay_ms(100); 
....................  
.................... } 
0240:  BCF    03.5
0241:  RETURN
....................  
....................  
.................... void displayValue(int16 value[]) { 
....................  
....................    i2c_start(); 
1052:  BSF    03.5
1053:  BSF    11.0
1054:  BTFSC  11.0
1055:  GOTO   054
....................    i2c_write(DISPLAY_ADDRESS); 
1056:  MOVLW  B4
1057:  MOVWF  37
1058:  BCF    0A.4
1059:  BCF    03.5
105A:  CALL   1BE
105B:  BSF    0A.4
....................    i2c_write(DISPLAY_CMD_SEND_VALUE); 
105C:  MOVLW  02
105D:  BSF    03.5
105E:  MOVWF  37
105F:  BCF    0A.4
1060:  BCF    03.5
1061:  CALL   1BE
1062:  BSF    0A.4
....................    i2c_write((int)(value>>8)); // high byte 
1063:  MOVF   6D,W
1064:  CLRF   7A
1065:  MOVWF  6E
1066:  BSF    03.5
1067:  MOVWF  37
1068:  BCF    0A.4
1069:  BCF    03.5
106A:  CALL   1BE
106B:  BSF    0A.4
....................    i2c_write((int)(value & 0xFF)); // low byte 
106C:  MOVF   6C,W
106D:  MOVWF  77
106E:  CLRF   7A
106F:  MOVF   6C,W
1070:  MOVWF  6E
1071:  BSF    03.5
1072:  MOVWF  37
1073:  BCF    0A.4
1074:  BCF    03.5
1075:  CALL   1BE
1076:  BSF    0A.4
....................    i2c_write('\0'); 
1077:  BSF    03.5
1078:  CLRF   37
1079:  BCF    0A.4
107A:  BCF    03.5
107B:  CALL   1BE
107C:  BSF    0A.4
....................    i2c_stop(); 
107D:  BSF    03.5
107E:  BSF    11.2
107F:  BTFSC  11.2
1080:  GOTO   07F
....................     
.................... } 
1081:  BCF    03.5
1082:  RETURN
....................  
.................... void clearDisplay(){ 
....................  
....................    i2c_start(); 
01D0:  BSF    03.5
01D1:  BSF    11.0
01D2:  BTFSC  11.0
01D3:  GOTO   1D2
....................    i2c_write(DISPLAY_ADDRESS); 
01D4:  MOVLW  B4
01D5:  MOVWF  37
01D6:  BCF    03.5
01D7:  CALL   1BE
....................    i2c_write(DISPLAY_CMD_CLS); 
01D8:  MOVLW  06
01D9:  BSF    03.5
01DA:  MOVWF  37
01DB:  BCF    03.5
01DC:  CALL   1BE
....................    i2c_stop(); 
01DD:  BSF    03.5
01DE:  BSF    11.2
01DF:  BTFSC  11.2
01E0:  GOTO   1DF
.................... } 
01E1:  BCF    03.5
01E2:  RETURN
....................  
.................... void setDisplayPos(int pos){ 
....................    i2c_start(); 
01F7:  BSF    03.5
01F8:  BSF    11.0
01F9:  BTFSC  11.0
01FA:  GOTO   1F9
....................    i2c_write(DISPLAY_ADDRESS); 
01FB:  MOVLW  B4
01FC:  MOVWF  37
01FD:  BCF    03.5
01FE:  CALL   1BE
....................    i2c_write(DISPLAY_CMD_SETPOS); 
01FF:  MOVLW  08
0200:  BSF    03.5
0201:  MOVWF  37
0202:  BCF    03.5
0203:  CALL   1BE
....................    i2c_write(pos); 
0204:  BSF    03.5
0205:  MOVF   31,W
0206:  MOVWF  37
0207:  BCF    03.5
0208:  CALL   1BE
....................    i2c_write('\0'); 
0209:  BSF    03.5
020A:  CLRF   37
020B:  BCF    03.5
020C:  CALL   1BE
....................    i2c_stop(); 
020D:  BSF    03.5
020E:  BSF    11.2
020F:  BTFSC  11.2
0210:  GOTO   20F
.................... } 
0211:  BCF    03.5
0212:  RETURN
.................... /////////////////////////////////////////////////////////////////////////// 
.................... //LCD Display Funtion  
.................... /////////////////////////////////////////////////////////////////////////// 

Configuration Fuses:
   Word  1: 2FC2   HS NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT

ROM data:
002100: 0000 
